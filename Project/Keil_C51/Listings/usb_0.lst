C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE USB_0
OBJECT MODULE PLACED IN .\Objects\usb_0.obj
COMPILER INVOKED BY: D:\MyProKits\MucKits\Keil_C51_Rev956\C51\BIN\C51.EXE ..\..\SdkTool\EFM8UB2\Perip\Src\usb_0.c LARGE 
                    -OMF2 OPTIMIZE(0,SPEED) BROWSE INCDIR(..\..\SrcCode\Bsp\Inc;..\..\SrcCode\Logic\Inc;..\..\SrcCode\Middle\Gui\Inc;..\..\Sr
                    -cCode\Middle\Input\Inc;..\..\SdkTool\Si8051Base;..\..\SdkTool\EFM8UB2\Inc;..\..\SdkTool\EFM8UB2\Perip\Inc;..\..\SdkTool\
                    -EFM8UB2\Xpress\Inc) DEBUG CODE LISTINCLUDE SYMBOLS PRINT(.\Listings\usb_0.lst) TABS(2) PREPRINT(.\Listings\usb_0.i) OBJE
                    -CT(.\Objects\usb_0.obj)

line level    source

   1          /**************************************************************************//**
   2           * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3           *
   4           * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5           *****************************************************************************/
   6          
   7          #include "usb_0.h"
   1      =1  /***************************************************************************//**
   2      =1   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =1   *
   4      =1   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =1   ******************************************************************************/
   6      =1  
   7      =1  #ifndef __SILICON_LABS_EFM8_USB_0_H__
   8      =1  #define __SILICON_LABS_EFM8_USB_0_H__
   9      =1  
  10      =1  #include "SI_EFM8UB2_Register_Enums.h"
   1      =2  //------------------------------------------------------------------------------
   2      =2  // Copyright 2014 Silicon Laboratories, Inc.
   3      =2  // All rights reserved. This program and the accompanying materials
   4      =2  // are made available under the terms of the Silicon Laboratories End User
   5      =2  // License Agreement which accompanies this distribution, and is available at
   6      =2  // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   7      =2  // Original content and implementation provided by Silicon Laboratories.
   8      =2  //------------------------------------------------------------------------------
   9      =2  //Supported Devices:
  10      =2  //  EFM8UB20F32G_QFN32
  11      =2  //  EFM8UB20F32G_QFP32
  12      =2  //  EFM8UB20F32G_QFP48
  13      =2  //  EFM8UB20F64G_QFN32
  14      =2  //  EFM8UB20F64G_QFP32
  15      =2  //  EFM8UB20F64G_QFP48
  16      =2  
  17      =2  #ifndef SI_EFM8UB2_REGISTER_ENUMS_H
  18      =2  #define SI_EFM8UB2_REGISTER_ENUMS_H
  19      =2  
  20      =2  //Standard device includes
  21      =2  #include "SI_EFM8UB2_Defs.h"
   1      =3  //------------------------------------------------------------------------------
   2      =3  // Copyright 2014 Silicon Laboratories, Inc.
   3      =3  // All rights reserved. This program and the accompanying materials
   4      =3  // are made available under the terms of the Silicon Laboratories End User
   5      =3  // License Agreement which accompanies this distribution, and is available at
   6      =3  // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   7      =3  // Original content and implementation provided by Silicon Laboratories.
   8      =3  //------------------------------------------------------------------------------
   9      =3  //Supported Devices:
  10      =3  //  EFM8UB20F32G_QFN32
  11      =3  //  EFM8UB20F32G_QFP32
  12      =3  //  EFM8UB20F32G_QFP48
  13      =3  //  EFM8UB20F64G_QFN32
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 2   

  14      =3  //  EFM8UB20F64G_QFP32
  15      =3  //  EFM8UB20F64G_QFP48
  16      =3  
  17      =3  #ifndef SI_EFM8UB2_DEFS_H
  18      =3  #define SI_EFM8UB2_DEFS_H
  19      =3  
  20      =3  #include <si_toolchain.h>
   1      =4  /******************************************************************************
   2      =4   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =4   *
   4      =4   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =4   *****************************************************************************/
   6      =4  
   7      =4  #ifndef __SI_TOOLCHAIN_H__
   8      =4  #define __SI_TOOLCHAIN_H__
   9      =4  
  10      =4  #include <stdint.h>
   1      =5  /**************************************************************************//**
   2      =5   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =5   *
   4      =5   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =5   *****************************************************************************/
   6      =5  
   7      =5  #ifndef STDINT_H
   8      =5  #define STDINT_H
   9      =5  
  10      =5  #if defined __C51__
  11      =5  
  12      =5  typedef unsigned char     uint8_t;
  13      =5  typedef unsigned short    uint16_t;
  14      =5  typedef unsigned long     uint32_t;
  15      =5  typedef uint32_t          uint64_t[2];
  16      =5  
  17      =5  typedef signed char       int8_t;
  18      =5  typedef short             int16_t;
  19      =5  typedef long              int32_t;
  20      =5  typedef int32_t           int64_t[2];
  21      =5  
  22      =5  #endif
  23      =5  
  24      =5  #endif
  11      =4  #include <stdbool.h>
   1      =5  /**************************************************************************//**
   2      =5   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =5   *
   4      =5   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =5   *****************************************************************************/
   6      =5  
   7      =5  #ifndef STDBOOL_H
   8      =5  #define STDBOOL_H
   9      =5  
  10      =5  #if defined __C51__
  11      =5  
  12      =5  typedef bit bool;
  13      =5  enum{
  14      =5    false = 0,
  15      =5    true = 1,
  16      =5  };
  17      =5  
  18      =5  #endif //__C51__
  19      =5  #endif //STDBOOL_H
  20      =5  
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 3   

  12      =4  
  13      =4  /**************************************************************************//**
  14      =4   *
  15      =4   * @addtogroup toolchain_group Toolchain Abstraction
  16      =4   *
  17      =4   * @brief Macros for toolchain abstraction.
  18      =4   *
  19      =4   * # Introduction #
  20      =4   *
  21      =4   * This header file contains macros that are used to provide an abstraction
  22      =4   * for toolchain use in source code.  The 8051 compiler requires C-language
  23      =4   * extensions in order to fully use features of the 8051 architecture.  All
  24      =4   * compilers for 8051 implement a set of extensions but use different names
  25      =4   * and ways of implementing those extensions.  This header file provides
  26      =4   * macros that are defined for each supported toolchain and can be used in
  27      =4   * the source code.  This allows the source code to use 8051 extensions and
  28      =4   * remain independent of which toolchain is used for compilation.
  29      =4   *
  30      =4   * ## Variable and Pointer Declarations ##
  31      =4   *
  32      =4   * It is often useful to specify the memory area (or segment) of a variable,
  33      =4   * pointer, or pointer target.  For example, you may wish to place all
  34      =4   * variables in XDATA by default, but for variables used in time-sensitive
  35      =4   * code you use DATA for efficient access.  In this case you declare the
  36      =4   * XDATA variable in the normal C way, but declare the variables to be located
  37      =4   * in the DATA segment using @ref SI_SEGMENT_VARIABLE.
  38      =4   *
  39      =4   * Pointers are more complicated because there are two memory spaces
  40      =4   * associated with a pointer, the pointer target, and the pointer variable
  41      =4   * itself.  When using default memory segment for the pointer location and
  42      =4   * target, then no special macro is needed.  But if you wish to specify the
  43      =4   * pointer variable location, or target memory segment, then you can use one
  44      =4   * of the following macros to do this in a toolchain-independent way.
  45      =4   *
  46      =4   * |Pointer segment|Target segment|Macro                                   |
  47      =4   * |---------------|--------------|----------------------------------------|
  48      =4   * |default        |generic       |None                                    |
  49      =4   * |default        |specific      |@ref SI_VARIABLE_SEGMENT_POINTER        |
  50      =4   * |specific       |generic       |@ref SI_SEGMENT_POINTER                 |
  51      =4   * |specific       |specific      |@ref SI_SEGMENT_VARIABLE_SEGMENT_POINTER|
  52      =4   *
  53      =4   * ## Prior Toolchain Abstraction Header File ##
  54      =4   *
  55      =4   * This file supercedes an earlier header file named `compiler_defs.h`.  We
  56      =4   * are deprecating the use of compiler_defs.h, however it will remain for
  57      =4   * backwards compatibility.  This file was created to normalize macro names,
  58      =4   * remove unused macros, and to provide documentation.
  59      =4   *
  60      =4   * ## Supported Toolchains ##
  61      =4   *
  62      =4   * - Keil/ARM C51
  63      =4   *
  64      =4   * @{
  65      =4   *
  66      =4   *****************************************************************************/
  67      =4  
  68      =4  // Make sure there is a NULL defined if the toolchain does not provide it.
  69      =4  #ifndef NULL
  70      =4  #define NULL ((void *)0)
  71      =4  #endif
  72      =4  
  73      =4  // -------------------------------
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 4   

  74      =4  // Keil/ARM C51
  75      =4  //
  76      =4  #if defined(__C51__)
  77      =4  
  78      =4  /// Used with pointers, declares a generic pointer.  Generic pointers
  79      =4  /// work with any memory space but are inefficient.
  80      =4  #define SI_SEG_GENERIC
  81      =4  
  82      =4  /// Declares a variable to be located in 8051 DATA space.
  83      =4  #define SI_SEG_DATA data
  84      =4  
  85      =4  /// Declares a variable to be located in 8051 IDATA space.
  86      =4  #define SI_SEG_IDATA idata
  87      =4  
  88      =4  /// Declares a variable to be located in 8051 XDATA space.
  89      =4  #define SI_SEG_XDATA xdata
  90      =4  
  91      =4  /// Declares a variable to be located in 8051 PDATA space.
  92      =4  #define SI_SEG_PDATA pdata
  93      =4  
  94      =4  /// Declares a variable to be located in 8051 BDATA (bit-addressable) space.
  95      =4  #define SI_SEG_BDATA bdata
  96      =4  
  97      =4  /// Declares a variable to be located in 8051 CODE space.
  98      =4  #define SI_SEG_CODE code
  99      =4  
 100      =4  /**************************************************************************//**
 101      =4   * Declares a bit variable in a bit-addressable SFR or memory space.
 102      =4   *
 103      =4   * @param name The name of the bit variable.
 104      =4   * @param address The address of the byte containing the bit.
 105      =4   * @param bitnum The bit number (0-7) within the byte.
 106      =4   *
 107      =4   * This cannot be used to make any arbitrary SFR or variable into
 108      =4   * a bit variable.  The underlying memory must support bit-addressability.
 109      =4   *****************************************************************************/
 110      =4  #define SI_SBIT(name, address, bitnum) sbit name = address^bitnum
 111      =4  
 112      =4  /**************************************************************************//**
 113      =4   * Declares an 8-bit special function register (SFR) variable.
 114      =4   *
 115      =4   * @param name The name of the SFR variable.
 116      =4   * @param address The address of the SFR.
 117      =4   *
 118      =4   * This creates a C variable (8-bit) that maps to a physical special function
 119      =4   * register of the 8051.  This cannot be used to make any arbitrary memory
 120      =4   * location into an SFR.  The _address_ must map to a real SFR in the memory
 121      =4   * map.
 122      =4   *****************************************************************************/
 123      =4  #define SI_SFR(name, address) sfr name = address
 124      =4  
 125      =4  /**************************************************************************//**
 126      =4   * Declares a 16-bit special function register (SFR) variable.
 127      =4   *
 128      =4   * @param name The name of the SFR variable.
 129      =4   * @param address The address of the 16-bit SFR.
 130      =4   *
 131      =4   * This creates a C variable (16-bit) that maps to a physical special function
 132      =4   * register of the 8051.  This cannot be used to make any arbitrary memory
 133      =4   * location into an SFR.  The _address_ must map to a real 16-bit SFR in the
 134      =4   * memory map.
 135      =4   *****************************************************************************/
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 5   

 136      =4  #define SI_SFR16(name, address) sfr16 name = address
 137      =4  
 138      =4  #ifndef __SLS_IDE__
 139      =4  /**************************************************************************//**
 140      =4   * Define an interrupt handler function for an interrupt vector.
 141      =4   *
 142      =4   * @param name The name of the interrupt handler function.
 143      =4   * @param vector The interrupt vector number.
 144      =4   *
 145      =4   * This macro defines a function to be an interrupt handler.  The _vector_
 146      =4   * parameter is the 8051 interrupt vector number, not the address.  This
 147      =4   * will cause the compiler to treat the function as the interrupt handler
 148      =4   * and generate the appropriate prolog/epilog code.
 149      =4   *
 150      =4   * @note This macro is used to define the function implementation.  To declare
 151      =4   * the interrupt function prototype, use @ref SI_INTERRUPT_PROTO.
 152      =4   *****************************************************************************/
 153      =4  #define SI_INTERRUPT(name, vector) void name (void) interrupt vector
 154      =4  
 155      =4  /**************************************************************************//**
 156      =4   * Define an interrupt handler function using a specific register bank.
 157      =4   *
 158      =4   * @param name The name of the interrupt handler function.
 159      =4   * @param vector The interrupt vector number.
 160      =4   * @param regnum The register bank number (0-3).
 161      =4   *
 162      =4   * This macro defines a function to be an interrupt handler, using a specific
 163      =4   * register bank for the interrupt code.  The _vector_ parameter is the 8051
 164      =4   * interrupt vector number, not the address.  The _regnum_ parameter is the
 165      =4   * register bank number (0-3) that will be used as general purpose registers
 166      =4   * for the instructions in the compiled code.  Using dedicated register banks
 167      =4   * for interrupt handlers allows the prolog code to just switch banks instead
 168      =4   * of saving and restoring all the general purpose registers.  This can make
 169      =4   * interrupt entry/exit faster but requires dedicating a register bank for
 170      =4   * the interrupt handler.
 171      =4   *
 172      =4   * @note This macro is used to define the function implementation.  To declare
 173      =4   * the interrupt function prototype, use @ref SI_INTERRUPT_PROTO_USING.
 174      =4   *****************************************************************************/
 175      =4  #define SI_INTERRUPT_USING(name, vector, regnum)                             \
 176      =4               void name (void) interrupt vector using regnum
 177      =4  
 178      =4  /**************************************************************************//**
 179      =4   * Declare an interrupt handler prototype for an interrupt vector.
 180      =4   *
 181      =4   * @param name The name of the interrupt handler function.
 182      =4   * @param vector The interrupt vector number.
 183      =4   *
 184      =4   * This macro declares a function prototype for an interrupt handler.  The
 185      =4   * _vector_ parameter is the 8051 interrupt vector number, not the address.
 186      =4   * Declaring the function prototype this way will cause the compiler to
 187      =4   * recognize that the function is an interrupt handler and not a normal C
 188      =4   * function.
 189      =4   *
 190      =4   * @note This macro is used to declare a prototype for the interrupt function.
 191      =4   * To define the interrupt function implementation, use @ref SI_INTERRUPT.
 192      =4   *****************************************************************************/
 193      =4  #define SI_INTERRUPT_PROTO(name, vector) void name (void)
 194      =4  
 195      =4  /**************************************************************************//**
 196      =4   * Declare an interrupt handler prototype using a specific register bank.
 197      =4   *
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 6   

 198      =4   * @param name The name of the interrupt handler function.
 199      =4   * @param vector The interrupt vector number.
 200      =4   * @param regnum The register bank number (0-3).
 201      =4   *
 202      =4   * This macro declares a function prototype for an interrupt handler, for a
 203      =4   * function that uses a specific register bank for the interrupt code.  The
 204      =4   * _vector_ parameter is the 8051 interrupt vector number, not the address.
 205      =4   * The _regnum_ parameter is the register bank number (0-3) that will be used
 206      =4   * as general purpose registers in the function.  Declaring the function
 207      =4   * prototype this way will cause the compiler to recognize that the function
 208      =4   * is an interrupt handler and is not a normal C function.
 209      =4   *
 210      =4   * @note This macro is used to declare a prototype for the interrupt function.
 211      =4   * To define the interrupt function implementation,
 212      =4   * use @ref SI_INTERRUPT_USING.
 213      =4   *****************************************************************************/
 214      =4  #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
 215      =4  
 216      =4  /**************************************************************************//**
 217      =4   * Define a function to use a specific register bank.
 218      =4   *
 219      =4   * @param name The name of the function.
 220      =4   * @param return_value The data type of the function return value
 221      =4   * (void, int, etc).
 222      =4   * @param parameter One C function parameter (or "void") (type and name).
 223      =4   * @param regnum The register bank number (0-3).
 224      =4   *
 225      =4   * This macro defines a function that uses a specific register bank.  The
 226      =4   * _regnum_ parameter is the register bank number (0-3) that will be used as
 227      =4   * general purpose registers for the instructions in the compiled function
 228      =4   * code.  Using dedicated register banks for a function can reduce the amount
 229      =4   * of registers saving and restoring needed on entry and exit to the
 230      =4   * function.  However, this is an advanced feature and you should not use it
 231      =4   * unless you fully understand how and when to use register banking.
 232      =4   *
 233      =4   * You must specify the _return_value_ which is the type of the function.  It
 234      =4   * can be `void` or any other C type or typedef.  The _parameters_ argument
 235      =4   * is the list of function parameters.  It can be `void` or else it must be
 236      =4   * a parameter data type and name.  It can also be multiple parameters but
 237      =4   * they must be enclosed in parentheses and separated by commas.
 238      =4   *
 239      =4   * __Example__
 240      =4   *
 241      =4   * ~~~~~~~~.c
 242      =4   * // The following is used to implement a function with the following
 243      =4   * // signature, and that uses register bank 3 ...
 244      =4   * uint16_t myFunction(uint8_t parm1, uint8_t parm2);
 245      =4   *
 246      =4   * SI_FUNCTION_USING(myFunction, uint16_t, (uint8_t parm1, uint8_t parm2), 3)
 247      =4   * {
 248      =4   *   // Function implementation body
 249      =4   * }
 250      =4   * ~~~~~~~~
 251      =4   *
 252      =4   * @note This macro is used to define the function implementation.  To declare
 253      =4   * the function prototype, use @ref SI_FUNCTION_PROTO_USING.
 254      =4   *****************************************************************************/
 255      =4  #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
 256      =4               return_value name (parameter) using regnum
 257      =4  
 258      =4  /**************************************************************************//**
 259      =4   * Declare a function that uses a specific register bank.
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 7   

 260      =4   *
 261      =4   * @param name The name of the function.
 262      =4   * @param return_value The data type of the function return value
 263      =4   * (void, int, etc).
 264      =4   * @param parameter One C function parameter (or "void") (type and name).
 265      =4   * @param regnum The register bank number (0-3).
 266      =4   *
 267      =4   * This macro declares a function prototype for a C function that uses a
 268      =4   * specific register its working registers.  See the documentation for
 269      =4   * @ref SI_FUNCTION_USING for an explanation of the macro arguments.  This is
 270      =4   * an advanced feature.
 271      =4   *
 272      =4   * @note This macro is used to declare a prototype for the function.  To
 273      =4   * define the function implementation, use @ref SI_FUNCTION_USING.
 274      =4   *****************************************************************************/
 275      =4  #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
 276      =4               return_value name (parameter)
 277      =4  
 278      =4  /**************************************************************************//**
 279      =4   * Declare a variable to be located in a specific memory segment.
 280      =4   *
 281      =4   * @param name The variable name.
 282      =4   * @param vartype The variable data type.
 283      =4   * @param memseg The memory segment to use for the variable.
 284      =4   *
 285      =4   * This macro declares a variable to be located in a specific memory area
 286      =4   * (or segment) of the 8051 memory space.  It is only necessary to use this
 287      =4   * macro if you want to force the variable into a specific memory space instead
 288      =4   * of the default memory space used by the compiler.  The segment can be
 289      =4   * one of the following:
 290      =4   *
 291      =4   * - @ref SI_SEG_DATA
 292      =4   * - @ref SI_SEG_IDATA
 293      =4   * - @ref SI_SEG_BDATA
 294      =4   * - @ref SI_SEG_PDATA
 295      =4   * - @ref SI_SEG_XDATA
 296      =4   * - @ref SI_SEG_CODE
 297      =4   *
 298      =4   * __Example__
 299      =4   *
 300      =4   * ~~~~~~~~.c
 301      =4   * // The following macro can be used to create a variable located in
 302      =4   * // XDATA with the following signature:
 303      =4   * uint8_t myVar;
 304      =4   *
 305      =4   * SI_SEGMENT_VARIABLE(myVar, uint8_t, SEG_XDATA);
 306      =4   * ~~~~~~~~
 307      =4   *****************************************************************************/
 308      =4  #define SI_SEGMENT_VARIABLE(name, vartype, memseg) vartype memseg name
 309      =4  
 310      =4  /**************************************************************************//**
 311      =4   * Declare a memory segment specific pointer variable.
 312      =4   *
 313      =4   * @param name The pointer variable name.
 314      =4   * @param vartype The pointer data type.
 315      =4   * @param targseg The target memory segment for the pointer.
 316      =4   *
 317      =4   * This macro declares a pointer that points at a specific memory area
 318      =4   * (or segment).  The memory segment of the pointer variable itself is not
 319      =4   * specified and the default is used.  The segment can be one of the following:
 320      =4   *
 321      =4   * - @ref SI_SEG_DATA
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 8   

 322      =4   * - @ref SI_SEG_IDATA
 323      =4   * - @ref SI_SEG_BDATA
 324      =4   * - @ref SI_SEG_PDATA
 325      =4   * - @ref SI_SEG_XDATA
 326      =4   * - @ref SI_SEG_CODE
 327      =4   *
 328      =4   * __Example__
 329      =4   *
 330      =4   * ~~~~~~~~.c
 331      =4   * // The following macro can be used to create a pointer that points to
 332      =4   * // a location in XDATA with the following signature:
 333      =4   * uint8_t *pVar; // where pVar is pointing at XDATA
 334      =4   *
 335      =4   * SI_VARIABLE_SEGMENT_POINTER(pVar, uint8_t, SEG_XDATA);
 336      =4   * ~~~~~~~~
 337      =4   *****************************************************************************/
 338      =4  #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targseg)                  \
 339      =4               vartype targseg * name
 340      =4  
 341      =4  /**************************************************************************//**
 342      =4   * Declare a memory segment specific pointer variable, in a specific segment.
 343      =4   *
 344      =4   * @param name The pointer variable name.
 345      =4   * @param vartype The pointer data type.
 346      =4   * @param targseg The target memory segment for the pointer.
 347      =4   * @param memseg The memory segment to use for the pointer variable.
 348      =4   *
 349      =4   * This macro declares a pointer that points at a specific memory area
 350      =4   * (or segment).  The pointer variable itself is also located in a specified
 351      =4   * memory segment by _memseg_.  The arguments _targseg_ and _memseg_ can be
 352      =4   * one of the following:
 353      =4   *
 354      =4   * - @ref SI_SEG_DATA
 355      =4   * - @ref SI_SEG_IDATA
 356      =4   * - @ref SI_SEG_BDATA
 357      =4   * - @ref SI_SEG_PDATA
 358      =4   * - @ref SI_SEG_XDATA
 359      =4   * - @ref SI_SEG_CODE
 360      =4   *
 361      =4   * __Example__
 362      =4   *
 363      =4   * ~~~~~~~~.c
 364      =4   * // The following macro can be used to create a pointer that points to
 365      =4   * // a location in XDATA while the pointer itself is located in DATA, with
 366      =4   * // the following signature:
 367      =4   * uint8_t *pVar; // where pVar is located in DATA and is pointing at XDATA
 368      =4   *
 369      =4   * SI_SEGMENT_VARIABLE_SEGMENT_POINTER(pVar, uint8_t, SEG_XDATA, SEG_DATA);
 370      =4   * ~~~~~~~~
 371      =4   *****************************************************************************/
 372      =4  #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targseg, memseg)  \
 373      =4               vartype targseg * memseg name
 374      =4  
 375      =4  /**************************************************************************//**
 376      =4   * Declare a generic pointer variable that is located in a specific segment.
 377      =4   *
 378      =4   * @param name The pointer variable name.
 379      =4   * @param vartype The pointer data type.
 380      =4   * @param memseg The memory segment to use for the pointer variable.
 381      =4   *
 382      =4   * This macro declares a pointer that is a generic pointer.  This means it can
 383      =4   * point at any kind of memory location.  However the pointer variable itself
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 9   

 384      =4   * is located in a specific memory segment by _memseg_, which can be one of
 385      =4   * the following:
 386      =4   *
 387      =4   * - @ref SI_SEG_DATA
 388      =4   * - @ref SI_SEG_IDATA
 389      =4   * - @ref SI_SEG_BDATA
 390      =4   * - @ref SI_SEG_PDATA
 391      =4   * - @ref SI_SEG_XDATA
 392      =4   * - @ref SI_SEG_CODE
 393      =4   *
 394      =4   * __Example__
 395      =4   *
 396      =4   * ~~~~~~~~.c
 397      =4   * // The following macro can be used to create a generic pointer that
 398      =4   * // is located in DATA and points at any memory type, with the
 399      =4   * // following signature:
 400      =4   * uint8_t *pVar; // where pVar is located in DATA and is a generic pointer
 401      =4   *
 402      =4   * SI_SEGMENT_POINTER(pVar, uint8_t, SEG_DATA);
 403      =4   * ~~~~~~~~
 404      =4   *****************************************************************************/
 405      =4  #define SI_SEGMENT_POINTER(name, vartype, memseg) vartype * memseg name
 406      =4  
 407      =4  /**************************************************************************//**
 408      =4   * Declare an uninitialized variable that is located at a specific address.
 409      =4   *
 410      =4   * @param name The variable name.
 411      =4   * @param vartype The variable data type.
 412      =4   * @param memseg The memory segment to use for the variable.
 413      =4   * @param address The memory address of the variable.
 414      =4   *
 415      =4   * This macro allows declaring a variable that can be placed at a specific
 416      =4   * location in memory.  This can only be used for variables that do not need
 417      =4   * initializers.  The _address_ is the memory address within the specified
 418      =4   * segment.  The memory segment, _memseg_, can be one of the following:
 419      =4   *
 420      =4   * - @ref SI_SEG_DATA
 421      =4   * - @ref SI_SEG_IDATA
 422      =4   * - @ref SI_SEG_BDATA
 423      =4   * - @ref SI_SEG_PDATA
 424      =4   * - @ref SI_SEG_XDATA
 425      =4   * - @ref SI_SEG_CODE
 426      =4   *
 427      =4   * __Example__
 428      =4   *
 429      =4   * ~~~~~~~~.c
 430      =4   * // The following declares a variable located at 0x4000 in XDATA with
 431      =4   * // the following signature:
 432      =4   * uint8_t myMemVar;
 433      =4   *
 434      =4   * SI_LOCATED_VARIABLE_NO_INIT(myMemVar, uint8_t, SEG_DATA, 0x4000);
 435      =4   * ~~~~~~~~
 436      =4   *****************************************************************************/
 437      =4  #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, memseg, address)          \
 438      =4               vartype memseg name _at_ address
 439      =4  
 440      =4  
 441      =4  #else  // __SLS_IDE__ : Macros defined to remove syntax errors within Simplicity Studio
           =4 #define SI_INTERRUPT(name, vector) void name (void)
           =4 #define SI_INTERRUPT_USING(name, vector, regnum) void name (void)
           =4 #define SI_INTERRUPT_PROTO(name, vector) void name (void)
           =4 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 10  

           =4 
           =4 #define SI_FUNCTION_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum) return_value name (parameter)
           =4 // Note: Parameter must be either 'void' or include a variable type and name. (Ex: char temp_variable)
           =4 
           =4 #define SI_SEGMENT_VARIABLE(name, vartype, locsegment) vartype name
           =4 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment) vartype * name
           =4 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targsegment, locsegment) vartype * name
           =4 #define SI_SEGMENT_POINTER(name, vartype, locsegment) vartype * name
           =4 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, locsegment, addr) vartype name
           =4 #endif // __SLS_IDE__
 457      =4  
 458      =4  // The following are used for byte ordering when referring to individual
 459      =4  // bytes within a SI_UU32_t.  B0 is the least significant byte.
 460      =4  #define B0 3 ///< Least significant byte of a 4 byte word
 461      =4  #define B1 2 ///< Byte 1 of a 4-byte word, where byte 0 is LSB
 462      =4  #define B2 1 ///< Byte 2 of a 4-byte word, where byte 0 is LSB
 463      =4  #define B3 0 ///< Most significant byte of a 4-byte word
 464      =4  
 465      =4  #define LSB 1 ///< Index to least significant bit of a 2 byte word
 466      =4  #define MSB 0 ///< Index to most significant bit of a 2 byte word
 467      =4  
 468      =4  /// A union type to make it easier to access individual bytes of a 16-bit
 469      =4  /// word, and to use as signed or unsigned type.
 470      =4  typedef union SI_UU16
 471      =4  {
 472      =4    uint16_t u16;   ///< The two byte value as a 16-bit unsigned integer.
 473      =4    int16_t s16;    ///< The two byte value as a 16-bit signed integer.
 474      =4    uint8_t u8[2];  ///< The two byte value as two unsigned 8-bit integers.
 475      =4    int8_t s8[2];   ///< The two byte value as two signed 8-bit integers.
 476      =4  } SI_UU16_t;
 477      =4  
 478      =4  /// A union type to make it easier to access individual bytes within a
 479      =4  /// 32-bit word, or to access it as variations of 16-bit words, or to
 480      =4  /// use as signed or unsigned type.
 481      =4  typedef union SI_UU32
 482      =4  {
 483      =4    uint32_t u32;       ///< The 4-byte value as a 32-bit unsigned integer.
 484      =4    int32_t s32;        ///< The 4-byte value as a 32-bit signed integer.
 485      =4    SI_UU16_t uu16[2];  ///< The 4-byte value as a SI_UU16_t.
 486      =4    uint16_t u16[2];    ///< The 4-byte value as two unsigned 16-bit integers.
 487      =4    int16_t s16[2];     ///< The 4-byte value as two signed 16-bit integers.
 488      =4    uint8_t u8[4];      ///< The 4-byte value as 4 unsigned 8-bit integers.
 489      =4    int8_t s8[4];       ///< The 4-byte value as 4 signed 8-bit integers.
 490      =4  } SI_UU32_t;
 491      =4  
 492      =4  // Generic pointer memory segment constants.
 493      =4  #define SI_GPTR                   ///< Generic pointer indeterminate type.
 494      =4  #define SI_GPTR_MTYPE_DATA  0x00  ///< Generic pointer for DATA segment.
 495      =4  #define SI_GPTR_MTYPE_IDATA 0x00  ///< Generic pointer for IDATA segment.
 496      =4  #define SI_GPTR_MTYPE_BDATA 0x00  ///< Generic pointer for BDATA segment.
 497      =4  #define SI_GPTR_MTYPE_PDATA 0xFE  ///< Generic pointer for PDATA segment.
 498      =4  #define SI_GPTR_MTYPE_XDATA 0x01  ///< Generic pointer for XDATA segment.
 499      =4  #define SI_GPTR_MTYPE_CODE  0xFF  ///< Generic pointer for CODE segment.
 500      =4  
 501      =4  /// Generic pointer structure containing the type and address.
 502      =4  typedef struct
 503      =4  {
 504      =4    uint8_t memtype;    ///< The type of memory of the generic pointer.
 505      =4    SI_UU16_t address;  ///< The address of the generic pointer.
 506      =4  } GPTR_t;
 507      =4  
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 11  

 508      =4  /// A union type to allow access to the fields of a generic pointer.
 509      =4  /// A generic pointer has a field indicating the type of memory and an
 510      =4  /// address within the memory.
 511      =4  typedef union SI_GEN_PTR
 512      =4  {
 513      =4    uint8_t u8[3];    ///< 3-byte generic pointer as 3 unsigned 8-bit integers.
 514      =4    GPTR_t gptr;      ///< 3-byte generic pointer as pointer structure
 515      =4  } SI_GEN_PTR_t;
 516      =4  
 517      =4  // Declaration of Keil intrinisc
 518      =4  extern void _nop_(void);
 519      =4  /// Macro to insert a no-operation (NOP) instruction.
 520      =4  #define NOP() _nop_()
 521      =4  
 522      =4  // -------------------------------
 523      =4  // GCC for ARM Cortex-M
 524      =4  // Provides support for code that can be compiled for 8 or 32-bit
 525      =4  //
 526      =4  #elif defined (__GNUC__)
           =4 #if defined(__ARMEL__) && ((__ARMEL__ == 1) && ((__ARM_ARCH == 6) || (__ARM_ARCH == 7)))
           =4 
           =4 // these ignore any memory segment directives
           =4 #define SI_SEG_GENERIC
           =4 #define SI_SEG_DATA
           =4 #define SI_SEG_IDATA
           =4 #define SI_SEG_XDATA
           =4 #define SI_SEG_PDATA
           =4 #define SI_SEG_BDATA
           =4 #define SI_SEG_CODE
           =4 
           =4 // the following create a variable of the specified name but ignore the
           =4 // address and bit number.  If the using-code cares about the actual
           =4 // address or bit number, this probably will break it
           =4 #define SI_SBIT(name, address, bitnum) uint8_t name
           =4 #define SI_SFR(name, address) uint8_t name
           =4 #define SI_SFR16(name, address) uint16_t name
           =4 
           =4 // the following create function and variable names of the specified types
           =4 // but the 8051-specific aspects (like memory segment) are ignored
           =4 #define SI_INTERRUPT(name, vector) void name (void)
           =4 #define SI_INTERRUPT_USING(name, vector, regnum) void name (void)
           =4 #define SI_INTERRUPT_PROTO(name, vector) void name (void)
           =4 #define SI_INTERRUPT_PROTO_USING(name, vector, regnum) void name (void)
           =4 #define SI_FUNCTION_USING(name, return_value, parameter, regnum)              \
           =4              return_value name (parameter)
           =4 #define SI_FUNCTION_PROTO_USING(name, return_value, parameter, regnum)        \
           =4              return_value name (parameter)
           =4 #define SI_SEGMENT_VARIABLE(name, vartype, memseg) vartype name
           =4 #define SI_VARIABLE_SEGMENT_POINTER(name, vartype, targseg)                  \
           =4              vartype * name
           =4 #define SI_SEGMENT_VARIABLE_SEGMENT_POINTER(name, vartype, targseg, memseg)  \
           =4              vartype * name
           =4 #define SI_SEGMENT_POINTER(name, vartype, memseg) vartype * name
           =4 #define SI_LOCATED_VARIABLE_NO_INIT(name, vartype, memseg, address)          \
           =4              vartype name
           =4 
           =4 #define B0 0
           =4 #define B1 1
           =4 #define B2 2
           =4 #define B3 3
           =4 #define LSB 0
           =4 #define MSB 1
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 12  

           =4 typedef union SI_UU16
           =4 {
           =4   uint16_t u16;
           =4   int16_t s16;
           =4   uint8_t u8[2];
           =4   int8_t s8[2];
           =4 } SI_UU16_t;
           =4 
           =4 typedef union SI_UU32
           =4 {
           =4   uint32_t u32;
           =4   int32_t s32;
           =4   SI_UU16_t uu16[2];
           =4   uint16_t u16[2];
           =4   int16_t s16[2];
           =4   uint8_t u8[4];
           =4   int8_t s8[4];
           =4 } SI_UU32_t;
           =4 
           =4 // Generic pointer stuff is left out because if you are accessing
           =4 // generic pointer fields then it will need to be rewritten for 32-bit
           =4 
           =4 // __NOP should be declared in cmsis header core_cmInstr.h
           =4 extern void __NOP(void);
           =4 /// Macro to insert a no-operation (NOP) instruction.
           =4 #define NOP() __NOP()
           =4 
           =4 #else // ARM_ARCH 6 | 7
           =4 #error unsupported ARM arch
           =4 #endif
           =4 
           =4 #else // unknown toolchain
           =4 #error Unrecognized toolchain in si_toolchain.h
           =4 #endif
 604      =4  
 605      =4  /** @} */
 606      =4  
 607      =4  #endif
  21      =3  
  22      =3  //-----------------------------------------------------------------------------
  23      =3  // Register Definitions
  24      =3  //-----------------------------------------------------------------------------
  25      =3  SI_SFR (ACC,      0xE0); ///< Accumulator                           
  26      =3  SI_SFR (ADC0CF,   0xBC); ///< ADC0 Configuration                    
  27      =3  SI_SFR (ADC0CN0,  0xE8); ///< ADC0 Control                          
  28      =3  SI_SFR (ADC0GTH,  0xC4); ///< ADC0 Greater-Than High Byte           
  29      =3  SI_SFR (ADC0GTL,  0xC3); ///< ADC0 Greater-Than Low Byte            
  30      =3  SI_SFR (ADC0H,    0xBE); ///< ADC0 Data Word High Byte              
  31      =3  SI_SFR (ADC0L,    0xBD); ///< ADC0 Data Word Low Byte               
  32      =3  SI_SFR (ADC0LTH,  0xC6); ///< ADC0 Less-Than High Byte              
  33      =3  SI_SFR (ADC0LTL,  0xC5); ///< ADC0 Less-Than Low Byte               
  34      =3  SI_SFR (AMX0N,    0xBA); ///< AMUX0 Negative Multiplexer Selection  
  35      =3  SI_SFR (AMX0P,    0xBB); ///< AMUX0 Positive Multiplexer Selection  
  36      =3  SI_SFR (B,        0xF0); ///< B Register                            
  37      =3  SI_SFR (CKCON0,   0x8E); ///< Clock Control 0                       
  38      =3  SI_SFR (CKCON1,   0xE4); ///< Clock Control 1                       
  39      =3  SI_SFR (CLKSEL,   0xA9); ///< Clock Select                          
  40      =3  SI_SFR (CMP0CN0,  0x9B); ///< Comparator 0 Control 0                
  41      =3  SI_SFR (CMP0MD,   0x9D); ///< Comparator 0 Mode                     
  42      =3  SI_SFR (CMP0MX,   0x9F); ///< Comparator 0 Multiplexer Selection    
  43      =3  SI_SFR (CMP1CN0,  0x9A); ///< Comparator 1 Control 0                
  44      =3  SI_SFR (CMP1MD,   0x9C); ///< Comparator 1 Mode                     
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 13  

  45      =3  SI_SFR (CMP1MX,   0x9E); ///< Comparator 1 Multiplexer Selection    
  46      =3  SI_SFR (DPH,      0x83); ///< Data Pointer High                     
  47      =3  SI_SFR (DPL,      0x82); ///< Data Pointer Low                      
  48      =3  SI_SFR (EIE1,     0xE6); ///< Extended Interrupt Enable 1           
  49      =3  SI_SFR (EIE2,     0xE7); ///< Extended Interrupt Enable 2           
  50      =3  SI_SFR (EIP1,     0xF6); ///< Extended Interrupt Priority 1         
  51      =3  SI_SFR (EIP2,     0xF7); ///< Extended Interrupt Priority 2         
  52      =3  SI_SFR (EMI0CF,   0x85); ///< External Memory Configuration         
  53      =3  SI_SFR (EMI0CN,   0xAA); ///< External Memory Interface Control     
  54      =3  SI_SFR (EMI0TC,   0x84); ///< External Memory Timing Control        
  55      =3  SI_SFR (FLKEY,    0xB7); ///< Flash Lock and Key                    
  56      =3  SI_SFR (FLSCL,    0xB6); ///< Flash Scale                           
  57      =3  SI_SFR (HFO0CAL,  0xB3); ///< High Frequency Oscillator Calibration 
  58      =3  SI_SFR (HFO0CN,   0xB2); ///< High Frequency Oscillator Control     
  59      =3  SI_SFR (IE,       0xA8); ///< Interrupt Enable                      
  60      =3  SI_SFR (IP,       0xB8); ///< Interrupt Priority                    
  61      =3  SI_SFR (IT01CF,   0xE4); ///< INT0/INT1 Configuration               
  62      =3  SI_SFR (LFO0CN,   0x86); ///< Low Frequency Oscillator Control      
  63      =3  SI_SFR (P0,       0x80); ///< Port 0 Pin Latch                      
  64      =3  SI_SFR (P0MDIN,   0xF1); ///< Port 0 Input Mode                     
  65      =3  SI_SFR (P0MDOUT,  0xA4); ///< Port 0 Output Mode                    
  66      =3  SI_SFR (P0SKIP,   0xD4); ///< Port 0 Skip                           
  67      =3  SI_SFR (P1,       0x90); ///< Port 1 Pin Latch                      
  68      =3  SI_SFR (P1MDIN,   0xF2); ///< Port 1 Input Mode                     
  69      =3  SI_SFR (P1MDOUT,  0xA5); ///< Port 1 Output Mode                    
  70      =3  SI_SFR (P1SKIP,   0xD5); ///< Port 1 Skip                           
  71      =3  SI_SFR (P2,       0xA0); ///< Port 2 Pin Latch                      
  72      =3  SI_SFR (P2MDIN,   0xF3); ///< Port 2 Input Mode                     
  73      =3  SI_SFR (P2MDOUT,  0xA6); ///< Port 2 Output Mode                    
  74      =3  SI_SFR (P2SKIP,   0xD6); ///< Port 2 Skip                           
  75      =3  SI_SFR (P3,       0xB0); ///< Port 3 Pin Latch                      
  76      =3  SI_SFR (P3MDIN,   0xF4); ///< Port 3 Input Mode                     
  77      =3  SI_SFR (P3MDOUT,  0xA7); ///< Port 3 Output Mode                    
  78      =3  SI_SFR (P3SKIP,   0xDF); ///< Port 3 Skip                           
  79      =3  SI_SFR (P4,       0xC7); ///< Port 4 Pin Latch                      
  80      =3  SI_SFR (P4MDIN,   0xF5); ///< Port 4 Input Mode                     
  81      =3  SI_SFR (P4MDOUT,  0xAE); ///< Port 4 Output Mode                    
  82      =3  SI_SFR (PCA0CN0,  0xD8); ///< PCA Control 0                         
  83      =3  SI_SFR (PCA0CPH0, 0xFC); ///< PCA Channel 0 Capture Module High Byte
  84      =3  SI_SFR (PCA0CPH1, 0xEA); ///< PCA Channel 1 Capture Module High Byte
  85      =3  SI_SFR (PCA0CPH2, 0xEC); ///< PCA Channel 2 Capture Module High Byte
  86      =3  SI_SFR (PCA0CPH3, 0xEE); ///< PCA Channel 3 Capture Module High Byte
  87      =3  SI_SFR (PCA0CPH4, 0xFE); ///< PCA Channel 4 Capture Module High Byte
  88      =3  SI_SFR (PCA0CPL0, 0xFB); ///< PCA Channel 0 Capture Module Low Byte 
  89      =3  SI_SFR (PCA0CPL1, 0xE9); ///< PCA Channel 1 Capture Module Low Byte 
  90      =3  SI_SFR (PCA0CPL2, 0xEB); ///< PCA Channel 2 Capture Module Low Byte 
  91      =3  SI_SFR (PCA0CPL3, 0xED); ///< PCA Channel 3 Capture Module Low Byte 
  92      =3  SI_SFR (PCA0CPL4, 0xFD); ///< PCA Channel 4 Capture Module Low Byte 
  93      =3  SI_SFR (PCA0CPM0, 0xDA); ///< PCA Channel 0 Capture/Compare Mode    
  94      =3  SI_SFR (PCA0CPM1, 0xDB); ///< PCA Channel 1 Capture/Compare Mode    
  95      =3  SI_SFR (PCA0CPM2, 0xDC); ///< PCA Channel 2 Capture/Compare Mode    
  96      =3  SI_SFR (PCA0CPM3, 0xDD); ///< PCA Channel 3 Capture/Compare Mode    
  97      =3  SI_SFR (PCA0CPM4, 0xDE); ///< PCA Channel 4 Capture/Compare Mode    
  98      =3  SI_SFR (PCA0H,    0xFA); ///< PCA Counter/Timer High Byte           
  99      =3  SI_SFR (PCA0L,    0xF9); ///< PCA Counter/Timer Low Byte            
 100      =3  SI_SFR (PCA0MD,   0xD9); ///< PCA Mode                              
 101      =3  SI_SFR (PCON0,    0x87); ///< Power Control                         
 102      =3  SI_SFR (PFE0CN,   0xAF); ///< Prefetch Engine Control               
 103      =3  SI_SFR (PSCTL,    0x8F); ///< Program Store Control                 
 104      =3  SI_SFR (PSW,      0xD0); ///< Program Status Word                   
 105      =3  SI_SFR (REF0CN,   0xD1); ///< Voltage Reference Control             
 106      =3  SI_SFR (REG01CN,  0xC9); ///< Voltage Regulator Control             
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 14  

 107      =3  SI_SFR (RSTSRC,   0xEF); ///< Reset Source                          
 108      =3  SI_SFR (SBCON1,   0xAC); ///< UART1 Baud Rate Generator Control     
 109      =3  SI_SFR (SBRLH1,   0xB5); ///< UART1 Baud Rate Generator High Byte   
 110      =3  SI_SFR (SBRLL1,   0xB4); ///< UART1 Baud Rate Generator Low Byte    
 111      =3  SI_SFR (SBUF0,    0x99); ///< UART0 Serial Port Data Buffer         
 112      =3  SI_SFR (SBUF1,    0xD3); ///< UART1 Serial Port Data Buffer         
 113      =3  SI_SFR (SCON0,    0x98); ///< UART0 Serial Port Control             
 114      =3  SI_SFR (SCON1,    0xD2); ///< UART1 Serial Port Control             
 115      =3  SI_SFR (SFRPAGE,  0xBF); ///< SFR Page                              
 116      =3  SI_SFR (SMB0ADM,  0xCE); ///< SMBus 0 Slave Address Mask            
 117      =3  SI_SFR (SMB0ADR,  0xCF); ///< SMBus 0 Slave Address                 
 118      =3  SI_SFR (SMB0CF,   0xC1); ///< SMBus 0 Configuration                 
 119      =3  SI_SFR (SMB0CN0,  0xC0); ///< SMBus 0 Control                       
 120      =3  SI_SFR (SMB0DAT,  0xC2); ///< SMBus 0 Data                          
 121      =3  SI_SFR (SMB1ADM,  0xCE); ///< SMBus 1 Slave Address Mask            
 122      =3  SI_SFR (SMB1ADR,  0xCF); ///< SMBus 1 Slave Address                 
 123      =3  SI_SFR (SMB1CF,   0xC1); ///< SMBus 1 Configuration                 
 124      =3  SI_SFR (SMB1CN0,  0xC0); ///< SMBus 1 Control                       
 125      =3  SI_SFR (SMB1DAT,  0xC2); ///< SMBus 1 Data                          
 126      =3  SI_SFR (SMBTC,    0xB9); ///< SMBus Timing and Pin Control          
 127      =3  SI_SFR (SMOD1,    0xE5); ///< UART1 Mode                            
 128      =3  SI_SFR (SP,       0x81); ///< Stack Pointer                         
 129      =3  SI_SFR (SPI0CFG,  0xA1); ///< SPI0 Configuration                    
 130      =3  SI_SFR (SPI0CKR,  0xA2); ///< SPI0 Clock Rate                       
 131      =3  SI_SFR (SPI0CN0,  0xF8); ///< SPI0 Control                          
 132      =3  SI_SFR (SPI0DAT,  0xA3); ///< SPI0 Data                             
 133      =3  SI_SFR (TCON,     0x88); ///< Timer 0/1 Control                     
 134      =3  SI_SFR (TH0,      0x8C); ///< Timer 0 High Byte                     
 135      =3  SI_SFR (TH1,      0x8D); ///< Timer 1 High Byte                     
 136      =3  SI_SFR (TL0,      0x8A); ///< Timer 0 Low Byte                      
 137      =3  SI_SFR (TL1,      0x8B); ///< Timer 1 Low Byte                      
 138      =3  SI_SFR (TMOD,     0x89); ///< Timer 0/1 Mode                        
 139      =3  SI_SFR (TMR2CN0,  0xC8); ///< Timer 2 Control 0                     
 140      =3  SI_SFR (TMR2H,    0xCD); ///< Timer 2 High Byte                     
 141      =3  SI_SFR (TMR2L,    0xCC); ///< Timer 2 Low Byte                      
 142      =3  SI_SFR (TMR2RLH,  0xCB); ///< Timer 2 Reload High Byte              
 143      =3  SI_SFR (TMR2RLL,  0xCA); ///< Timer 2 Reload Low Byte               
 144      =3  SI_SFR (TMR3CN0,  0x91); ///< Timer 3 Control 0                     
 145      =3  SI_SFR (TMR3H,    0x95); ///< Timer 3 High Byte                     
 146      =3  SI_SFR (TMR3L,    0x94); ///< Timer 3 Low Byte                      
 147      =3  SI_SFR (TMR3RLH,  0x93); ///< Timer 3 Reload High Byte              
 148      =3  SI_SFR (TMR3RLL,  0x92); ///< Timer 3 Reload Low Byte               
 149      =3  SI_SFR (TMR4CN0,  0x91); ///< Timer 4 Control 0                     
 150      =3  SI_SFR (TMR4H,    0x95); ///< Timer 4 High Byte                     
 151      =3  SI_SFR (TMR4L,    0x94); ///< Timer 4 Low Byte                      
 152      =3  SI_SFR (TMR4RLH,  0x93); ///< Timer 4 Reload High Byte              
 153      =3  SI_SFR (TMR4RLL,  0x92); ///< Timer 4 Reload Low Byte               
 154      =3  SI_SFR (TMR5CN0,  0xC8); ///< Timer 5 Control 0                     
 155      =3  SI_SFR (TMR5H,    0xCD); ///< Timer 5 High Byte                     
 156      =3  SI_SFR (TMR5L,    0xCC); ///< Timer 5 Low Byte                      
 157      =3  SI_SFR (TMR5RLH,  0xCB); ///< Timer 5 Reload High Byte              
 158      =3  SI_SFR (TMR5RLL,  0xCA); ///< Timer 5 Reload Low Byte               
 159      =3  SI_SFR (USB0ADR,  0x96); ///< USB0 Indirect Address                 
 160      =3  SI_SFR (USB0DAT,  0x97); ///< USB0 Data                             
 161      =3  SI_SFR (USB0XCN,  0xD7); ///< USB0 Transceiver Control              
 162      =3  SI_SFR (VDM0CN,   0xFF); ///< Supply Monitor Control                
 163      =3  SI_SFR (XBR0,     0xE1); ///< Port I/O Crossbar 0                   
 164      =3  SI_SFR (XBR1,     0xE2); ///< Port I/O Crossbar 1                   
 165      =3  SI_SFR (XBR2,     0xE3); ///< Port I/O Crossbar 2                   
 166      =3  SI_SFR (XOSC0CN,  0xB1); ///< External Oscillator Control           
 167      =3  
 168      =3  //------------------------------------------------------------------------------
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 15  

 169      =3  // 16-bit Register Definitions (may not work on all compilers)
 170      =3  //------------------------------------------------------------------------------
 171      =3  SI_SFR16 (ADC0GT,  0xC3); ///< ADC0 Greater-Than            
 172      =3  SI_SFR16 (ADC0,    0xBD); ///< ADC0 Data Word               
 173      =3  SI_SFR16 (ADC0LT,  0xC5); ///< ADC0 Less-Than               
 174      =3  SI_SFR16 (DP,      0x82); ///< Data Pointer                 
 175      =3  SI_SFR16 (PCA0CP0, 0xFB); ///< PCA Channel 0 Capture Module 
 176      =3  SI_SFR16 (PCA0CP1, 0xE9); ///< PCA Channel 1 Capture Module 
 177      =3  SI_SFR16 (PCA0CP2, 0xEB); ///< PCA Channel 2 Capture Module 
 178      =3  SI_SFR16 (PCA0CP3, 0xED); ///< PCA Channel 3 Capture Module 
 179      =3  SI_SFR16 (PCA0CP4, 0xFD); ///< PCA Channel 4 Capture Module 
 180      =3  SI_SFR16 (PCA0,    0xF9); ///< PCA Counter/Timer            
 181      =3  SI_SFR16 (SBRL1,   0xB4); ///< UART1 Baud Rate Generator    
 182      =3  SI_SFR16 (TMR2,    0xCC); ///< Timer 2                      
 183      =3  SI_SFR16 (TMR2RL,  0xCA); ///< Timer 2 Reload               
 184      =3  SI_SFR16 (TMR3,    0x94); ///< Timer 3                      
 185      =3  SI_SFR16 (TMR3RL,  0x92); ///< Timer 3 Reload               
 186      =3  SI_SFR16 (TMR4,    0x94); ///< Timer 4                      
 187      =3  SI_SFR16 (TMR4RL,  0x92); ///< Timer 4 Reload               
 188      =3  SI_SFR16 (TMR5,    0xCC); ///< Timer 5                      
 189      =3  SI_SFR16 (TMR5RL,  0xCA); ///< Timer 5 Reload               
 190      =3  
 191      =3  //------------------------------------------------------------------------------
 192      =3  // Indirect Register Definitions
 193      =3  //------------------------------------------------------------------------------
 194      =3  #define CLKREC   0x0F ///< USB0 Clock Recovery Control       
 195      =3  #define CMIE     0x0B ///< USB0 Common Interrupt Enable      
 196      =3  #define CMINT    0x06 ///< USB0 Common Interrupt             
 197      =3  #define E0CNT    0x16 ///< USB0 Endpoint0 Data Count         
 198      =3  #define E0CSR    0x11 ///< USB0 Endpoint0 Control            
 199      =3  #define EENABLE  0x1E ///< USB0 Endpoint Enable              
 200      =3  #define EINCSRH  0x12 ///< USB0 IN Endpoint Control High     
 201      =3  #define EINCSRL  0x11 ///< USB0 IN Endpoint Control          
 202      =3  #define EOUTCNTH 0x17 ///< USB0 OUT Endpoint Count High      
 203      =3  #define EOUTCNTL 0x16 ///< USB0 OUT Endpoint Count           
 204      =3  #define EOUTCSRH 0x15 ///< USB0 OUT Endpoint Control High    
 205      =3  #define EOUTCSRL 0x14 ///< USB0 OUT Endpoint Control         
 206      =3  #define FADDR    0x00 ///< USB0 Function Address             
 207      =3  #define FIFO0    0x20 ///< USB0 Endpoint 0 FIFO Access       
 208      =3  #define FIFO1    0x21 ///< USB0 Endpoint 1 FIFO Access       
 209      =3  #define FIFO2    0x22 ///< USB0 Endpoint 2 FIFO Access       
 210      =3  #define FIFO3    0x23 ///< USB0 Endpoint 3 FIFO Access       
 211      =3  #define FRAMEH   0x0D ///< USB0 Frame Number High            
 212      =3  #define FRAMEL   0x0C ///< USB0 Frame Number                 
 213      =3  #define IN1IE    0x07 ///< USB0 IN Endpoint Interrupt Enable 
 214      =3  #define IN1INT   0x02 ///< USB0 IN Endpoint Interrupt        
 215      =3  #define INDEX    0x0E ///< USB0 Endpoint Index               
 216      =3  #define OUT1IE   0x09 ///< USB0 OUT Endpoint Interrupt Enable
 217      =3  #define OUT1INT  0x04 ///< USB0 OUT Endpoint Interrupt       
 218      =3  #define POWER    0x01 ///< USB0 Power                        
 219      =3  
 220      =3  //------------------------------------------------------------------------------
 221      =3  // Bit Definitions
 222      =3  //------------------------------------------------------------------------------
 223      =3  
 224      =3  // ACC (Accumulator)
 225      =3  #define SFR_ACC 0xE0
 226      =3  SI_SBIT (ACC_ACC0, SFR_ACC, 0); ///< Accumulator Bit 0
 227      =3  SI_SBIT (ACC_ACC1, SFR_ACC, 1); ///< Accumulator Bit 1
 228      =3  SI_SBIT (ACC_ACC2, SFR_ACC, 2); ///< Accumulator Bit 2
 229      =3  SI_SBIT (ACC_ACC3, SFR_ACC, 3); ///< Accumulator Bit 3
 230      =3  SI_SBIT (ACC_ACC4, SFR_ACC, 4); ///< Accumulator Bit 4
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 16  

 231      =3  SI_SBIT (ACC_ACC5, SFR_ACC, 5); ///< Accumulator Bit 5
 232      =3  SI_SBIT (ACC_ACC6, SFR_ACC, 6); ///< Accumulator Bit 6
 233      =3  SI_SBIT (ACC_ACC7, SFR_ACC, 7); ///< Accumulator Bit 7
 234      =3  
 235      =3  // ADC0CN0 (ADC0 Control)
 236      =3  #define SFR_ADC0CN0 0xE8
 237      =3  SI_SBIT (ADC0CN0_ADCM0,  SFR_ADC0CN0, 0); ///< Start of Conversion Mode Select Bit 0
 238      =3  SI_SBIT (ADC0CN0_ADCM1,  SFR_ADC0CN0, 1); ///< Start of Conversion Mode Select Bit 1
 239      =3  SI_SBIT (ADC0CN0_ADCM2,  SFR_ADC0CN0, 2); ///< Start of Conversion Mode Select Bit 2
 240      =3  SI_SBIT (ADC0CN0_ADWINT, SFR_ADC0CN0, 3); ///< Window Compare Interrupt Flag        
 241      =3  SI_SBIT (ADC0CN0_ADBUSY, SFR_ADC0CN0, 4); ///< ADC Busy                             
 242      =3  SI_SBIT (ADC0CN0_ADINT,  SFR_ADC0CN0, 5); ///< Conversion Complete Interrupt Flag   
 243      =3  SI_SBIT (ADC0CN0_ADTM,   SFR_ADC0CN0, 6); ///< Track Mode                           
 244      =3  SI_SBIT (ADC0CN0_ADEN,   SFR_ADC0CN0, 7); ///< ADC Enable                           
 245      =3  
 246      =3  // B (B Register)
 247      =3  #define SFR_B 0xF0
 248      =3  SI_SBIT (B_B0, SFR_B, 0); ///< B Register Bit 0
 249      =3  SI_SBIT (B_B1, SFR_B, 1); ///< B Register Bit 1
 250      =3  SI_SBIT (B_B2, SFR_B, 2); ///< B Register Bit 2
 251      =3  SI_SBIT (B_B3, SFR_B, 3); ///< B Register Bit 3
 252      =3  SI_SBIT (B_B4, SFR_B, 4); ///< B Register Bit 4
 253      =3  SI_SBIT (B_B5, SFR_B, 5); ///< B Register Bit 5
 254      =3  SI_SBIT (B_B6, SFR_B, 6); ///< B Register Bit 6
 255      =3  SI_SBIT (B_B7, SFR_B, 7); ///< B Register Bit 7
 256      =3  
 257      =3  // IE (Interrupt Enable)
 258      =3  #define SFR_IE 0xA8
 259      =3  SI_SBIT (IE_EX0,   SFR_IE, 0); ///< External Interrupt 0 Enable
 260      =3  SI_SBIT (IE_ET0,   SFR_IE, 1); ///< Timer 0 Interrupt Enable   
 261      =3  SI_SBIT (IE_EX1,   SFR_IE, 2); ///< External Interrupt 1 Enable
 262      =3  SI_SBIT (IE_ET1,   SFR_IE, 3); ///< Timer 1 Interrupt Enable   
 263      =3  SI_SBIT (IE_ES0,   SFR_IE, 4); ///< UART0 Interrupt Enable     
 264      =3  SI_SBIT (IE_ET2,   SFR_IE, 5); ///< Timer 2 Interrupt Enable   
 265      =3  SI_SBIT (IE_ESPI0, SFR_IE, 6); ///< SPI0 Interrupt Enable      
 266      =3  SI_SBIT (IE_EA,    SFR_IE, 7); ///< All Interrupts Enable      
 267      =3  
 268      =3  // IP (Interrupt Priority)
 269      =3  #define SFR_IP 0xB8
 270      =3  SI_SBIT (IP_PX0,   SFR_IP, 0); ///< External Interrupt 0 Priority Control                        
 271      =3  SI_SBIT (IP_PT0,   SFR_IP, 1); ///< Timer 0 Interrupt Priority Control                           
 272      =3  SI_SBIT (IP_PX1,   SFR_IP, 2); ///< External Interrupt 1 Priority Control                        
 273      =3  SI_SBIT (IP_PT1,   SFR_IP, 3); ///< Timer 1 Interrupt Priority Control                           
 274      =3  SI_SBIT (IP_PS0,   SFR_IP, 4); ///< UART0 Interrupt Priority Control                             
 275      =3  SI_SBIT (IP_PT2,   SFR_IP, 5); ///< Timer 2 Interrupt Priority Control                           
 276      =3  SI_SBIT (IP_PSPI0, SFR_IP, 6); ///< Serial Peripheral Interface (SPI0) Interrupt Priority Control
 277      =3  
 278      =3  // P0 (Port 0 Pin Latch)
 279      =3  #define SFR_P0 0x80
 280      =3  SI_SBIT (P0_B0, SFR_P0, 0); ///< Port 0 Bit 0 Latch
 281      =3  SI_SBIT (P0_B1, SFR_P0, 1); ///< Port 0 Bit 1 Latch
 282      =3  SI_SBIT (P0_B2, SFR_P0, 2); ///< Port 0 Bit 2 Latch
 283      =3  SI_SBIT (P0_B3, SFR_P0, 3); ///< Port 0 Bit 3 Latch
 284      =3  SI_SBIT (P0_B4, SFR_P0, 4); ///< Port 0 Bit 4 Latch
 285      =3  SI_SBIT (P0_B5, SFR_P0, 5); ///< Port 0 Bit 5 Latch
 286      =3  SI_SBIT (P0_B6, SFR_P0, 6); ///< Port 0 Bit 6 Latch
 287      =3  SI_SBIT (P0_B7, SFR_P0, 7); ///< Port 0 Bit 7 Latch
 288      =3  
 289      =3  // P1 (Port 1 Pin Latch)
 290      =3  #define SFR_P1 0x90
 291      =3  SI_SBIT (P1_B0, SFR_P1, 0); ///< Port 1 Bit 0 Latch
 292      =3  SI_SBIT (P1_B1, SFR_P1, 1); ///< Port 1 Bit 1 Latch
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 17  

 293      =3  SI_SBIT (P1_B2, SFR_P1, 2); ///< Port 1 Bit 2 Latch
 294      =3  SI_SBIT (P1_B3, SFR_P1, 3); ///< Port 1 Bit 3 Latch
 295      =3  SI_SBIT (P1_B4, SFR_P1, 4); ///< Port 1 Bit 4 Latch
 296      =3  SI_SBIT (P1_B5, SFR_P1, 5); ///< Port 1 Bit 5 Latch
 297      =3  SI_SBIT (P1_B6, SFR_P1, 6); ///< Port 1 Bit 6 Latch
 298      =3  SI_SBIT (P1_B7, SFR_P1, 7); ///< Port 1 Bit 7 Latch
 299      =3  
 300      =3  // P2 (Port 2 Pin Latch)
 301      =3  #define SFR_P2 0xA0
 302      =3  SI_SBIT (P2_B0, SFR_P2, 0); ///< Port 2 Bit 0 Latch
 303      =3  SI_SBIT (P2_B1, SFR_P2, 1); ///< Port 2 Bit 1 Latch
 304      =3  SI_SBIT (P2_B2, SFR_P2, 2); ///< Port 2 Bit 2 Latch
 305      =3  SI_SBIT (P2_B3, SFR_P2, 3); ///< Port 2 Bit 3 Latch
 306      =3  SI_SBIT (P2_B4, SFR_P2, 4); ///< Port 2 Bit 4 Latch
 307      =3  SI_SBIT (P2_B5, SFR_P2, 5); ///< Port 2 Bit 5 Latch
 308      =3  SI_SBIT (P2_B6, SFR_P2, 6); ///< Port 2 Bit 6 Latch
 309      =3  SI_SBIT (P2_B7, SFR_P2, 7); ///< Port 2 Bit 7 Latch
 310      =3  
 311      =3  // P3 (Port 3 Pin Latch)
 312      =3  #define SFR_P3 0xB0
 313      =3  SI_SBIT (P3_B0, SFR_P3, 0); ///< Port 3 Bit 0 Latch
 314      =3  SI_SBIT (P3_B1, SFR_P3, 1); ///< Port 3 Bit 1 Latch
 315      =3  SI_SBIT (P3_B2, SFR_P3, 2); ///< Port 3 Bit 2 Latch
 316      =3  SI_SBIT (P3_B3, SFR_P3, 3); ///< Port 3 Bit 3 Latch
 317      =3  SI_SBIT (P3_B4, SFR_P3, 4); ///< Port 3 Bit 4 Latch
 318      =3  SI_SBIT (P3_B5, SFR_P3, 5); ///< Port 3 Bit 5 Latch
 319      =3  SI_SBIT (P3_B6, SFR_P3, 6); ///< Port 3 Bit 6 Latch
 320      =3  SI_SBIT (P3_B7, SFR_P3, 7); ///< Port 3 Bit 7 Latch
 321      =3  
 322      =3  // PCA0CN0 (PCA Control 0)
 323      =3  #define SFR_PCA0CN0 0xD8
 324      =3  SI_SBIT (PCA0CN0_CCF0, SFR_PCA0CN0, 0); ///< PCA Module 0 Capture/Compare Flag
 325      =3  SI_SBIT (PCA0CN0_CCF1, SFR_PCA0CN0, 1); ///< PCA Module 1 Capture/Compare Flag
 326      =3  SI_SBIT (PCA0CN0_CCF2, SFR_PCA0CN0, 2); ///< PCA Module 2 Capture/Compare Flag
 327      =3  SI_SBIT (PCA0CN0_CCF3, SFR_PCA0CN0, 3); ///< PCA Module 3 Capture/Compare Flag
 328      =3  SI_SBIT (PCA0CN0_CCF4, SFR_PCA0CN0, 4); ///< PCA Module 4 Capture/Compare Flag
 329      =3  SI_SBIT (PCA0CN0_CR,   SFR_PCA0CN0, 6); ///< PCA Counter/Timer Run Control    
 330      =3  SI_SBIT (PCA0CN0_CF,   SFR_PCA0CN0, 7); ///< PCA Counter/Timer Overflow Flag  
 331      =3  
 332      =3  // PSW (Program Status Word)
 333      =3  #define SFR_PSW 0xD0
 334      =3  SI_SBIT (PSW_PARITY, SFR_PSW, 0); ///< Parity Flag               
 335      =3  SI_SBIT (PSW_F1,     SFR_PSW, 1); ///< User Flag 1               
 336      =3  SI_SBIT (PSW_OV,     SFR_PSW, 2); ///< Overflow Flag             
 337      =3  SI_SBIT (PSW_RS0,    SFR_PSW, 3); ///< Register Bank Select Bit 0
 338      =3  SI_SBIT (PSW_RS1,    SFR_PSW, 4); ///< Register Bank Select Bit 1
 339      =3  SI_SBIT (PSW_F0,     SFR_PSW, 5); ///< User Flag 0               
 340      =3  SI_SBIT (PSW_AC,     SFR_PSW, 6); ///< Auxiliary Carry Flag      
 341      =3  SI_SBIT (PSW_CY,     SFR_PSW, 7); ///< Carry Flag                
 342      =3  
 343      =3  // SCON0 (UART0 Serial Port Control)
 344      =3  #define SFR_SCON0 0x98
 345      =3  SI_SBIT (SCON0_RI,    SFR_SCON0, 0); ///< Receive Interrupt Flag             
 346      =3  SI_SBIT (SCON0_TI,    SFR_SCON0, 1); ///< Transmit Interrupt Flag            
 347      =3  SI_SBIT (SCON0_RB8,   SFR_SCON0, 2); ///< Ninth Receive Bit                  
 348      =3  SI_SBIT (SCON0_TB8,   SFR_SCON0, 3); ///< Ninth Transmission Bit             
 349      =3  SI_SBIT (SCON0_REN,   SFR_SCON0, 4); ///< Receive Enable                     
 350      =3  SI_SBIT (SCON0_MCE,   SFR_SCON0, 5); ///< Multiprocessor Communication Enable
 351      =3  SI_SBIT (SCON0_SMODE, SFR_SCON0, 7); ///< Serial Port 0 Operation Mode       
 352      =3  
 353      =3  // SMB0CN0 (SMBus 0 Control)
 354      =3  #define SFR_SMB0CN0 0xC0
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 18  

 355      =3  SI_SBIT (SMB0CN0_SI,      SFR_SMB0CN0, 0); ///< SMBus Interrupt Flag            
 356      =3  SI_SBIT (SMB0CN0_ACK,     SFR_SMB0CN0, 1); ///< SMBus Acknowledge               
 357      =3  SI_SBIT (SMB0CN0_ARBLOST, SFR_SMB0CN0, 2); ///< SMBus Arbitration Lost Indicator
 358      =3  SI_SBIT (SMB0CN0_ACKRQ,   SFR_SMB0CN0, 3); ///< SMBus Acknowledge Request       
 359      =3  SI_SBIT (SMB0CN0_STO,     SFR_SMB0CN0, 4); ///< SMBus Stop Flag                 
 360      =3  SI_SBIT (SMB0CN0_STA,     SFR_SMB0CN0, 5); ///< SMBus Start Flag                
 361      =3  SI_SBIT (SMB0CN0_TXMODE,  SFR_SMB0CN0, 6); ///< SMBus Transmit Mode Indicator   
 362      =3  SI_SBIT (SMB0CN0_MASTER,  SFR_SMB0CN0, 7); ///< SMBus Master/Slave Indicator    
 363      =3  
 364      =3  // SMB1CN0 (SMBus 1 Control)
 365      =3  #define SFR_SMB1CN0 0xC0
 366      =3  SI_SBIT (SMB1CN0_SI,      SFR_SMB1CN0, 0); ///< SMBus Interrupt Flag            
 367      =3  SI_SBIT (SMB1CN0_ACK,     SFR_SMB1CN0, 1); ///< SMBus Acknowledge               
 368      =3  SI_SBIT (SMB1CN0_ARBLOST, SFR_SMB1CN0, 2); ///< SMBus Arbitration Lost Indicator
 369      =3  SI_SBIT (SMB1CN0_ACKRQ,   SFR_SMB1CN0, 3); ///< SMBus Acknowledge Request       
 370      =3  SI_SBIT (SMB1CN0_STO,     SFR_SMB1CN0, 4); ///< SMBus Stop Flag                 
 371      =3  SI_SBIT (SMB1CN0_STA,     SFR_SMB1CN0, 5); ///< SMBus Start Flag                
 372      =3  SI_SBIT (SMB1CN0_TXMODE,  SFR_SMB1CN0, 6); ///< SMBus Transmit Mode Indicator   
 373      =3  SI_SBIT (SMB1CN0_MASTER,  SFR_SMB1CN0, 7); ///< SMBus Master/Slave Indicator    
 374      =3  
 375      =3  // SPI0CN0 (SPI0 Control)
 376      =3  #define SFR_SPI0CN0 0xF8
 377      =3  SI_SBIT (SPI0CN0_SPIEN,  SFR_SPI0CN0, 0); ///< SPI0 Enable            
 378      =3  SI_SBIT (SPI0CN0_TXBMT,  SFR_SPI0CN0, 1); ///< Transmit Buffer Empty  
 379      =3  SI_SBIT (SPI0CN0_NSSMD0, SFR_SPI0CN0, 2); ///< Slave Select Mode Bit 0
 380      =3  SI_SBIT (SPI0CN0_NSSMD1, SFR_SPI0CN0, 3); ///< Slave Select Mode Bit 1
 381      =3  SI_SBIT (SPI0CN0_RXOVRN, SFR_SPI0CN0, 4); ///< Receive Overrun Flag   
 382      =3  SI_SBIT (SPI0CN0_MODF,   SFR_SPI0CN0, 5); ///< Mode Fault Flag        
 383      =3  SI_SBIT (SPI0CN0_WCOL,   SFR_SPI0CN0, 6); ///< Write Collision Flag   
 384      =3  SI_SBIT (SPI0CN0_SPIF,   SFR_SPI0CN0, 7); ///< SPI0 Interrupt Flag    
 385      =3  
 386      =3  // TCON (Timer 0/1 Control)
 387      =3  #define SFR_TCON 0x88
 388      =3  SI_SBIT (TCON_IT0, SFR_TCON, 0); ///< Interrupt 0 Type Select
 389      =3  SI_SBIT (TCON_IE0, SFR_TCON, 1); ///< External Interrupt 0   
 390      =3  SI_SBIT (TCON_IT1, SFR_TCON, 2); ///< Interrupt 1 Type Select
 391      =3  SI_SBIT (TCON_IE1, SFR_TCON, 3); ///< External Interrupt 1   
 392      =3  SI_SBIT (TCON_TR0, SFR_TCON, 4); ///< Timer 0 Run Control    
 393      =3  SI_SBIT (TCON_TF0, SFR_TCON, 5); ///< Timer 0 Overflow Flag  
 394      =3  SI_SBIT (TCON_TR1, SFR_TCON, 6); ///< Timer 1 Run Control    
 395      =3  SI_SBIT (TCON_TF1, SFR_TCON, 7); ///< Timer 1 Overflow Flag  
 396      =3  
 397      =3  // TMR2CN0 (Timer 2 Control 0)
 398      =3  #define SFR_TMR2CN0 0xC8
 399      =3  SI_SBIT (TMR2CN0_T2XCLK,  SFR_TMR2CN0, 0); ///< Timer 2 External Clock Select    
 400      =3  SI_SBIT (TMR2CN0_T2CSS,   SFR_TMR2CN0, 1); ///< Timer 2 Capture Source Select    
 401      =3  SI_SBIT (TMR2CN0_TR2,     SFR_TMR2CN0, 2); ///< Timer 2 Run Control              
 402      =3  SI_SBIT (TMR2CN0_T2SPLIT, SFR_TMR2CN0, 3); ///< Timer 2 Split Mode Enable        
 403      =3  SI_SBIT (TMR2CN0_TF2CEN,  SFR_TMR2CN0, 4); ///< Timer 2 Capture Enable           
 404      =3  SI_SBIT (TMR2CN0_TF2LEN,  SFR_TMR2CN0, 5); ///< Timer 2 Low Byte Interrupt Enable
 405      =3  SI_SBIT (TMR2CN0_TF2L,    SFR_TMR2CN0, 6); ///< Timer 2 Low Byte Overflow Flag   
 406      =3  SI_SBIT (TMR2CN0_TF2H,    SFR_TMR2CN0, 7); ///< Timer 2 High Byte Overflow Flag  
 407      =3  
 408      =3  // TMR5CN0 (Timer 5 Control 0)
 409      =3  #define SFR_TMR5CN0 0xC8
 410      =3  SI_SBIT (TMR5CN0_T5XCLK,  SFR_TMR5CN0, 0); ///< Timer 5 External Clock Select    
 411      =3  SI_SBIT (TMR5CN0_TR5,     SFR_TMR5CN0, 2); ///< Timer 5 Run Control              
 412      =3  SI_SBIT (TMR5CN0_T5SPLIT, SFR_TMR5CN0, 3); ///< Timer 5 Split Mode Enable        
 413      =3  SI_SBIT (TMR5CN0_TF5LEN,  SFR_TMR5CN0, 5); ///< Timer 5 Low Byte Interrupt Enable
 414      =3  SI_SBIT (TMR5CN0_TF5L,    SFR_TMR5CN0, 6); ///< Timer 5 Low Byte Overflow Flag   
 415      =3  SI_SBIT (TMR5CN0_TF5H,    SFR_TMR5CN0, 7); ///< Timer 5 High Byte Overflow Flag  
 416      =3  
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 19  

 417      =3  //------------------------------------------------------------------------------
 418      =3  // Interrupt Definitions
 419      =3  //------------------------------------------------------------------------------
 420      =3  #define INT0_IRQn    0  ///< External Interrupt 0  
 421      =3  #define TIMER0_IRQn  1  ///< Timer 0 Overflow      
 422      =3  #define INT1_IRQn    2  ///< External Interrupt 1  
 423      =3  #define TIMER1_IRQn  3  ///< Timer 1 Overflow      
 424      =3  #define UART0_IRQn   4  ///< UART 0                
 425      =3  #define TIMER2_IRQn  5  ///< Timer 2 Overflow      
 426      =3  #define SPI0_IRQn    6  ///< SPI0                  
 427      =3  #define SMBUS0_IRQn  7  ///< SMBus 0               
 428      =3  #define USB0_IRQn    8  ///< USB0                  
 429      =3  #define ADC0WC_IRQn  9  ///< ADC0 Window Compare   
 430      =3  #define ADC0EOC_IRQn 10 ///< ADC0 End of Conversion
 431      =3  #define PCA0_IRQn    11 ///< PCA0                  
 432      =3  #define CMP0_IRQn    12 ///< Comparator 0          
 433      =3  #define CMP1_IRQn    13 ///< Comparator 1          
 434      =3  #define TIMER3_IRQn  14 ///< Timer 3 Overflow      
 435      =3  #define VBUSLVL_IRQn 15 ///< VBUS Level            
 436      =3  #define UART1_IRQn   16 ///< UART 1                
 437      =3  #define SMBUS1_IRQn  18 ///< SMBus 1               
 438      =3  #define TIMER4_IRQn  19 ///< Timer 4 Overflow      
 439      =3  #define TIMER5_IRQn  20 ///< Timer 5 Overflow      
 440      =3  
 441      =3  //------------------------------------------------------------------------------
 442      =3  // SFR Page Definitions
 443      =3  //------------------------------------------------------------------------------
 444      =3  #define LEGACY_PAGE 0x00 ///< Legacy SFR Page                   
 445      =3  #define CONFIG_PAGE 0x0F ///< System and Port Configuration Page
 446      =3  #define SMB1_PAGE   0x0F ///< SMBus 1 Page                      
 447      =3  
 448      =3  //-----------------------------------------------------------------------------
 449      =3  // SDCC PDATA External Memory Paging Support
 450      =3  //-----------------------------------------------------------------------------
 451      =3  
 452      =3  #if defined SDCC
           =3 
           =3 SI_SFR(_XPAGE, 0xAA); // Point to the EMI0CN register
           =3 
           =3 #endif
 457      =3  
 458      =3  #endif // SI_EFM8UB2_DEFS_H
 459      =3  //-eof--------------------------------------------------------------------------
 460      =3  
  22      =2  //------------------------------------------------------------------------------
  23      =2  // ADC0CF Enums (ADC0 Configuration @ 0xBC)
  24      =2  //------------------------------------------------------------------------------
  25      =2  #define ADC0CF_ADLJST__BMASK           0x04 ///< ADC0 Left Justify Select                   
  26      =2  #define ADC0CF_ADLJST__SHIFT           0x02 ///< ADC0 Left Justify Select                   
  27      =2  #define ADC0CF_ADLJST__RIGHT_JUSTIFIED 0x00 ///< Data in the ADC0H:ADC0L registers is right-
  28      =2                                              ///< justified.                                 
  29      =2  #define ADC0CF_ADLJST__LEFT_JUSTIFIED  0x04 ///< Data in the ADC0H:ADC0L registers is left- 
  30      =2                                              ///< justified.                                 
  31      =2                                                                                              
  32      =2  #define ADC0CF_ADSC__FMASK             0xF8 ///< SAR Clock Divider                          
  33      =2  #define ADC0CF_ADSC__SHIFT             0x03 ///< SAR Clock Divider                          
  34      =2                                                                                              
  35      =2  //------------------------------------------------------------------------------
  36      =2  // ADC0CN0 Enums (ADC0 Control @ 0xE8)
  37      =2  //------------------------------------------------------------------------------
  38      =2  #define ADC0CN0_ADCM__FMASK         0x07 ///< Start of Conversion Mode Select                   
  39      =2  #define ADC0CN0_ADCM__SHIFT         0x00 ///< Start of Conversion Mode Select                   
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 20  

  40      =2  #define ADC0CN0_ADCM__ADBUSY        0x00 ///< ADC0 conversion initiated on write of 1 to ADBUSY.
  41      =2  #define ADC0CN0_ADCM__TIMER0        0x01 ///< ADC0 conversion initiated on overflow of Timer 0. 
  42      =2  #define ADC0CN0_ADCM__TIMER2        0x02 ///< ADC0 conversion initiated on overflow of Timer 2. 
  43      =2  #define ADC0CN0_ADCM__TIMER1        0x03 ///< ADC0 conversion initiated on overflow of Timer 1. 
  44      =2  #define ADC0CN0_ADCM__CNVSTR        0x04 ///< ADC0 conversion initiated on rising edge of       
  45      =2                                           ///< CNVSTR.                                           
  46      =2  #define ADC0CN0_ADCM__TIMER3        0x05 ///< ADC0 conversion initiated on overflow of Timer 3. 
  47      =2  #define ADC0CN0_ADCM__TIMER4        0x06 ///< ADC0 conversion initiated on overflow of Timer 4. 
  48      =2  #define ADC0CN0_ADCM__TIMER5        0x07 ///< ADC0 conversion initiated on overflow of Timer 5. 
  49      =2                                                                                                  
  50      =2  #define ADC0CN0_ADWINT__BMASK       0x08 ///< Window Compare Interrupt Flag                     
  51      =2  #define ADC0CN0_ADWINT__SHIFT       0x03 ///< Window Compare Interrupt Flag                     
  52      =2  #define ADC0CN0_ADWINT__NOT_SET     0x00 ///< An ADC window compare event did not occur.        
  53      =2  #define ADC0CN0_ADWINT__SET         0x08 ///< An ADC window compare event occurred.             
  54      =2                                                                                                  
  55      =2  #define ADC0CN0_ADBUSY__BMASK       0x10 ///< ADC Busy                                          
  56      =2  #define ADC0CN0_ADBUSY__SHIFT       0x04 ///< ADC Busy                                          
  57      =2  #define ADC0CN0_ADBUSY__NOT_SET     0x00 ///< An ADC0 conversion is not currently in progress.  
  58      =2  #define ADC0CN0_ADBUSY__SET         0x10 ///< ADC0 conversion is in progress or start an ADC0   
  59      =2                                           ///< conversion.                                       
  60      =2                                                                                                  
  61      =2  #define ADC0CN0_ADINT__BMASK        0x20 ///< Conversion Complete Interrupt Flag                
  62      =2  #define ADC0CN0_ADINT__SHIFT        0x05 ///< Conversion Complete Interrupt Flag                
  63      =2  #define ADC0CN0_ADINT__NOT_SET      0x00 ///< ADC0 has not completed a conversion since the last
  64      =2                                           ///< time ADINT was cleared.                           
  65      =2  #define ADC0CN0_ADINT__SET          0x20 ///< ADC0 completed a data conversion.                 
  66      =2                                                                                                  
  67      =2  #define ADC0CN0_ADTM__BMASK         0x40 ///< Track Mode                                        
  68      =2  #define ADC0CN0_ADTM__SHIFT         0x06 ///< Track Mode                                        
  69      =2  #define ADC0CN0_ADTM__TRACK_NORMAL  0x00 ///< Normal Track Mode. When ADC0 is enabled,          
  70      =2                                           ///< conversion begins immediately following the start-
  71      =2                                           ///< of-conversion signal.                             
  72      =2  #define ADC0CN0_ADTM__TRACK_DELAYED 0x40 ///< Delayed Track Mode. When ADC0 is enabled,         
  73      =2                                           ///< conversion begins 3 SAR clock cycles following the
  74      =2                                           ///< start-of-conversion signal. The ADC is allowed to 
  75      =2                                           ///< track during this time. Note that there is not a  
  76      =2                                           ///< tracking delay when the external conversion start 
  77      =2                                           ///< (CNVSTR) is used as the start-of-conversion       
  78      =2                                           ///< source.                                           
  79      =2                                                                                                  
  80      =2  #define ADC0CN0_ADEN__BMASK         0x80 ///< ADC Enable                                        
  81      =2  #define ADC0CN0_ADEN__SHIFT         0x07 ///< ADC Enable                                        
  82      =2  #define ADC0CN0_ADEN__DISABLED      0x00 ///< ADC0 Disabled (low-power shutdown).               
  83      =2  #define ADC0CN0_ADEN__ENABLED       0x80 ///< ADC0 Enabled (active and ready for data           
  84      =2                                           ///< conversions).                                     
  85      =2                                                                                                  
  86      =2  //------------------------------------------------------------------------------
  87      =2  // ADC0GTH Enums (ADC0 Greater-Than High Byte @ 0xC4)
  88      =2  //------------------------------------------------------------------------------
  89      =2  #define ADC0GTH_ADC0GTH__FMASK 0xFF ///< Greater-Than High Byte
  90      =2  #define ADC0GTH_ADC0GTH__SHIFT 0x00 ///< Greater-Than High Byte
  91      =2                                                                 
  92      =2  //------------------------------------------------------------------------------
  93      =2  // ADC0GTL Enums (ADC0 Greater-Than Low Byte @ 0xC3)
  94      =2  //------------------------------------------------------------------------------
  95      =2  #define ADC0GTL_ADC0GTL__FMASK 0xFF ///< Greater-Than Low Byte
  96      =2  #define ADC0GTL_ADC0GTL__SHIFT 0x00 ///< Greater-Than Low Byte
  97      =2                                                                
  98      =2  //------------------------------------------------------------------------------
  99      =2  // ADC0H Enums (ADC0 Data Word High Byte @ 0xBE)
 100      =2  //------------------------------------------------------------------------------
 101      =2  #define ADC0H_ADC0H__FMASK 0xFF ///< Data Word High Byte
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 21  

 102      =2  #define ADC0H_ADC0H__SHIFT 0x00 ///< Data Word High Byte
 103      =2                                                          
 104      =2  //------------------------------------------------------------------------------
 105      =2  // ADC0L Enums (ADC0 Data Word Low Byte @ 0xBD)
 106      =2  //------------------------------------------------------------------------------
 107      =2  #define ADC0L_ADC0L__FMASK 0xFF ///< Data Word Low Byte
 108      =2  #define ADC0L_ADC0L__SHIFT 0x00 ///< Data Word Low Byte
 109      =2                                                         
 110      =2  //------------------------------------------------------------------------------
 111      =2  // ADC0LTH Enums (ADC0 Less-Than High Byte @ 0xC6)
 112      =2  //------------------------------------------------------------------------------
 113      =2  #define ADC0LTH_ADC0LTH__FMASK 0xFF ///< Less-Than High Byte
 114      =2  #define ADC0LTH_ADC0LTH__SHIFT 0x00 ///< Less-Than High Byte
 115      =2                                                              
 116      =2  //------------------------------------------------------------------------------
 117      =2  // ADC0LTL Enums (ADC0 Less-Than Low Byte @ 0xC5)
 118      =2  //------------------------------------------------------------------------------
 119      =2  #define ADC0LTL_ADC0LTL__FMASK 0xFF ///< Less-Than Low Byte
 120      =2  #define ADC0LTL_ADC0LTL__SHIFT 0x00 ///< Less-Than Low Byte
 121      =2                                                             
 122      =2  //------------------------------------------------------------------------------
 123      =2  // AMX0N Enums (AMUX0 Negative Multiplexer Selection @ 0xBA)
 124      =2  //------------------------------------------------------------------------------
 125      =2  #define AMX0N_AMX0N__FMASK   0x3F ///< AMUX0 Negative Input Selection
 126      =2  #define AMX0N_AMX0N__SHIFT   0x00 ///< AMUX0 Negative Input Selection
 127      =2  #define AMX0N_AMX0N__ADC0N0  0x00 ///< Select ADC0N.0.               
 128      =2  #define AMX0N_AMX0N__ADC0N1  0x01 ///< Select ADC0N.1.               
 129      =2  #define AMX0N_AMX0N__ADC0N2  0x02 ///< Select ADC0N.2.               
 130      =2  #define AMX0N_AMX0N__ADC0N3  0x03 ///< Select ADC0N.3.               
 131      =2  #define AMX0N_AMX0N__ADC0N4  0x04 ///< Select ADC0N.4.               
 132      =2  #define AMX0N_AMX0N__ADC0N5  0x05 ///< Select ADC0N.5.               
 133      =2  #define AMX0N_AMX0N__ADC0N6  0x06 ///< Select ADC0N.6.               
 134      =2  #define AMX0N_AMX0N__ADC0N7  0x07 ///< Select ADC0N.7.               
 135      =2  #define AMX0N_AMX0N__ADC0N8  0x08 ///< Select ADC0N.8.               
 136      =2  #define AMX0N_AMX0N__ADC0N9  0x09 ///< Select ADC0N.9.               
 137      =2  #define AMX0N_AMX0N__ADC0N10 0x0A ///< Select ADC0N.10.              
 138      =2  #define AMX0N_AMX0N__ADC0N11 0x0B ///< Select ADC0N.11.              
 139      =2  #define AMX0N_AMX0N__ADC0N12 0x0C ///< Select ADC0N.12.              
 140      =2  #define AMX0N_AMX0N__ADC0N13 0x0D ///< Select ADC0N.13.              
 141      =2  #define AMX0N_AMX0N__ADC0N14 0x0E ///< Select ADC0N.14.              
 142      =2  #define AMX0N_AMX0N__ADC0N15 0x0F ///< Select ADC0N.15.              
 143      =2  #define AMX0N_AMX0N__ADC0N16 0x10 ///< Select ADC0N.16.              
 144      =2  #define AMX0N_AMX0N__ADC0N17 0x11 ///< Select ADC0N.17.              
 145      =2  #define AMX0N_AMX0N__ADC0N18 0x12 ///< Select ADC0N.18.              
 146      =2  #define AMX0N_AMX0N__ADC0N19 0x13 ///< Select ADC0N.19.              
 147      =2  #define AMX0N_AMX0N__ADC0N20 0x14 ///< Select ADC0N.20.              
 148      =2  #define AMX0N_AMX0N__ADC0N21 0x15 ///< Select ADC0N.21.              
 149      =2  #define AMX0N_AMX0N__ADC0N22 0x16 ///< Select ADC0N.22.              
 150      =2  #define AMX0N_AMX0N__ADC0N23 0x17 ///< Select ADC0N.23.              
 151      =2  #define AMX0N_AMX0N__ADC0N24 0x18 ///< Select ADC0N.24.              
 152      =2  #define AMX0N_AMX0N__ADC0N25 0x19 ///< Select ADC0N.25.              
 153      =2  #define AMX0N_AMX0N__ADC0N26 0x1A ///< Select ADC0N.26.              
 154      =2  #define AMX0N_AMX0N__ADC0N27 0x1B ///< Select ADC0N.27.              
 155      =2  #define AMX0N_AMX0N__ADC0N28 0x1C ///< Select ADC0N.28.              
 156      =2  #define AMX0N_AMX0N__ADC0N29 0x1D ///< Select ADC0N.29.              
 157      =2  #define AMX0N_AMX0N__VREF    0x1E ///< Internal Voltage Reference.   
 158      =2  #define AMX0N_AMX0N__GND     0x1F ///< Ground (single-ended mode).   
 159      =2  #define AMX0N_AMX0N__ADC0N32 0x20 ///< Select ADC0N.32.              
 160      =2  #define AMX0N_AMX0N__ADC0N33 0x21 ///< Select ADC0N.33.              
 161      =2  #define AMX0N_AMX0N__ADC0N34 0x22 ///< Select ADC0N.34.              
 162      =2                                                                       
 163      =2  //------------------------------------------------------------------------------
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 22  

 164      =2  // AMX0P Enums (AMUX0 Positive Multiplexer Selection @ 0xBB)
 165      =2  //------------------------------------------------------------------------------
 166      =2  #define AMX0P_AMX0P__FMASK   0x3F ///< AMUX0 Positive Input Selection
 167      =2  #define AMX0P_AMX0P__SHIFT   0x00 ///< AMUX0 Positive Input Selection
 168      =2  #define AMX0P_AMX0P__ADC0P0  0x00 ///< Select ADC0P.0.               
 169      =2  #define AMX0P_AMX0P__ADC0P1  0x01 ///< Select ADC0P.1.               
 170      =2  #define AMX0P_AMX0P__ADC0P2  0x02 ///< Select ADC0P.2.               
 171      =2  #define AMX0P_AMX0P__ADC0P3  0x03 ///< Select ADC0P.3.               
 172      =2  #define AMX0P_AMX0P__ADC0P4  0x04 ///< Select ADC0P.4.               
 173      =2  #define AMX0P_AMX0P__ADC0P5  0x05 ///< Select ADC0P.5.               
 174      =2  #define AMX0P_AMX0P__ADC0P6  0x06 ///< Select ADC0P.6.               
 175      =2  #define AMX0P_AMX0P__ADC0P7  0x07 ///< Select ADC0P.7.               
 176      =2  #define AMX0P_AMX0P__ADC0P8  0x08 ///< Select ADC0P.8.               
 177      =2  #define AMX0P_AMX0P__ADC0P9  0x09 ///< Select ADC0P.9.               
 178      =2  #define AMX0P_AMX0P__ADC0P10 0x0A ///< Select ADC0P.10.              
 179      =2  #define AMX0P_AMX0P__ADC0P11 0x0B ///< Select ADC0P.11.              
 180      =2  #define AMX0P_AMX0P__ADC0P12 0x0C ///< Select ADC0P.12.              
 181      =2  #define AMX0P_AMX0P__ADC0P13 0x0D ///< Select ADC0P.13.              
 182      =2  #define AMX0P_AMX0P__ADC0P14 0x0E ///< Select ADC0P.14.              
 183      =2  #define AMX0P_AMX0P__ADC0P15 0x0F ///< Select ADC0P.15.              
 184      =2  #define AMX0P_AMX0P__ADC0P16 0x10 ///< Select ADC0P.16.              
 185      =2  #define AMX0P_AMX0P__ADC0P17 0x11 ///< Select ADC0P.17.              
 186      =2  #define AMX0P_AMX0P__ADC0P18 0x12 ///< Select ADC0P.18.              
 187      =2  #define AMX0P_AMX0P__ADC0P19 0x13 ///< Select ADC0P.19.              
 188      =2  #define AMX0P_AMX0P__ADC0P20 0x14 ///< Select ADC0P.20.              
 189      =2  #define AMX0P_AMX0P__ADC0P21 0x15 ///< Select ADC0P.21.              
 190      =2  #define AMX0P_AMX0P__ADC0P22 0x16 ///< Select ADC0P.22.              
 191      =2  #define AMX0P_AMX0P__ADC0P23 0x17 ///< Select ADC0P.23.              
 192      =2  #define AMX0P_AMX0P__ADC0P24 0x18 ///< Select ADC0P.24.              
 193      =2  #define AMX0P_AMX0P__ADC0P25 0x19 ///< Select ADC0P.25.              
 194      =2  #define AMX0P_AMX0P__ADC0P26 0x1A ///< Select ADC0P.26.              
 195      =2  #define AMX0P_AMX0P__ADC0P27 0x1B ///< Select ADC0P.27.              
 196      =2  #define AMX0P_AMX0P__ADC0P28 0x1C ///< Select ADC0P.28.              
 197      =2  #define AMX0P_AMX0P__ADC0P29 0x1D ///< Select ADC0P.29.              
 198      =2  #define AMX0P_AMX0P__TEMP    0x1E ///< Temperature sensor.           
 199      =2  #define AMX0P_AMX0P__VDD     0x1F ///< VDD Supply Voltage.           
 200      =2  #define AMX0P_AMX0P__ADC0P32 0x20 ///< Select ADC0P.32.              
 201      =2  #define AMX0P_AMX0P__ADC0P33 0x21 ///< Select ADC0P.33.              
 202      =2  #define AMX0P_AMX0P__ADC0P34 0x22 ///< Select ADC0P.34.              
 203      =2                                                                       
 204      =2  //------------------------------------------------------------------------------
 205      =2  // ACC Enums (Accumulator @ 0xE0)
 206      =2  //------------------------------------------------------------------------------
 207      =2  #define ACC_ACC__FMASK 0xFF ///< Accumulator
 208      =2  #define ACC_ACC__SHIFT 0x00 ///< Accumulator
 209      =2                                              
 210      =2  //------------------------------------------------------------------------------
 211      =2  // B Enums (B Register @ 0xF0)
 212      =2  //------------------------------------------------------------------------------
 213      =2  #define B_B__FMASK 0xFF ///< B Register
 214      =2  #define B_B__SHIFT 0x00 ///< B Register
 215      =2                                         
 216      =2  //------------------------------------------------------------------------------
 217      =2  // DPH Enums (Data Pointer High @ 0x83)
 218      =2  //------------------------------------------------------------------------------
 219      =2  #define DPH_DPH__FMASK 0xFF ///< Data Pointer High
 220      =2  #define DPH_DPH__SHIFT 0x00 ///< Data Pointer High
 221      =2                                                    
 222      =2  //------------------------------------------------------------------------------
 223      =2  // DPL Enums (Data Pointer Low @ 0x82)
 224      =2  //------------------------------------------------------------------------------
 225      =2  #define DPL_DPL__FMASK 0xFF ///< Data Pointer Low
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 23  

 226      =2  #define DPL_DPL__SHIFT 0x00 ///< Data Pointer Low
 227      =2                                                   
 228      =2  //------------------------------------------------------------------------------
 229      =2  // PFE0CN Enums (Prefetch Engine Control @ 0xAF)
 230      =2  //------------------------------------------------------------------------------
 231      =2  #define PFE0CN_FLBWE__BMASK                0x01 ///< Flash Block Write Enable                      
 232      =2  #define PFE0CN_FLBWE__SHIFT                0x00 ///< Flash Block Write Enable                      
 233      =2  #define PFE0CN_FLBWE__BLOCK_WRITE_DISABLED 0x00 ///< Each byte of a firmware flash write is written
 234      =2                                                  ///< individually.                                 
 235      =2  #define PFE0CN_FLBWE__BLOCK_WRITE_ENABLED  0x01 ///< Flash bytes are written in groups of two.     
 236      =2                                                                                                     
 237      =2  #define PFE0CN_PFEN__BMASK                 0x20 ///< Prefetch Enable                               
 238      =2  #define PFE0CN_PFEN__SHIFT                 0x05 ///< Prefetch Enable                               
 239      =2  #define PFE0CN_PFEN__DISABLED              0x00 ///< Disable the prefetch engine (SYSCLK < 25 MHz).
 240      =2  #define PFE0CN_PFEN__ENABLED               0x20 ///< Enable the prefetch engine (SYSCLK > 25 MHz). 
 241      =2                                                                                                     
 242      =2  //------------------------------------------------------------------------------
 243      =2  // PSW Enums (Program Status Word @ 0xD0)
 244      =2  //------------------------------------------------------------------------------
 245      =2  #define PSW_PARITY__BMASK   0x01 ///< Parity Flag                                       
 246      =2  #define PSW_PARITY__SHIFT   0x00 ///< Parity Flag                                       
 247      =2  #define PSW_PARITY__NOT_SET 0x00 ///< The sum of the 8 bits in the accumulator is even. 
 248      =2  #define PSW_PARITY__SET     0x01 ///< The sum of the 8 bits in the accumulator is odd.  
 249      =2                                                                                          
 250      =2  #define PSW_F1__BMASK       0x02 ///< User Flag 1                                       
 251      =2  #define PSW_F1__SHIFT       0x01 ///< User Flag 1                                       
 252      =2  #define PSW_F1__NOT_SET     0x00 ///< Flag is not set.                                  
 253      =2  #define PSW_F1__SET         0x02 ///< Flag is set.                                      
 254      =2                                                                                          
 255      =2  #define PSW_OV__BMASK       0x04 ///< Overflow Flag                                     
 256      =2  #define PSW_OV__SHIFT       0x02 ///< Overflow Flag                                     
 257      =2  #define PSW_OV__NOT_SET     0x00 ///< An overflow did not occur.                        
 258      =2  #define PSW_OV__SET         0x04 ///< An overflow occurred.                             
 259      =2                                                                                          
 260      =2  #define PSW_RS__FMASK       0x18 ///< Register Bank Select                              
 261      =2  #define PSW_RS__SHIFT       0x03 ///< Register Bank Select                              
 262      =2  #define PSW_RS__BANK0       0x00 ///< Bank 0, Addresses 0x00-0x07                       
 263      =2  #define PSW_RS__BANK1       0x08 ///< Bank 1, Addresses 0x08-0x0F                       
 264      =2  #define PSW_RS__BANK2       0x10 ///< Bank 2, Addresses 0x10-0x17                       
 265      =2  #define PSW_RS__BANK3       0x18 ///< Bank 3, Addresses 0x18-0x1F                       
 266      =2                                                                                          
 267      =2  #define PSW_F0__BMASK       0x20 ///< User Flag 0                                       
 268      =2  #define PSW_F0__SHIFT       0x05 ///< User Flag 0                                       
 269      =2  #define PSW_F0__NOT_SET     0x00 ///< Flag is not set.                                  
 270      =2  #define PSW_F0__SET         0x20 ///< Flag is set.                                      
 271      =2                                                                                          
 272      =2  #define PSW_AC__BMASK       0x40 ///< Auxiliary Carry Flag                              
 273      =2  #define PSW_AC__SHIFT       0x06 ///< Auxiliary Carry Flag                              
 274      =2  #define PSW_AC__NOT_SET     0x00 ///< A carry into (addition) or borrow from            
 275      =2                                   ///< (subtraction) the high order nibble did not occur.
 276      =2  #define PSW_AC__SET         0x40 ///< A carry into (addition) or borrow from            
 277      =2                                   ///< (subtraction) the high order nibble occurred.     
 278      =2                                                                                          
 279      =2  #define PSW_CY__BMASK       0x80 ///< Carry Flag                                        
 280      =2  #define PSW_CY__SHIFT       0x07 ///< Carry Flag                                        
 281      =2  #define PSW_CY__NOT_SET     0x00 ///< A carry (addition) or borrow (subtraction) did not
 282      =2                                   ///< occur.                                            
 283      =2  #define PSW_CY__SET         0x80 ///< A carry (addition) or borrow (subtraction)        
 284      =2                                   ///< occurred.                                         
 285      =2                                                                                          
 286      =2  //------------------------------------------------------------------------------
 287      =2  // SP Enums (Stack Pointer @ 0x81)
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 24  

 288      =2  //------------------------------------------------------------------------------
 289      =2  #define SP_SP__FMASK 0xFF ///< Stack Pointer
 290      =2  #define SP_SP__SHIFT 0x00 ///< Stack Pointer
 291      =2                                              
 292      =2  //------------------------------------------------------------------------------
 293      =2  // CLKSEL Enums (Clock Select @ 0xA9)
 294      =2  //------------------------------------------------------------------------------
 295      =2  #define CLKSEL_CLKSL__FMASK               0x07 ///< System Clock Source Select Bits                   
 296      =2  #define CLKSEL_CLKSL__SHIFT               0x00 ///< System Clock Source Select Bits                   
 297      =2  #define CLKSEL_CLKSL__DIVIDED_HFOSC_DIV_4 0x00 ///< Clock (SYSCLK) derived from the Internal High-    
 298      =2                                                 ///< Frequency Oscillator / 4 and scaled per the IFCN  
 299      =2                                                 ///< bits in register OSCICN.                          
 300      =2  #define CLKSEL_CLKSL__EXTOSC              0x01 ///< Clock (SYSCLK) derived from the External          
 301      =2                                                 ///< Oscillator circuit.                               
 302      =2  #define CLKSEL_CLKSL__HFOSC_DIV_2         0x02 ///< Clock (SYSCLK) derived from the Internal High-    
 303      =2                                                 ///< Frequency Oscillator / 2.                         
 304      =2  #define CLKSEL_CLKSL__HFOSC               0x03 ///< Clock (SYSCLK) derived from the Internal High-    
 305      =2                                                 ///< Frequency Oscillator.                             
 306      =2  #define CLKSEL_CLKSL__LFOSC               0x04 ///< Clock (SYSCLK) derived from the Internal Low-     
 307      =2                                                 ///< Frequency Oscillator and scaled per the OSCLD bits
 308      =2                                                 ///< in register OSCLCN.                               
 309      =2                                                                                                        
 310      =2  #define CLKSEL_OUTCLK__BMASK              0x08 ///< Crossbar Clock Out Select                         
 311      =2  #define CLKSEL_OUTCLK__SHIFT              0x03 ///< Crossbar Clock Out Select                         
 312      =2  #define CLKSEL_OUTCLK__SYSCLK             0x00 ///< Enabling the Crossbar SYSCLK signal outputs       
 313      =2                                                 ///< SYSCLK.                                           
 314      =2  #define CLKSEL_OUTCLK__SYSCLK_SYNC_IO     0x08 ///< Enabling the Crossbar SYSCLK signal outputs SYSCLK
 315      =2                                                 ///< synchronized with the Port I/O.                   
 316      =2                                                                                                        
 317      =2  #define CLKSEL_USBCLK__FMASK              0x70 ///< USB Clock Source Select Bits                      
 318      =2  #define CLKSEL_USBCLK__SHIFT              0x04 ///< USB Clock Source Select Bits                      
 319      =2  #define CLKSEL_USBCLK__HFOSC              0x00 ///< USB clock (USBCLK) derived from the Internal High-
 320      =2                                                 ///< Frequency Oscillator.                             
 321      =2  #define CLKSEL_USBCLK__HFOSC_DIV_8        0x10 ///< USB clock (USBCLK) derived from the Internal High-
 322      =2                                                 ///< Frequency Oscillator / 8.                         
 323      =2  #define CLKSEL_USBCLK__EXTOSC             0x20 ///< USB clock (USBCLK) derived from the External      
 324      =2                                                 ///< Oscillator.                                       
 325      =2  #define CLKSEL_USBCLK__EXTOSC_DIV_2       0x30 ///< USB clock (USBCLK) derived from the External      
 326      =2                                                 ///< Oscillator / 2.                                   
 327      =2  #define CLKSEL_USBCLK__EXTOSC_DIV_3       0x40 ///< USB clock (USBCLK) derived from the External      
 328      =2                                                 ///< Oscillator / 3.                                   
 329      =2  #define CLKSEL_USBCLK__EXTOSC_DIV_4       0x50 ///< USB clock (USBCLK) derived from the External      
 330      =2                                                 ///< Oscillator / 4.                                   
 331      =2  #define CLKSEL_USBCLK__LFOSC              0x60 ///< USB clock (USBCLK) derived from the Internal Low- 
 332      =2                                                 ///< Frequency Oscillator.                             
 333      =2                                                                                                        
 334      =2  //------------------------------------------------------------------------------
 335      =2  // CMP0CN0 Enums (Comparator 0 Control 0 @ 0x9B)
 336      =2  //------------------------------------------------------------------------------
 337      =2  #define CMP0CN0_CPHYN__FMASK                0x03 ///< Comparator Negative Hysteresis Control            
 338      =2  #define CMP0CN0_CPHYN__SHIFT                0x00 ///< Comparator Negative Hysteresis Control            
 339      =2  #define CMP0CN0_CPHYN__DISABLED             0x00 ///< Negative Hysteresis disabled.                     
 340      =2  #define CMP0CN0_CPHYN__ENABLED_MODE1        0x01 ///< Negative Hysteresis = Hysteresis 1.               
 341      =2  #define CMP0CN0_CPHYN__ENABLED_MODE2        0x02 ///< Negative Hysteresis = Hysteresis 2.               
 342      =2  #define CMP0CN0_CPHYN__ENABLED_MODE3        0x03 ///< Negative Hysteresis = Hysteresis 3 (Maximum).     
 343      =2                                                                                                          
 344      =2  #define CMP0CN0_CPHYP__FMASK                0x0C ///< Comparator Positive Hysteresis Control            
 345      =2  #define CMP0CN0_CPHYP__SHIFT                0x02 ///< Comparator Positive Hysteresis Control            
 346      =2  #define CMP0CN0_CPHYP__DISABLED             0x00 ///< Positive Hysteresis disabled.                     
 347      =2  #define CMP0CN0_CPHYP__ENABLED_MODE1        0x04 ///< Positive Hysteresis = Hysteresis 1.               
 348      =2  #define CMP0CN0_CPHYP__ENABLED_MODE2        0x08 ///< Positive Hysteresis = Hysteresis 2.               
 349      =2  #define CMP0CN0_CPHYP__ENABLED_MODE3        0x0C ///< Positive Hysteresis = Hysteresis 3 (Maximum).     
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 25  

 350      =2                                                                                                          
 351      =2  #define CMP0CN0_CPFIF__BMASK                0x10 ///< Comparator Falling-Edge Flag                      
 352      =2  #define CMP0CN0_CPFIF__SHIFT                0x04 ///< Comparator Falling-Edge Flag                      
 353      =2  #define CMP0CN0_CPFIF__NOT_SET              0x00 ///< No comparator falling edge has occurred since this
 354      =2                                                   ///< flag was last cleared.                            
 355      =2  #define CMP0CN0_CPFIF__FALLING_EDGE         0x10 ///< Comparator falling edge has occurred.             
 356      =2                                                                                                          
 357      =2  #define CMP0CN0_CPRIF__BMASK                0x20 ///< Comparator Rising-Edge Flag                       
 358      =2  #define CMP0CN0_CPRIF__SHIFT                0x05 ///< Comparator Rising-Edge Flag                       
 359      =2  #define CMP0CN0_CPRIF__NOT_SET              0x00 ///< No comparator rising edge has occurred since this 
 360      =2                                                   ///< flag was last cleared.                            
 361      =2  #define CMP0CN0_CPRIF__RISING_EDGE          0x20 ///< Comparator rising edge has occurred.              
 362      =2                                                                                                          
 363      =2  #define CMP0CN0_CPOUT__BMASK                0x40 ///< Comparator Output State Flag                      
 364      =2  #define CMP0CN0_CPOUT__SHIFT                0x06 ///< Comparator Output State Flag                      
 365      =2  #define CMP0CN0_CPOUT__POS_LESS_THAN_NEG    0x00 ///< Voltage on CP0P < CP0N.                           
 366      =2  #define CMP0CN0_CPOUT__POS_GREATER_THAN_NEG 0x40 ///< Voltage on CP0P > CP0N.                           
 367      =2                                                                                                          
 368      =2  #define CMP0CN0_CPEN__BMASK                 0x80 ///< Comparator Enable                                 
 369      =2  #define CMP0CN0_CPEN__SHIFT                 0x07 ///< Comparator Enable                                 
 370      =2  #define CMP0CN0_CPEN__DISABLED              0x00 ///< Comparator disabled.                              
 371      =2  #define CMP0CN0_CPEN__ENABLED               0x80 ///< Comparator enabled.                               
 372      =2                                                                                                          
 373      =2  //------------------------------------------------------------------------------
 374      =2  // CMP0MD Enums (Comparator 0 Mode @ 0x9D)
 375      =2  //------------------------------------------------------------------------------
 376      =2  #define CMP0MD_CPMD__FMASK              0x03 ///< Comparator Mode Select                      
 377      =2  #define CMP0MD_CPMD__SHIFT              0x00 ///< Comparator Mode Select                      
 378      =2  #define CMP0MD_CPMD__MODE0              0x00 ///< Mode 0 (Fastest Response Time, Highest Power
 379      =2                                               ///< Consumption)                                
 380      =2  #define CMP0MD_CPMD__MODE1              0x01 ///< Mode 1                                      
 381      =2  #define CMP0MD_CPMD__MODE2              0x02 ///< Mode 2                                      
 382      =2  #define CMP0MD_CPMD__MODE3              0x03 ///< Mode 3 (Slowest Response Time, Lowest Power 
 383      =2                                               ///< Consumption)                                
 384      =2                                                                                                
 385      =2  #define CMP0MD_CPFIE__BMASK             0x10 ///< Comparator Falling-Edge Interrupt Enable    
 386      =2  #define CMP0MD_CPFIE__SHIFT             0x04 ///< Comparator Falling-Edge Interrupt Enable    
 387      =2  #define CMP0MD_CPFIE__FALL_INT_DISABLED 0x00 ///< Comparator falling-edge interrupt disabled. 
 388      =2  #define CMP0MD_CPFIE__FALL_INT_ENABLED  0x10 ///< Comparator falling-edge interrupt enabled.  
 389      =2                                                                                                
 390      =2  #define CMP0MD_CPRIE__BMASK             0x20 ///< Comparator Rising-Edge Interrupt Enable     
 391      =2  #define CMP0MD_CPRIE__SHIFT             0x05 ///< Comparator Rising-Edge Interrupt Enable     
 392      =2  #define CMP0MD_CPRIE__RISE_INT_DISABLED 0x00 ///< Comparator rising-edge interrupt disabled.  
 393      =2  #define CMP0MD_CPRIE__RISE_INT_ENABLED  0x20 ///< Comparator rising-edge interrupt enabled.   
 394      =2                                                                                                
 395      =2  //------------------------------------------------------------------------------
 396      =2  // CMP0MX Enums (Comparator 0 Multiplexer Selection @ 0x9F)
 397      =2  //------------------------------------------------------------------------------
 398      =2  #define CMP0MX_CMXP__FMASK  0x07 ///< Comparator Positive Input MUX Selection
 399      =2  #define CMP0MX_CMXP__SHIFT  0x00 ///< Comparator Positive Input MUX Selection
 400      =2  #define CMP0MX_CMXP__CMP0P0 0x00 ///< External pin CMP0P.0.                  
 401      =2  #define CMP0MX_CMXP__CMP0P1 0x01 ///< External pin CMP0P.1.                  
 402      =2  #define CMP0MX_CMXP__CMP0P2 0x02 ///< External pin CMP0P.2.                  
 403      =2  #define CMP0MX_CMXP__CMP0P3 0x03 ///< External pin CMP0P.3.                  
 404      =2  #define CMP0MX_CMXP__CMP0P4 0x04 ///< External pin CMP0P.4.                  
 405      =2                                                                               
 406      =2  #define CMP0MX_CMXN__FMASK  0x70 ///< Comparator Negative Input MUX Selection
 407      =2  #define CMP0MX_CMXN__SHIFT  0x04 ///< Comparator Negative Input MUX Selection
 408      =2  #define CMP0MX_CMXN__CMP0N0 0x00 ///< External pin CMP0N.0.                  
 409      =2  #define CMP0MX_CMXN__CMP0N1 0x10 ///< External pin CMP0N.1.                  
 410      =2  #define CMP0MX_CMXN__CMP0N2 0x20 ///< External pin CMP0N.2.                  
 411      =2  #define CMP0MX_CMXN__CMP0N3 0x30 ///< External pin CMP0N.3.                  
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 26  

 412      =2  #define CMP0MX_CMXN__CMP0N4 0x40 ///< External pin CMP0N.4.                  
 413      =2                                                                               
 414      =2  //------------------------------------------------------------------------------
 415      =2  // CMP1CN0 Enums (Comparator 1 Control 0 @ 0x9A)
 416      =2  //------------------------------------------------------------------------------
 417      =2  #define CMP1CN0_CPHYN__FMASK                0x03 ///< Comparator Negative Hysteresis Control            
 418      =2  #define CMP1CN0_CPHYN__SHIFT                0x00 ///< Comparator Negative Hysteresis Control            
 419      =2  #define CMP1CN0_CPHYN__DISABLED             0x00 ///< Negative Hysteresis disabled.                     
 420      =2  #define CMP1CN0_CPHYN__ENABLED_MODE1        0x01 ///< Negative Hysteresis = Hysteresis 1.               
 421      =2  #define CMP1CN0_CPHYN__ENABLED_MODE2        0x02 ///< Negative Hysteresis = Hysteresis 2.               
 422      =2  #define CMP1CN0_CPHYN__ENABLED_MODE3        0x03 ///< Negative Hysteresis = Hysteresis 3 (Maximum).     
 423      =2                                                                                                          
 424      =2  #define CMP1CN0_CPHYP__FMASK                0x0C ///< Comparator Positive Hysteresis Control            
 425      =2  #define CMP1CN0_CPHYP__SHIFT                0x02 ///< Comparator Positive Hysteresis Control            
 426      =2  #define CMP1CN0_CPHYP__DISABLED             0x00 ///< Positive Hysteresis disabled.                     
 427      =2  #define CMP1CN0_CPHYP__ENABLED_MODE1        0x04 ///< Positive Hysteresis = Hysteresis 1.               
 428      =2  #define CMP1CN0_CPHYP__ENABLED_MODE2        0x08 ///< Positive Hysteresis = Hysteresis 2.               
 429      =2  #define CMP1CN0_CPHYP__ENABLED_MODE3        0x0C ///< Positive Hysteresis = Hysteresis 3 (Maximum).     
 430      =2                                                                                                          
 431      =2  #define CMP1CN0_CPFIF__BMASK                0x10 ///< Comparator Falling-Edge Flag                      
 432      =2  #define CMP1CN0_CPFIF__SHIFT                0x04 ///< Comparator Falling-Edge Flag                      
 433      =2  #define CMP1CN0_CPFIF__NOT_SET              0x00 ///< No comparator falling edge has occurred since this
 434      =2                                                   ///< flag was last cleared.                            
 435      =2  #define CMP1CN0_CPFIF__FALLING_EDGE         0x10 ///< Comparator falling edge has occurred.             
 436      =2                                                                                                          
 437      =2  #define CMP1CN0_CPRIF__BMASK                0x20 ///< Comparator Rising-Edge Flag                       
 438      =2  #define CMP1CN0_CPRIF__SHIFT                0x05 ///< Comparator Rising-Edge Flag                       
 439      =2  #define CMP1CN0_CPRIF__NOT_SET              0x00 ///< No comparator rising edge has occurred since this 
 440      =2                                                   ///< flag was last cleared.                            
 441      =2  #define CMP1CN0_CPRIF__RISING_EDGE          0x20 ///< Comparator rising edge has occurred.              
 442      =2                                                                                                          
 443      =2  #define CMP1CN0_CPOUT__BMASK                0x40 ///< Comparator Output State Flag                      
 444      =2  #define CMP1CN0_CPOUT__SHIFT                0x06 ///< Comparator Output State Flag                      
 445      =2  #define CMP1CN0_CPOUT__POS_LESS_THAN_NEG    0x00 ///< Voltage on CP1P < CP1N.                           
 446      =2  #define CMP1CN0_CPOUT__POS_GREATER_THAN_NEG 0x40 ///< Voltage on CP1P > CP1N.                           
 447      =2                                                                                                          
 448      =2  #define CMP1CN0_CPEN__BMASK                 0x80 ///< Comparator Enable                                 
 449      =2  #define CMP1CN0_CPEN__SHIFT                 0x07 ///< Comparator Enable                                 
 450      =2  #define CMP1CN0_CPEN__DISABLED              0x00 ///< Comparator disabled.                              
 451      =2  #define CMP1CN0_CPEN__ENABLED               0x80 ///< Comparator enabled.                               
 452      =2                                                                                                          
 453      =2  //------------------------------------------------------------------------------
 454      =2  // CMP1MD Enums (Comparator 1 Mode @ 0x9C)
 455      =2  //------------------------------------------------------------------------------
 456      =2  #define CMP1MD_CPMD__FMASK              0x03 ///< Comparator Mode Select                      
 457      =2  #define CMP1MD_CPMD__SHIFT              0x00 ///< Comparator Mode Select                      
 458      =2  #define CMP1MD_CPMD__MODE0              0x00 ///< Mode 0 (Fastest Response Time, Highest Power
 459      =2                                               ///< Consumption)                                
 460      =2  #define CMP1MD_CPMD__MODE1              0x01 ///< Mode 1                                      
 461      =2  #define CMP1MD_CPMD__MODE2              0x02 ///< Mode 2                                      
 462      =2  #define CMP1MD_CPMD__MODE3              0x03 ///< Mode 3 (Slowest Response Time, Lowest Power 
 463      =2                                               ///< Consumption)                                
 464      =2                                                                                                
 465      =2  #define CMP1MD_CPFIE__BMASK             0x10 ///< Comparator Falling-Edge Interrupt Enable    
 466      =2  #define CMP1MD_CPFIE__SHIFT             0x04 ///< Comparator Falling-Edge Interrupt Enable    
 467      =2  #define CMP1MD_CPFIE__FALL_INT_DISABLED 0x00 ///< Comparator falling-edge interrupt disabled. 
 468      =2  #define CMP1MD_CPFIE__FALL_INT_ENABLED  0x10 ///< Comparator falling-edge interrupt enabled.  
 469      =2                                                                                                
 470      =2  #define CMP1MD_CPRIE__BMASK             0x20 ///< Comparator Rising-Edge Interrupt Enable     
 471      =2  #define CMP1MD_CPRIE__SHIFT             0x05 ///< Comparator Rising-Edge Interrupt Enable     
 472      =2  #define CMP1MD_CPRIE__RISE_INT_DISABLED 0x00 ///< Comparator rising-edge interrupt disabled.  
 473      =2  #define CMP1MD_CPRIE__RISE_INT_ENABLED  0x20 ///< Comparator rising-edge interrupt enabled.   
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 27  

 474      =2                                                                                                
 475      =2  //------------------------------------------------------------------------------
 476      =2  // CMP1MX Enums (Comparator 1 Multiplexer Selection @ 0x9E)
 477      =2  //------------------------------------------------------------------------------
 478      =2  #define CMP1MX_CMXP__FMASK  0x07 ///< Comparator Positive Input MUX Selection
 479      =2  #define CMP1MX_CMXP__SHIFT  0x00 ///< Comparator Positive Input MUX Selection
 480      =2  #define CMP1MX_CMXP__CMP1P0 0x00 ///< External pin CMP1P.0.                  
 481      =2  #define CMP1MX_CMXP__CMP1P1 0x01 ///< External pin CMP1P.1.                  
 482      =2  #define CMP1MX_CMXP__CMP1P2 0x02 ///< External pin CMP1P.2.                  
 483      =2  #define CMP1MX_CMXP__CMP1P3 0x03 ///< External pin CMP1P.3.                  
 484      =2  #define CMP1MX_CMXP__CMP1P4 0x04 ///< External pin CMP1P.4.                  
 485      =2                                                                               
 486      =2  #define CMP1MX_CMXN__FMASK  0x70 ///< Comparator Negative Input MUX Selection
 487      =2  #define CMP1MX_CMXN__SHIFT  0x04 ///< Comparator Negative Input MUX Selection
 488      =2  #define CMP1MX_CMXN__CMP1N0 0x00 ///< External pin CMP1N.0.                  
 489      =2  #define CMP1MX_CMXN__CMP1N1 0x10 ///< External pin CMP1N.1.                  
 490      =2  #define CMP1MX_CMXN__CMP1N2 0x20 ///< External pin CMP1N.2.                  
 491      =2  #define CMP1MX_CMXN__CMP1N3 0x30 ///< External pin CMP1N.3.                  
 492      =2  #define CMP1MX_CMXN__CMP1N4 0x40 ///< External pin CMP1N.4.                  
 493      =2                                                                               
 494      =2  //------------------------------------------------------------------------------
 495      =2  // IT01CF Enums (INT0/INT1 Configuration @ 0xE4)
 496      =2  //------------------------------------------------------------------------------
 497      =2  #define IT01CF_IN0SL__FMASK       0x07 ///< INT0 Port Pin Selection   
 498      =2  #define IT01CF_IN0SL__SHIFT       0x00 ///< INT0 Port Pin Selection   
 499      =2  #define IT01CF_IN0SL__P0_0        0x00 ///< Select P0.0.              
 500      =2  #define IT01CF_IN0SL__P0_1        0x01 ///< Select P0.1.              
 501      =2  #define IT01CF_IN0SL__P0_2        0x02 ///< Select P0.2.              
 502      =2  #define IT01CF_IN0SL__P0_3        0x03 ///< Select P0.3.              
 503      =2  #define IT01CF_IN0SL__P0_4        0x04 ///< Select P0.4.              
 504      =2  #define IT01CF_IN0SL__P0_5        0x05 ///< Select P0.5.              
 505      =2  #define IT01CF_IN0SL__P0_6        0x06 ///< Select P0.6.              
 506      =2  #define IT01CF_IN0SL__P0_7        0x07 ///< Select P0.7.              
 507      =2                                                                        
 508      =2  #define IT01CF_IN0PL__BMASK       0x08 ///< INT0 Polarity             
 509      =2  #define IT01CF_IN0PL__SHIFT       0x03 ///< INT0 Polarity             
 510      =2  #define IT01CF_IN0PL__ACTIVE_LOW  0x00 ///< INT0 input is active low. 
 511      =2  #define IT01CF_IN0PL__ACTIVE_HIGH 0x08 ///< INT0 input is active high.
 512      =2                                                                        
 513      =2  #define IT01CF_IN1SL__FMASK       0x70 ///< INT1 Port Pin Selection   
 514      =2  #define IT01CF_IN1SL__SHIFT       0x04 ///< INT1 Port Pin Selection   
 515      =2  #define IT01CF_IN1SL__P0_0        0x00 ///< Select P0.0.              
 516      =2  #define IT01CF_IN1SL__P0_1        0x10 ///< Select P0.1.              
 517      =2  #define IT01CF_IN1SL__P0_2        0x20 ///< Select P0.2.              
 518      =2  #define IT01CF_IN1SL__P0_3        0x30 ///< Select P0.3.              
 519      =2  #define IT01CF_IN1SL__P0_4        0x40 ///< Select P0.4.              
 520      =2  #define IT01CF_IN1SL__P0_5        0x50 ///< Select P0.5.              
 521      =2  #define IT01CF_IN1SL__P0_6        0x60 ///< Select P0.6.              
 522      =2  #define IT01CF_IN1SL__P0_7        0x70 ///< Select P0.7.              
 523      =2                                                                        
 524      =2  #define IT01CF_IN1PL__BMASK       0x80 ///< INT1 Polarity             
 525      =2  #define IT01CF_IN1PL__SHIFT       0x07 ///< INT1 Polarity             
 526      =2  #define IT01CF_IN1PL__ACTIVE_LOW  0x00 ///< INT1 input is active low. 
 527      =2  #define IT01CF_IN1PL__ACTIVE_HIGH 0x80 ///< INT1 input is active high.
 528      =2                                                                        
 529      =2  //------------------------------------------------------------------------------
 530      =2  // XOSC0CN Enums (External Oscillator Control @ 0xB1)
 531      =2  //------------------------------------------------------------------------------
 532      =2  #define XOSC0CN_XFCN__FMASK           0x07 ///< External Oscillator Frequency Control            
 533      =2  #define XOSC0CN_XFCN__SHIFT           0x00 ///< External Oscillator Frequency Control            
 534      =2  #define XOSC0CN_XFCN__MODE0           0x00 ///< Select external oscillator mode 0: Crystal       
 535      =2                                             ///< frequency <= 20 kHz, RC/C frequency <= 25 kHz, C 
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 28  

 536      =2                                             ///< mode K factor = 0.87.                            
 537      =2  #define XOSC0CN_XFCN__MODE1           0x01 ///< Select external oscillator mode 1: 20 kHz <      
 538      =2                                             ///< Crystal frequency <= 58 kHz, 25 kHz < RC/C       
 539      =2                                             ///< frequency <= 50 kHz, C mode K factor = 2.6.      
 540      =2  #define XOSC0CN_XFCN__MODE2           0x02 ///< Select external oscillator mode 2: 58 kHz <      
 541      =2                                             ///< Crystal frequency <= 155 kHz, 50 kHz < RC/C      
 542      =2                                             ///< frequency <= 100 kHz, C mode K factor = 7.7.     
 543      =2  #define XOSC0CN_XFCN__MODE3           0x03 ///< Select external oscillator mode 3: 155 kHz <     
 544      =2                                             ///< Crystal frequency <= 415 kHz, 100 kHz < RC/C     
 545      =2                                             ///< frequency <= 200 kHz, C mode K factor = 22.      
 546      =2  #define XOSC0CN_XFCN__MODE4           0x04 ///< Select external oscillator mode 4: 415 kHz <     
 547      =2                                             ///< Crystal frequency <= 1.1 MHz, 200 kHz < RC/C     
 548      =2                                             ///< frequency <= 400 kHz, C mode K factor = 65.      
 549      =2  #define XOSC0CN_XFCN__MODE5           0x05 ///< Select external oscillator mode 5: 1.1 MHz <     
 550      =2                                             ///< Crystal frequency <= 3.1 MHz, 400 kHz < RC/C     
 551      =2                                             ///< frequency <= 800 kHz, C mode K factor = 180.     
 552      =2  #define XOSC0CN_XFCN__MODE6           0x06 ///< Select external oscillator mode 6: 3.1 MHz <     
 553      =2                                             ///< Crystal frequency <= 8.2 kHz, 800 kHz < RC/C     
 554      =2                                             ///< frequency <= 1.6 MHz, C mode K factor = 664.     
 555      =2  #define XOSC0CN_XFCN__MODE7           0x07 ///< Select external oscillator mode 7: 8.2 MHz <     
 556      =2                                             ///< Crystal frequency <= 25 MHz, 1.6 MHz < RC/C      
 557      =2                                             ///< frequency <= 3.2 MHz, C mode K factor = 1590.    
 558      =2                                                                                                   
 559      =2  #define XOSC0CN_XOSCMD__FMASK         0x70 ///< External Oscillator Mode                         
 560      =2  #define XOSC0CN_XOSCMD__SHIFT         0x04 ///< External Oscillator Mode                         
 561      =2  #define XOSC0CN_XOSCMD__DISABLED      0x00 ///< External Oscillator circuit disabled.            
 562      =2  #define XOSC0CN_XOSCMD__CMOS          0x20 ///< External CMOS Clock Mode.                        
 563      =2  #define XOSC0CN_XOSCMD__CMOS_DIV_2    0x30 ///< External CMOS Clock Mode with divide by 2 stage. 
 564      =2  #define XOSC0CN_XOSCMD__RC_DIV_2      0x40 ///< RC Oscillator Mode with divide by 2 stage.       
 565      =2  #define XOSC0CN_XOSCMD__C_DIV_2       0x50 ///< Capacitor Oscillator Mode with divide by 2 stage.
 566      =2  #define XOSC0CN_XOSCMD__CRYSTAL       0x60 ///< Crystal Oscillator Mode.                         
 567      =2  #define XOSC0CN_XOSCMD__CRYSTAL_DIV_2 0x70 ///< Crystal Oscillator Mode with divide by 2 stage.  
 568      =2                                                                                                   
 569      =2  #define XOSC0CN_XCLKVLD__BMASK        0x80 ///< External Oscillator Valid Flag                   
 570      =2  #define XOSC0CN_XCLKVLD__SHIFT        0x07 ///< External Oscillator Valid Flag                   
 571      =2  #define XOSC0CN_XCLKVLD__NOT_SET      0x00 ///< External Oscillator is unused or not yet stable. 
 572      =2  #define XOSC0CN_XCLKVLD__SET          0x80 ///< External Oscillator is running and stable.       
 573      =2                                                                                                   
 574      =2  //------------------------------------------------------------------------------
 575      =2  // FLKEY Enums (Flash Lock and Key @ 0xB7)
 576      =2  //------------------------------------------------------------------------------
 577      =2  #define FLKEY_FLKEY__FMASK    0xFF ///< Flash Lock and Key                             
 578      =2  #define FLKEY_FLKEY__SHIFT    0x00 ///< Flash Lock and Key                             
 579      =2  #define FLKEY_FLKEY__LOCKED   0x00 ///< Flash is write/erase locked.                   
 580      =2  #define FLKEY_FLKEY__FIRST    0x01 ///< The first key code has been written (0xA5).    
 581      =2  #define FLKEY_FLKEY__UNLOCKED 0x02 ///< Flash is unlocked (writes/erases allowed).     
 582      =2  #define FLKEY_FLKEY__DISABLED 0x03 ///< Flash writes/erases are disabled until the next
 583      =2                                     ///< reset.                                         
 584      =2  #define FLKEY_FLKEY__KEY1     0xA5 ///< Flash writes and erases are enabled by writing 
 585      =2                                     ///< 0xA5 followed by 0xF1 to the FLKEY register.   
 586      =2  #define FLKEY_FLKEY__KEY2     0xF1 ///< Flash writes and erases are enabled by writing 
 587      =2                                     ///< 0xA5 followed by 0xF1 to the FLKEY register.   
 588      =2                                                                                         
 589      =2  //------------------------------------------------------------------------------
 590      =2  // FLSCL Enums (Flash Scale @ 0xB6)
 591      =2  //------------------------------------------------------------------------------
 592      =2  #define FLSCL_FLRT__BMASK               0x10 ///< Flash Read Timing                       
 593      =2  #define FLSCL_FLRT__SHIFT               0x04 ///< Flash Read Timing                       
 594      =2  #define FLSCL_FLRT__SYSCLK_BELOW_25_MHZ 0x00 ///< SYSCLK <= 25 MHz.                       
 595      =2  #define FLSCL_FLRT__SYSCLK_BELOW_48_MHZ 0x10 ///< SYSCLK <= 48 MHz.                       
 596      =2                                                                                            
 597      =2  #define FLSCL_FOSE__BMASK               0x80 ///< Flash One-Shot Enable                   
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 29  

 598      =2  #define FLSCL_FOSE__SHIFT               0x07 ///< Flash One-Shot Enable                   
 599      =2  #define FLSCL_FOSE__DISABLED            0x00 ///< Disable the flash one-shot.             
 600      =2  #define FLSCL_FOSE__ENABLED             0x80 ///< Enable the flash one-shot (recommended).
 601      =2                                                                                            
 602      =2  //------------------------------------------------------------------------------
 603      =2  // PSCTL Enums (Program Store Control @ 0x8F)
 604      =2  //------------------------------------------------------------------------------
 605      =2  #define PSCTL_PSWE__BMASK          0x01 ///< Program Store Write Enable                      
 606      =2  #define PSCTL_PSWE__SHIFT          0x00 ///< Program Store Write Enable                      
 607      =2  #define PSCTL_PSWE__WRITE_DISABLED 0x00 ///< Writes to flash program memory disabled.        
 608      =2  #define PSCTL_PSWE__WRITE_ENABLED  0x01 ///< Writes to flash program memory enabled; the MOVX
 609      =2                                          ///< write instruction targets flash memory.         
 610      =2                                                                                               
 611      =2  #define PSCTL_PSEE__BMASK          0x02 ///< Program Store Erase Enable                      
 612      =2  #define PSCTL_PSEE__SHIFT          0x01 ///< Program Store Erase Enable                      
 613      =2  #define PSCTL_PSEE__ERASE_DISABLED 0x00 ///< Flash program memory erasure disabled.          
 614      =2  #define PSCTL_PSEE__ERASE_ENABLED  0x02 ///< Flash program memory erasure enabled.           
 615      =2                                                                                               
 616      =2  //------------------------------------------------------------------------------
 617      =2  // HFO0CAL Enums (High Frequency Oscillator Calibration @ 0xB3)
 618      =2  //------------------------------------------------------------------------------
 619      =2  #define HFO0CAL_OSCICL__FMASK 0x7F ///< Internal Oscillator Calibration
 620      =2  #define HFO0CAL_OSCICL__SHIFT 0x00 ///< Internal Oscillator Calibration
 621      =2                                                                         
 622      =2  //------------------------------------------------------------------------------
 623      =2  // HFO0CN Enums (High Frequency Oscillator Control @ 0xB2)
 624      =2  //------------------------------------------------------------------------------
 625      =2  #define HFO0CN_IFCN__FMASK        0x03 ///< Oscillator Frequency Divider Control              
 626      =2  #define HFO0CN_IFCN__SHIFT        0x00 ///< Oscillator Frequency Divider Control              
 627      =2  #define HFO0CN_IFCN__SYSCLK_DIV_8 0x00 ///< SYSCLK can be derived from Internal H-F Oscillator
 628      =2                                         ///< divided by 8 (1.5 MHz).                           
 629      =2  #define HFO0CN_IFCN__SYSCLK_DIV_4 0x01 ///< SYSCLK can be derived from Internal H-F Oscillator
 630      =2                                         ///< divided by 4 (3 MHz).                             
 631      =2  #define HFO0CN_IFCN__SYSCLK_DIV_2 0x02 ///< SYSCLK can be derived from Internal H-F Oscillator
 632      =2                                         ///< divided by 2 (6 MHz).                             
 633      =2  #define HFO0CN_IFCN__SYSCLK_DIV_1 0x03 ///< SYSCLK can be derived from Internal H-F Oscillator
 634      =2                                         ///< divided by 1 (12 MHz).                            
 635      =2                                                                                                
 636      =2  #define HFO0CN_SUSPEND__BMASK     0x20 ///< Oscillator Suspend Enable                         
 637      =2  #define HFO0CN_SUSPEND__SHIFT     0x05 ///< Oscillator Suspend Enable                         
 638      =2  #define HFO0CN_SUSPEND__DISABLED  0x00 ///< The internal oscillator is not in suspend mode.   
 639      =2  #define HFO0CN_SUSPEND__ENABLED   0x20 ///< Place the internal oscillator in suspend mode.    
 640      =2                                                                                                
 641      =2  #define HFO0CN_IFRDY__BMASK       0x40 ///< Oscillator Frequency Ready Flag                   
 642      =2  #define HFO0CN_IFRDY__SHIFT       0x06 ///< Oscillator Frequency Ready Flag                   
 643      =2  #define HFO0CN_IFRDY__NOT_SET     0x00 ///< The Internal High Frequency Oscillator is not     
 644      =2                                         ///< running at the programmed frequency.              
 645      =2  #define HFO0CN_IFRDY__SET         0x40 ///< The Internal High Frequency Oscillator is running 
 646      =2                                         ///< at the programmed frequency.                      
 647      =2                                                                                                
 648      =2  #define HFO0CN_IOSCEN__BMASK      0x80 ///< Oscillator Enable                                 
 649      =2  #define HFO0CN_IOSCEN__SHIFT      0x07 ///< Oscillator Enable                                 
 650      =2  #define HFO0CN_IOSCEN__DISABLED   0x00 ///< Disable the High Frequency Oscillator.            
 651      =2  #define HFO0CN_IOSCEN__ENABLED    0x80 ///< Enable the High Frequency Oscillator.             
 652      =2                                                                                                
 653      =2  //------------------------------------------------------------------------------
 654      =2  // EIE1 Enums (Extended Interrupt Enable 1 @ 0xE6)
 655      =2  //------------------------------------------------------------------------------
 656      =2  #define EIE1_ESMB0__BMASK     0x01 ///< SMBus (SMB0) Interrupt Enable                     
 657      =2  #define EIE1_ESMB0__SHIFT     0x00 ///< SMBus (SMB0) Interrupt Enable                     
 658      =2  #define EIE1_ESMB0__DISABLED  0x00 ///< Disable all SMB0 interrupts.                      
 659      =2  #define EIE1_ESMB0__ENABLED   0x01 ///< Enable interrupt requests generated by SMB0.      
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 30  

 660      =2                                                                                            
 661      =2  #define EIE1_EUSB0__BMASK     0x02 ///< USB (USB0) Interrupt Enable                       
 662      =2  #define EIE1_EUSB0__SHIFT     0x01 ///< USB (USB0) Interrupt Enable                       
 663      =2  #define EIE1_EUSB0__DISABLED  0x00 ///< Disable all USB0 interrupts.                      
 664      =2  #define EIE1_EUSB0__ENABLED   0x02 ///< Enable interrupt requests generated by USB0.      
 665      =2                                                                                            
 666      =2  #define EIE1_EWADC0__BMASK    0x04 ///< ADC0 Window Comparison Interrupt Enable           
 667      =2  #define EIE1_EWADC0__SHIFT    0x02 ///< ADC0 Window Comparison Interrupt Enable           
 668      =2  #define EIE1_EWADC0__DISABLED 0x00 ///< Disable ADC0 Window Comparison interrupt.         
 669      =2  #define EIE1_EWADC0__ENABLED  0x04 ///< Enable interrupt requests generated by ADC0 Window
 670      =2                                     ///< Compare flag (ADWINT).                            
 671      =2                                                                                            
 672      =2  #define EIE1_EADC0__BMASK     0x08 ///< ADC0 Conversion Complete Interrupt Enable         
 673      =2  #define EIE1_EADC0__SHIFT     0x03 ///< ADC0 Conversion Complete Interrupt Enable         
 674      =2  #define EIE1_EADC0__DISABLED  0x00 ///< Disable ADC0 Conversion Complete interrupt.       
 675      =2  #define EIE1_EADC0__ENABLED   0x08 ///< Enable interrupt requests generated by the ADINT  
 676      =2                                     ///< flag.                                             
 677      =2                                                                                            
 678      =2  #define EIE1_EPCA0__BMASK     0x10 ///< Programmable Counter Array (PCA0) Interrupt Enable
 679      =2  #define EIE1_EPCA0__SHIFT     0x04 ///< Programmable Counter Array (PCA0) Interrupt Enable
 680      =2  #define EIE1_EPCA0__DISABLED  0x00 ///< Disable all PCA0 interrupts.                      
 681      =2  #define EIE1_EPCA0__ENABLED   0x10 ///< Enable interrupt requests generated by PCA0.      
 682      =2                                                                                            
 683      =2  #define EIE1_ECP0__BMASK      0x20 ///< Comparator0 (CP0) Interrupt Enable                
 684      =2  #define EIE1_ECP0__SHIFT      0x05 ///< Comparator0 (CP0) Interrupt Enable                
 685      =2  #define EIE1_ECP0__DISABLED   0x00 ///< Disable CP0 interrupts.                           
 686      =2  #define EIE1_ECP0__ENABLED    0x20 ///< Enable interrupt requests generated by the        
 687      =2                                     ///< comparator 0 CPRIF or CPFIF flags.                
 688      =2                                                                                            
 689      =2  #define EIE1_ECP1__BMASK      0x40 ///< Comparator1 (CP1) Interrupt Enable                
 690      =2  #define EIE1_ECP1__SHIFT      0x06 ///< Comparator1 (CP1) Interrupt Enable                
 691      =2  #define EIE1_ECP1__DISABLED   0x00 ///< Disable CP1 interrupts.                           
 692      =2  #define EIE1_ECP1__ENABLED    0x40 ///< Enable interrupt requests generated by the        
 693      =2                                     ///< comparator 1 CPRIF or CPFIF flags.                
 694      =2                                                                                            
 695      =2  #define EIE1_ET3__BMASK       0x80 ///< Timer 3 Interrupt Enable                          
 696      =2  #define EIE1_ET3__SHIFT       0x07 ///< Timer 3 Interrupt Enable                          
 697      =2  #define EIE1_ET3__DISABLED    0x00 ///< Disable Timer 3 interrupts.                       
 698      =2  #define EIE1_ET3__ENABLED     0x80 ///< Enable interrupt requests generated by the TF3L or
 699      =2                                     ///< TF3H flags.                                       
 700      =2                                                                                            
 701      =2  //------------------------------------------------------------------------------
 702      =2  // EIE2 Enums (Extended Interrupt Enable 2 @ 0xE7)
 703      =2  //------------------------------------------------------------------------------
 704      =2  #define EIE2_EVBUS__BMASK    0x01 ///< VBUS Level Interrupt Enable                       
 705      =2  #define EIE2_EVBUS__SHIFT    0x00 ///< VBUS Level Interrupt Enable                       
 706      =2  #define EIE2_EVBUS__DISABLED 0x00 ///< Disable all VBUS interrupts.                      
 707      =2  #define EIE2_EVBUS__ENABLED  0x01 ///< Enable interrupt requests generated by VBUS level 
 708      =2                                    ///< sense.                                            
 709      =2                                                                                           
 710      =2  #define EIE2_ES1__BMASK      0x02 ///< UART1 Interrupt Enable                            
 711      =2  #define EIE2_ES1__SHIFT      0x01 ///< UART1 Interrupt Enable                            
 712      =2  #define EIE2_ES1__DISABLED   0x00 ///< Disable UART1 interrupt.                          
 713      =2  #define EIE2_ES1__ENABLED    0x02 ///< Enable UART1 interrupt.                           
 714      =2                                                                                           
 715      =2  #define EIE2_ESMB1__BMASK    0x08 ///< SMBus1 Interrupt Enable                           
 716      =2  #define EIE2_ESMB1__SHIFT    0x03 ///< SMBus1 Interrupt Enable                           
 717      =2  #define EIE2_ESMB1__DISABLED 0x00 ///< Disable all SMB1 interrupts.                      
 718      =2  #define EIE2_ESMB1__ENABLED  0x08 ///< Enable interrupt requests generated by SMB1.      
 719      =2                                                                                           
 720      =2  #define EIE2_ET4__BMASK      0x10 ///< Timer 4 Interrupt Enable                          
 721      =2  #define EIE2_ET4__SHIFT      0x04 ///< Timer 4 Interrupt Enable                          
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 31  

 722      =2  #define EIE2_ET4__DISABLED   0x00 ///< Disable Timer 4interrupts.                        
 723      =2  #define EIE2_ET4__ENABLED    0x10 ///< Enable interrupt requests generated by the TF4L or
 724      =2                                    ///< TF4H flags.                                       
 725      =2                                                                                           
 726      =2  #define EIE2_ET5__BMASK      0x20 ///< Timer 5 Interrupt Enable                          
 727      =2  #define EIE2_ET5__SHIFT      0x05 ///< Timer 5 Interrupt Enable                          
 728      =2  #define EIE2_ET5__DISABLED   0x00 ///< Disable Timer 5 interrupts.                       
 729      =2  #define EIE2_ET5__ENABLED    0x20 ///< Enable interrupt requests generated by the TF5L or
 730      =2                                    ///< TF5H flags.                                       
 731      =2                                                                                           
 732      =2  //------------------------------------------------------------------------------
 733      =2  // EIP1 Enums (Extended Interrupt Priority 1 @ 0xF6)
 734      =2  //------------------------------------------------------------------------------
 735      =2  #define EIP1_PSMB0__BMASK  0x01 ///< SMBus (SMB0) Interrupt Priority Control                     
 736      =2  #define EIP1_PSMB0__SHIFT  0x00 ///< SMBus (SMB0) Interrupt Priority Control                     
 737      =2  #define EIP1_PSMB0__LOW    0x00 ///< SMB0 interrupt set to low priority level.                   
 738      =2  #define EIP1_PSMB0__HIGH   0x01 ///< SMB0 interrupt set to high priority level.                  
 739      =2                                                                                                   
 740      =2  #define EIP1_PUSB0__BMASK  0x02 ///< USB (USB0) Interrupt Priority Control                       
 741      =2  #define EIP1_PUSB0__SHIFT  0x01 ///< USB (USB0) Interrupt Priority Control                       
 742      =2  #define EIP1_PUSB0__LOW    0x00 ///< USB0 interrupt set to low priority level.                   
 743      =2  #define EIP1_PUSB0__HIGH   0x02 ///< USB0 interrupt set to high priority level.                  
 744      =2                                                                                                   
 745      =2  #define EIP1_PWADC0__BMASK 0x04 ///< ADC0 Window Comparator Interrupt Priority Control           
 746      =2  #define EIP1_PWADC0__SHIFT 0x02 ///< ADC0 Window Comparator Interrupt Priority Control           
 747      =2  #define EIP1_PWADC0__LOW   0x00 ///< ADC0 Window interrupt set to low priority level.            
 748      =2  #define EIP1_PWADC0__HIGH  0x04 ///< ADC0 Window interrupt set to high priority level.           
 749      =2                                                                                                   
 750      =2  #define EIP1_PADC0__BMASK  0x08 ///< ADC0 Conversion Complete Interrupt Priority Control         
 751      =2  #define EIP1_PADC0__SHIFT  0x03 ///< ADC0 Conversion Complete Interrupt Priority Control         
 752      =2  #define EIP1_PADC0__LOW    0x00 ///< ADC0 Conversion Complete interrupt set to low               
 753      =2                                  ///< priority level.                                             
 754      =2  #define EIP1_PADC0__HIGH   0x08 ///< ADC0 Conversion Complete interrupt set to high              
 755      =2                                  ///< priority level.                                             
 756      =2                                                                                                   
 757      =2  #define EIP1_PPCA0__BMASK  0x10 ///< Programmable Counter Array (PCA0) Interrupt Priority Control
 758      =2  #define EIP1_PPCA0__SHIFT  0x04 ///< Programmable Counter Array (PCA0) Interrupt Priority Control
 759      =2  #define EIP1_PPCA0__LOW    0x00 ///< PCA0 interrupt set to low priority level.                   
 760      =2  #define EIP1_PPCA0__HIGH   0x10 ///< PCA0 interrupt set to high priority level.                  
 761      =2                                                                                                   
 762      =2  #define EIP1_PCP0__BMASK   0x20 ///< Comparator0 (CP0) Interrupt Priority Control                
 763      =2  #define EIP1_PCP0__SHIFT   0x05 ///< Comparator0 (CP0) Interrupt Priority Control                
 764      =2  #define EIP1_PCP0__LOW     0x00 ///< CP0 interrupt set to low priority level.                    
 765      =2  #define EIP1_PCP0__HIGH    0x20 ///< CP0 interrupt set to high priority level.                   
 766      =2                                                                                                   
 767      =2  #define EIP1_PCP1__BMASK   0x40 ///< Comparator1 (CP1) Interrupt Priority Control                
 768      =2  #define EIP1_PCP1__SHIFT   0x06 ///< Comparator1 (CP1) Interrupt Priority Control                
 769      =2  #define EIP1_PCP1__LOW     0x00 ///< CP1 interrupt set to low priority level.                    
 770      =2  #define EIP1_PCP1__HIGH    0x40 ///< CP1 interrupt set to high priority level.                   
 771      =2                                                                                                   
 772      =2  #define EIP1_PT3__BMASK    0x80 ///< Timer 3 Interrupt Priority Control                          
 773      =2  #define EIP1_PT3__SHIFT    0x07 ///< Timer 3 Interrupt Priority Control                          
 774      =2  #define EIP1_PT3__LOW      0x00 ///< Timer 3 interrupts set to low priority level.               
 775      =2  #define EIP1_PT3__HIGH     0x80 ///< Timer 3 interrupts set to high priority level.              
 776      =2                                                                                                   
 777      =2  //------------------------------------------------------------------------------
 778      =2  // EIP2 Enums (Extended Interrupt Priority 2 @ 0xF7)
 779      =2  //------------------------------------------------------------------------------
 780      =2  #define EIP2_PVBUS__BMASK 0x01 ///< VBUS Level Interrupt Priority Control        
 781      =2  #define EIP2_PVBUS__SHIFT 0x00 ///< VBUS Level Interrupt Priority Control        
 782      =2  #define EIP2_PVBUS__LOW   0x00 ///< VBUS interrupt set to low priority level.    
 783      =2  #define EIP2_PVBUS__HIGH  0x01 ///< VBUS interrupt set to high priority level.   
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 32  

 784      =2                                                                                   
 785      =2  #define EIP2_PS1__BMASK   0x02 ///< UART1 Interrupt Priority Control             
 786      =2  #define EIP2_PS1__SHIFT   0x01 ///< UART1 Interrupt Priority Control             
 787      =2  #define EIP2_PS1__LOW     0x00 ///< UART1 interrupt set to low priority level.   
 788      =2  #define EIP2_PS1__HIGH    0x02 ///< UART1 interrupt set to high priority level.  
 789      =2                                                                                   
 790      =2  #define EIP2_PSMB1__BMASK 0x08 ///< SMBus1 Interrupt Priority Control            
 791      =2  #define EIP2_PSMB1__SHIFT 0x03 ///< SMBus1 Interrupt Priority Control            
 792      =2  #define EIP2_PSMB1__LOW   0x00 ///< SMB1 interrupt set to low priority level.    
 793      =2  #define EIP2_PSMB1__HIGH  0x08 ///< SMB1 interrupt set to high priority level.   
 794      =2                                                                                   
 795      =2  #define EIP2_PT4__BMASK   0x10 ///< Timer 4 Interrupt Priority Control           
 796      =2  #define EIP2_PT4__SHIFT   0x04 ///< Timer 4 Interrupt Priority Control           
 797      =2  #define EIP2_PT4__LOW     0x00 ///< Timer 4 interrupt set to low priority level. 
 798      =2  #define EIP2_PT4__HIGH    0x10 ///< Timer 4 interrupt set to high priority level.
 799      =2                                                                                   
 800      =2  #define EIP2_PT5__BMASK   0x20 ///< Timer 5 Interrupt Priority Control           
 801      =2  #define EIP2_PT5__SHIFT   0x05 ///< Timer 5 Interrupt Priority Control           
 802      =2  #define EIP2_PT5__LOW     0x00 ///< Timer 5 interrupt set to low priority level. 
 803      =2  #define EIP2_PT5__HIGH    0x20 ///< Timer 5 interrupt set to high priority level.
 804      =2                                                                                   
 805      =2  //------------------------------------------------------------------------------
 806      =2  // IE Enums (Interrupt Enable @ 0xA8)
 807      =2  //------------------------------------------------------------------------------
 808      =2  #define IE_EX0__BMASK      0x01 ///< External Interrupt 0 Enable                       
 809      =2  #define IE_EX0__SHIFT      0x00 ///< External Interrupt 0 Enable                       
 810      =2  #define IE_EX0__DISABLED   0x00 ///< Disable external interrupt 0.                     
 811      =2  #define IE_EX0__ENABLED    0x01 ///< Enable interrupt requests generated by the INT0   
 812      =2                                  ///< input.                                            
 813      =2                                                                                         
 814      =2  #define IE_ET0__BMASK      0x02 ///< Timer 0 Interrupt Enable                          
 815      =2  #define IE_ET0__SHIFT      0x01 ///< Timer 0 Interrupt Enable                          
 816      =2  #define IE_ET0__DISABLED   0x00 ///< Disable all Timer 0 interrupt.                    
 817      =2  #define IE_ET0__ENABLED    0x02 ///< Enable interrupt requests generated by the TF0    
 818      =2                                  ///< flag.                                             
 819      =2                                                                                         
 820      =2  #define IE_EX1__BMASK      0x04 ///< External Interrupt 1 Enable                       
 821      =2  #define IE_EX1__SHIFT      0x02 ///< External Interrupt 1 Enable                       
 822      =2  #define IE_EX1__DISABLED   0x00 ///< Disable external interrupt 1.                     
 823      =2  #define IE_EX1__ENABLED    0x04 ///< Enable interrupt requests generated by the INT1   
 824      =2                                  ///< input.                                            
 825      =2                                                                                         
 826      =2  #define IE_ET1__BMASK      0x08 ///< Timer 1 Interrupt Enable                          
 827      =2  #define IE_ET1__SHIFT      0x03 ///< Timer 1 Interrupt Enable                          
 828      =2  #define IE_ET1__DISABLED   0x00 ///< Disable all Timer 1 interrupt.                    
 829      =2  #define IE_ET1__ENABLED    0x08 ///< Enable interrupt requests generated by the TF1    
 830      =2                                  ///< flag.                                             
 831      =2                                                                                         
 832      =2  #define IE_ES0__BMASK      0x10 ///< UART0 Interrupt Enable                            
 833      =2  #define IE_ES0__SHIFT      0x04 ///< UART0 Interrupt Enable                            
 834      =2  #define IE_ES0__DISABLED   0x00 ///< Disable UART0 interrupt.                          
 835      =2  #define IE_ES0__ENABLED    0x10 ///< Enable UART0 interrupt.                           
 836      =2                                                                                         
 837      =2  #define IE_ET2__BMASK      0x20 ///< Timer 2 Interrupt Enable                          
 838      =2  #define IE_ET2__SHIFT      0x05 ///< Timer 2 Interrupt Enable                          
 839      =2  #define IE_ET2__DISABLED   0x00 ///< Disable Timer 2 interrupt.                        
 840      =2  #define IE_ET2__ENABLED    0x20 ///< Enable interrupt requests generated by the TF2L or
 841      =2                                  ///< TF2H flags.                                       
 842      =2                                                                                         
 843      =2  #define IE_ESPI0__BMASK    0x40 ///< SPI0 Interrupt Enable                             
 844      =2  #define IE_ESPI0__SHIFT    0x06 ///< SPI0 Interrupt Enable                             
 845      =2  #define IE_ESPI0__DISABLED 0x00 ///< Disable all SPI0 interrupts.                      
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 33  

 846      =2  #define IE_ESPI0__ENABLED  0x40 ///< Enable interrupt requests generated by SPI0.      
 847      =2                                                                                         
 848      =2  #define IE_EA__BMASK       0x80 ///< All Interrupts Enable                             
 849      =2  #define IE_EA__SHIFT       0x07 ///< All Interrupts Enable                             
 850      =2  #define IE_EA__DISABLED    0x00 ///< Disable all interrupt sources.                    
 851      =2  #define IE_EA__ENABLED     0x80 ///< Enable each interrupt according to its individual 
 852      =2                                  ///< mask setting.                                     
 853      =2                                                                                         
 854      =2  //------------------------------------------------------------------------------
 855      =2  // IP Enums (Interrupt Priority @ 0xB8)
 856      =2  //------------------------------------------------------------------------------
 857      =2  #define IP_PX0__BMASK   0x01 ///< External Interrupt 0 Priority Control                        
 858      =2  #define IP_PX0__SHIFT   0x00 ///< External Interrupt 0 Priority Control                        
 859      =2  #define IP_PX0__LOW     0x00 ///< External Interrupt 0 set to low priority level.              
 860      =2  #define IP_PX0__HIGH    0x01 ///< External Interrupt 0 set to high priority level.             
 861      =2                                                                                                 
 862      =2  #define IP_PT0__BMASK   0x02 ///< Timer 0 Interrupt Priority Control                           
 863      =2  #define IP_PT0__SHIFT   0x01 ///< Timer 0 Interrupt Priority Control                           
 864      =2  #define IP_PT0__LOW     0x00 ///< Timer 0 interrupt set to low priority level.                 
 865      =2  #define IP_PT0__HIGH    0x02 ///< Timer 0 interrupt set to high priority level.                
 866      =2                                                                                                 
 867      =2  #define IP_PX1__BMASK   0x04 ///< External Interrupt 1 Priority Control                        
 868      =2  #define IP_PX1__SHIFT   0x02 ///< External Interrupt 1 Priority Control                        
 869      =2  #define IP_PX1__LOW     0x00 ///< External Interrupt 1 set to low priority level.              
 870      =2  #define IP_PX1__HIGH    0x04 ///< External Interrupt 1 set to high priority level.             
 871      =2                                                                                                 
 872      =2  #define IP_PT1__BMASK   0x08 ///< Timer 1 Interrupt Priority Control                           
 873      =2  #define IP_PT1__SHIFT   0x03 ///< Timer 1 Interrupt Priority Control                           
 874      =2  #define IP_PT1__LOW     0x00 ///< Timer 1 interrupt set to low priority level.                 
 875      =2  #define IP_PT1__HIGH    0x08 ///< Timer 1 interrupt set to high priority level.                
 876      =2                                                                                                 
 877      =2  #define IP_PS0__BMASK   0x10 ///< UART0 Interrupt Priority Control                             
 878      =2  #define IP_PS0__SHIFT   0x04 ///< UART0 Interrupt Priority Control                             
 879      =2  #define IP_PS0__LOW     0x00 ///< UART0 interrupt set to low priority level.                   
 880      =2  #define IP_PS0__HIGH    0x10 ///< UART0 interrupt set to high priority level.                  
 881      =2                                                                                                 
 882      =2  #define IP_PT2__BMASK   0x20 ///< Timer 2 Interrupt Priority Control                           
 883      =2  #define IP_PT2__SHIFT   0x05 ///< Timer 2 Interrupt Priority Control                           
 884      =2  #define IP_PT2__LOW     0x00 ///< Timer 2 interrupt set to low priority level.                 
 885      =2  #define IP_PT2__HIGH    0x20 ///< Timer 2 interrupt set to high priority level.                
 886      =2                                                                                                 
 887      =2  #define IP_PSPI0__BMASK 0x40 ///< Serial Peripheral Interface (SPI0) Interrupt Priority Control
 888      =2  #define IP_PSPI0__SHIFT 0x06 ///< Serial Peripheral Interface (SPI0) Interrupt Priority Control
 889      =2  #define IP_PSPI0__LOW   0x00 ///< SPI0 interrupt set to low priority level.                    
 890      =2  #define IP_PSPI0__HIGH  0x40 ///< SPI0 interrupt set to high priority level.                   
 891      =2                                                                                                 
 892      =2  //------------------------------------------------------------------------------
 893      =2  // LFO0CN Enums (Low Frequency Oscillator Control @ 0x86)
 894      =2  //------------------------------------------------------------------------------
 895      =2  #define LFO0CN_OSCLD__FMASK       0x03 ///< Internal L-F Oscillator Divider Select           
 896      =2  #define LFO0CN_OSCLD__SHIFT       0x00 ///< Internal L-F Oscillator Divider Select           
 897      =2  #define LFO0CN_OSCLD__DIVIDE_BY_8 0x00 ///< Divide by 8 selected.                            
 898      =2  #define LFO0CN_OSCLD__DIVIDE_BY_4 0x01 ///< Divide by 4 selected.                            
 899      =2  #define LFO0CN_OSCLD__DIVIDE_BY_2 0x02 ///< Divide by 2 selected.                            
 900      =2  #define LFO0CN_OSCLD__DIVIDE_BY_1 0x03 ///< Divide by 1 selected.                            
 901      =2                                                                                               
 902      =2  #define LFO0CN_OSCLF__FMASK       0x3C ///< Internal L-F Oscillator Frequency Control        
 903      =2  #define LFO0CN_OSCLF__SHIFT       0x02 ///< Internal L-F Oscillator Frequency Control        
 904      =2                                                                                               
 905      =2  #define LFO0CN_OSCLRDY__BMASK     0x40 ///< Internal L-F Oscillator Ready                    
 906      =2  #define LFO0CN_OSCLRDY__SHIFT     0x06 ///< Internal L-F Oscillator Ready                    
 907      =2  #define LFO0CN_OSCLRDY__NOT_SET   0x00 ///< Internal L-F Oscillator frequency not stabilized.
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 34  

 908      =2  #define LFO0CN_OSCLRDY__SET       0x40 ///< Internal L-F Oscillator frequency stabilized.    
 909      =2                                                                                               
 910      =2  #define LFO0CN_OSCLEN__BMASK      0x80 ///< Internal L-F Oscillator Enable                   
 911      =2  #define LFO0CN_OSCLEN__SHIFT      0x07 ///< Internal L-F Oscillator Enable                   
 912      =2  #define LFO0CN_OSCLEN__DISABLED   0x00 ///< Internal L-F Oscillator Disabled.                
 913      =2  #define LFO0CN_OSCLEN__ENABLED    0x80 ///< Internal L-F Oscillator Enabled.                 
 914      =2                                                                                               
 915      =2  //------------------------------------------------------------------------------
 916      =2  // XBR0 Enums (Port I/O Crossbar 0 @ 0xE1)
 917      =2  //------------------------------------------------------------------------------
 918      =2  #define XBR0_URT0E__BMASK     0x01 ///< UART0 I/O Output Enable                        
 919      =2  #define XBR0_URT0E__SHIFT     0x00 ///< UART0 I/O Output Enable                        
 920      =2  #define XBR0_URT0E__DISABLED  0x00 ///< UART0 I/O unavailable at Port pin.             
 921      =2  #define XBR0_URT0E__ENABLED   0x01 ///< UART0 TX, RX routed to Port pins P0.4 and P0.5.
 922      =2                                                                                         
 923      =2  #define XBR0_SPI0E__BMASK     0x02 ///< SPI I/O Enable                                 
 924      =2  #define XBR0_SPI0E__SHIFT     0x01 ///< SPI I/O Enable                                 
 925      =2  #define XBR0_SPI0E__DISABLED  0x00 ///< SPI I/O unavailable at Port pins.              
 926      =2  #define XBR0_SPI0E__ENABLED   0x02 ///< SPI I/O routed to Port pins. The SPI can be    
 927      =2                                     ///< assigned either 3 or 4 GPIO pins.              
 928      =2                                                                                         
 929      =2  #define XBR0_SMB0E__BMASK     0x04 ///< SMB0 I/O Enable                                
 930      =2  #define XBR0_SMB0E__SHIFT     0x02 ///< SMB0 I/O Enable                                
 931      =2  #define XBR0_SMB0E__DISABLED  0x00 ///< SMBus 0 I/O unavailable at Port pins.          
 932      =2  #define XBR0_SMB0E__ENABLED   0x04 ///< SMBus 0 I/O routed to Port pins.               
 933      =2                                                                                         
 934      =2  #define XBR0_SYSCKE__BMASK    0x08 ///< SYSCLK Output Enable                           
 935      =2  #define XBR0_SYSCKE__SHIFT    0x03 ///< SYSCLK Output Enable                           
 936      =2  #define XBR0_SYSCKE__DISABLED 0x00 ///< SYSCLK unavailable at Port pin.                
 937      =2  #define XBR0_SYSCKE__ENABLED  0x08 ///< SYSCLK output routed to Port pin.              
 938      =2                                                                                         
 939      =2  #define XBR0_CP0E__BMASK      0x10 ///< Comparator0 Output Enable                      
 940      =2  #define XBR0_CP0E__SHIFT      0x04 ///< Comparator0 Output Enable                      
 941      =2  #define XBR0_CP0E__DISABLED   0x00 ///< CP0 unavailable at Port pin.                   
 942      =2  #define XBR0_CP0E__ENABLED    0x10 ///< CP0 routed to Port pin.                        
 943      =2                                                                                         
 944      =2  #define XBR0_CP0AE__BMASK     0x20 ///< Comparator0 Asynchronous Output Enable         
 945      =2  #define XBR0_CP0AE__SHIFT     0x05 ///< Comparator0 Asynchronous Output Enable         
 946      =2  #define XBR0_CP0AE__DISABLED  0x00 ///< Asynchronous CP0 unavailable at Port pin.      
 947      =2  #define XBR0_CP0AE__ENABLED   0x20 ///< Asynchronous CP0 routed to Port pin.           
 948      =2                                                                                         
 949      =2  #define XBR0_CP1E__BMASK      0x40 ///< Comparator1 Output Enable                      
 950      =2  #define XBR0_CP1E__SHIFT      0x06 ///< Comparator1 Output Enable                      
 951      =2  #define XBR0_CP1E__DISABLED   0x00 ///< CP1 unavailable at Port pin.                   
 952      =2  #define XBR0_CP1E__ENABLED    0x40 ///< CP1 routed to Port pin.                        
 953      =2                                                                                         
 954      =2  #define XBR0_CP1AE__BMASK     0x80 ///< Comparator1 Asynchronous Output Enable         
 955      =2  #define XBR0_CP1AE__SHIFT     0x07 ///< Comparator1 Asynchronous Output Enable         
 956      =2  #define XBR0_CP1AE__DISABLED  0x00 ///< Asynchronous CP1 unavailable at Port pin.      
 957      =2  #define XBR0_CP1AE__ENABLED   0x80 ///< Asynchronous CP1 routed to Port pin.           
 958      =2                                                                                         
 959      =2  //------------------------------------------------------------------------------
 960      =2  // XBR1 Enums (Port I/O Crossbar 1 @ 0xE2)
 961      =2  //------------------------------------------------------------------------------
 962      =2  #define XBR1_PCA0ME__FMASK                    0x07 ///< PCA Module I/O Enable                            
 963      =2  #define XBR1_PCA0ME__SHIFT                    0x00 ///< PCA Module I/O Enable                            
 964      =2  #define XBR1_PCA0ME__DISABLED                 0x00 ///< All PCA I/O unavailable at Port pins.            
 965      =2  #define XBR1_PCA0ME__CEX0                     0x01 ///< CEX0 routed to Port pin.                         
 966      =2  #define XBR1_PCA0ME__CEX0_CEX1                0x02 ///< CEX0, CEX1 routed to Port pins.                  
 967      =2  #define XBR1_PCA0ME__CEX0_CEX1_CEX2           0x03 ///< CEX0, CEX1, CEX2 routed to Port pins.            
 968      =2  #define XBR1_PCA0ME__CEX0_CEX1_CEX2_CEX3      0x04 ///< CEX0, CEX1, CEX2, CEX3 routed to Port pins.      
 969      =2  #define XBR1_PCA0ME__CEX0_CEX1_CEX2_CEX3_CEX4 0x05 ///< CEX0, CEX1, CEX2, CEX3, CEX4 routed to Port pins.
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 35  

 970      =2                                                                                                           
 971      =2  #define XBR1_ECIE__BMASK                      0x08 ///< PCA0 External Counter Input Enable               
 972      =2  #define XBR1_ECIE__SHIFT                      0x03 ///< PCA0 External Counter Input Enable               
 973      =2  #define XBR1_ECIE__DISABLED                   0x00 ///< ECI unavailable at Port pin.                     
 974      =2  #define XBR1_ECIE__ENABLED                    0x08 ///< ECI routed to Port pin.                          
 975      =2                                                                                                           
 976      =2  #define XBR1_T0E__BMASK                       0x10 ///< T0 Enable                                        
 977      =2  #define XBR1_T0E__SHIFT                       0x04 ///< T0 Enable                                        
 978      =2  #define XBR1_T0E__DISABLED                    0x00 ///< T0 unavailable at Port pin.                      
 979      =2  #define XBR1_T0E__ENABLED                     0x10 ///< T0 routed to Port pin.                           
 980      =2                                                                                                           
 981      =2  #define XBR1_T1E__BMASK                       0x20 ///< T1 Enable                                        
 982      =2  #define XBR1_T1E__SHIFT                       0x05 ///< T1 Enable                                        
 983      =2  #define XBR1_T1E__DISABLED                    0x00 ///< T1 unavailable at Port pin.                      
 984      =2  #define XBR1_T1E__ENABLED                     0x20 ///< T1 routed to Port pin.                           
 985      =2                                                                                                           
 986      =2  #define XBR1_XBARE__BMASK                     0x40 ///< Crossbar Enable                                  
 987      =2  #define XBR1_XBARE__SHIFT                     0x06 ///< Crossbar Enable                                  
 988      =2  #define XBR1_XBARE__DISABLED                  0x00 ///< Crossbar disabled.                               
 989      =2  #define XBR1_XBARE__ENABLED                   0x40 ///< Crossbar enabled.                                
 990      =2                                                                                                           
 991      =2  #define XBR1_WEAKPUD__BMASK                   0x80 ///< Port I/O Weak Pullup Disable                     
 992      =2  #define XBR1_WEAKPUD__SHIFT                   0x07 ///< Port I/O Weak Pullup Disable                     
 993      =2  #define XBR1_WEAKPUD__PULL_UPS_ENABLED        0x00 ///< Weak Pullups enabled (except for Ports whose I/O 
 994      =2                                                     ///< are configured for analog mode).                 
 995      =2  #define XBR1_WEAKPUD__PULL_UPS_DISABLED       0x80 ///< Weak Pullups disabled.                           
 996      =2                                                                                                           
 997      =2  //------------------------------------------------------------------------------
 998      =2  // XBR2 Enums (Port I/O Crossbar 2 @ 0xE3)
 999      =2  //------------------------------------------------------------------------------
1000      =2  #define XBR2_URT1E__BMASK    0x01 ///< UART1 I/O Output Enable             
1001      =2  #define XBR2_URT1E__SHIFT    0x00 ///< UART1 I/O Output Enable             
1002      =2  #define XBR2_URT1E__DISABLED 0x00 ///< UART1 I/O unavailable at Port pin.  
1003      =2  #define XBR2_URT1E__ENABLED  0x01 ///< UART1 TX, RX routed to Port pins.   
1004      =2                                                                             
1005      =2  #define XBR2_SMB1E__BMASK    0x02 ///< SMBus1 I/O Enable                   
1006      =2  #define XBR2_SMB1E__SHIFT    0x01 ///< SMBus1 I/O Enable                   
1007      =2  #define XBR2_SMB1E__DISABLED 0x00 ///< SMBus1 I/O unavailable at Port pins.
1008      =2  #define XBR2_SMB1E__ENABLED  0x02 ///< SMBus1 I/O routed to Port pins.     
1009      =2                                                                             
1010      =2  //------------------------------------------------------------------------------
1011      =2  // PCA0CPH0 Enums (PCA Channel 0 Capture Module High Byte @ 0xFC)
1012      =2  //------------------------------------------------------------------------------
1013      =2  #define PCA0CPH0_PCA0CPH0__FMASK 0xFF ///< PCA Channel 0 Capture Module High Byte
1014      =2  #define PCA0CPH0_PCA0CPH0__SHIFT 0x00 ///< PCA Channel 0 Capture Module High Byte
1015      =2                                                                                   
1016      =2  //------------------------------------------------------------------------------
1017      =2  // PCA0CPL0 Enums (PCA Channel 0 Capture Module Low Byte @ 0xFB)
1018      =2  //------------------------------------------------------------------------------
1019      =2  #define PCA0CPL0_PCA0CPL0__FMASK 0xFF ///< PCA Channel 0 Capture Module Low Byte
1020      =2  #define PCA0CPL0_PCA0CPL0__SHIFT 0x00 ///< PCA Channel 0 Capture Module Low Byte
1021      =2                                                                                  
1022      =2  //------------------------------------------------------------------------------
1023      =2  // PCA0CPM0 Enums (PCA Channel 0 Capture/Compare Mode @ 0xDA)
1024      =2  //------------------------------------------------------------------------------
1025      =2  #define PCA0CPM0_ECCF__BMASK    0x01 ///< Channel 0 Capture/Compare Flag Interrupt Enable
1026      =2  #define PCA0CPM0_ECCF__SHIFT    0x00 ///< Channel 0 Capture/Compare Flag Interrupt Enable
1027      =2  #define PCA0CPM0_ECCF__DISABLED 0x00 ///< Disable CCF0 interrupts.                       
1028      =2  #define PCA0CPM0_ECCF__ENABLED  0x01 ///< Enable a Capture/Compare Flag interrupt request
1029      =2                                       ///< when CCF0 is set.                              
1030      =2                                                                                           
1031      =2  #define PCA0CPM0_PWM__BMASK     0x02 ///< Channel 0 Pulse Width Modulation Mode Enable   
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 36  

1032      =2  #define PCA0CPM0_PWM__SHIFT     0x01 ///< Channel 0 Pulse Width Modulation Mode Enable   
1033      =2  #define PCA0CPM0_PWM__DISABLED  0x00 ///< Disable PWM function.                          
1034      =2  #define PCA0CPM0_PWM__ENABLED   0x02 ///< Enable PWM function.                           
1035      =2                                                                                           
1036      =2  #define PCA0CPM0_TOG__BMASK     0x04 ///< Channel 0 Toggle Function Enable               
1037      =2  #define PCA0CPM0_TOG__SHIFT     0x02 ///< Channel 0 Toggle Function Enable               
1038      =2  #define PCA0CPM0_TOG__DISABLED  0x00 ///< Disable toggle function.                       
1039      =2  #define PCA0CPM0_TOG__ENABLED   0x04 ///< Enable toggle function.                        
1040      =2                                                                                           
1041      =2  #define PCA0CPM0_MAT__BMASK     0x08 ///< Channel 0 Match Function Enable                
1042      =2  #define PCA0CPM0_MAT__SHIFT     0x03 ///< Channel 0 Match Function Enable                
1043      =2  #define PCA0CPM0_MAT__DISABLED  0x00 ///< Disable match function.                        
1044      =2  #define PCA0CPM0_MAT__ENABLED   0x08 ///< Enable match function.                         
1045      =2                                                                                           
1046      =2  #define PCA0CPM0_CAPN__BMASK    0x10 ///< Channel 0 Capture Negative Function Enable     
1047      =2  #define PCA0CPM0_CAPN__SHIFT    0x04 ///< Channel 0 Capture Negative Function Enable     
1048      =2  #define PCA0CPM0_CAPN__DISABLED 0x00 ///< Disable negative edge capture.                 
1049      =2  #define PCA0CPM0_CAPN__ENABLED  0x10 ///< Enable negative edge capture.                  
1050      =2                                                                                           
1051      =2  #define PCA0CPM0_CAPP__BMASK    0x20 ///< Channel 0 Capture Positive Function Enable     
1052      =2  #define PCA0CPM0_CAPP__SHIFT    0x05 ///< Channel 0 Capture Positive Function Enable     
1053      =2  #define PCA0CPM0_CAPP__DISABLED 0x00 ///< Disable positive edge capture.                 
1054      =2  #define PCA0CPM0_CAPP__ENABLED  0x20 ///< Enable positive edge capture.                  
1055      =2                                                                                           
1056      =2  #define PCA0CPM0_ECOM__BMASK    0x40 ///< Channel 0 Comparator Function Enable           
1057      =2  #define PCA0CPM0_ECOM__SHIFT    0x06 ///< Channel 0 Comparator Function Enable           
1058      =2  #define PCA0CPM0_ECOM__DISABLED 0x00 ///< Disable comparator function.                   
1059      =2  #define PCA0CPM0_ECOM__ENABLED  0x40 ///< Enable comparator function.                    
1060      =2                                                                                           
1061      =2  #define PCA0CPM0_PWM16__BMASK   0x80 ///< Channel 0 16-bit Pulse Width Modulation Enable 
1062      =2  #define PCA0CPM0_PWM16__SHIFT   0x07 ///< Channel 0 16-bit Pulse Width Modulation Enable 
1063      =2  #define PCA0CPM0_PWM16__8_BIT   0x00 ///< 8-bit PWM selected.                            
1064      =2  #define PCA0CPM0_PWM16__16_BIT  0x80 ///< 16-bit PWM selected.                           
1065      =2                                                                                           
1066      =2  //------------------------------------------------------------------------------
1067      =2  // PCA0CPH1 Enums (PCA Channel 1 Capture Module High Byte @ 0xEA)
1068      =2  //------------------------------------------------------------------------------
1069      =2  #define PCA0CPH1_PCA0CPH1__FMASK 0xFF ///< PCA Channel 1 Capture Module High Byte
1070      =2  #define PCA0CPH1_PCA0CPH1__SHIFT 0x00 ///< PCA Channel 1 Capture Module High Byte
1071      =2                                                                                   
1072      =2  //------------------------------------------------------------------------------
1073      =2  // PCA0CPL1 Enums (PCA Channel 1 Capture Module Low Byte @ 0xE9)
1074      =2  //------------------------------------------------------------------------------
1075      =2  #define PCA0CPL1_PCA0CPL1__FMASK 0xFF ///< PCA Channel 1 Capture Module Low Byte
1076      =2  #define PCA0CPL1_PCA0CPL1__SHIFT 0x00 ///< PCA Channel 1 Capture Module Low Byte
1077      =2                                                                                  
1078      =2  //------------------------------------------------------------------------------
1079      =2  // PCA0CPM1 Enums (PCA Channel 1 Capture/Compare Mode @ 0xDB)
1080      =2  //------------------------------------------------------------------------------
1081      =2  #define PCA0CPM1_ECCF__BMASK    0x01 ///< Channel 1 Capture/Compare Flag Interrupt Enable
1082      =2  #define PCA0CPM1_ECCF__SHIFT    0x00 ///< Channel 1 Capture/Compare Flag Interrupt Enable
1083      =2  #define PCA0CPM1_ECCF__DISABLED 0x00 ///< Disable CCF1 interrupts.                       
1084      =2  #define PCA0CPM1_ECCF__ENABLED  0x01 ///< Enable a Capture/Compare Flag interrupt request
1085      =2                                       ///< when CCF1 is set.                              
1086      =2                                                                                           
1087      =2  #define PCA0CPM1_PWM__BMASK     0x02 ///< Channel 1 Pulse Width Modulation Mode Enable   
1088      =2  #define PCA0CPM1_PWM__SHIFT     0x01 ///< Channel 1 Pulse Width Modulation Mode Enable   
1089      =2  #define PCA0CPM1_PWM__DISABLED  0x00 ///< Disable PWM function.                          
1090      =2  #define PCA0CPM1_PWM__ENABLED   0x02 ///< Enable PWM function.                           
1091      =2                                                                                           
1092      =2  #define PCA0CPM1_TOG__BMASK     0x04 ///< Channel 1 Toggle Function Enable               
1093      =2  #define PCA0CPM1_TOG__SHIFT     0x02 ///< Channel 1 Toggle Function Enable               
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 37  

1094      =2  #define PCA0CPM1_TOG__DISABLED  0x00 ///< Disable toggle function.                       
1095      =2  #define PCA0CPM1_TOG__ENABLED   0x04 ///< Enable toggle function.                        
1096      =2                                                                                           
1097      =2  #define PCA0CPM1_MAT__BMASK     0x08 ///< Channel 1 Match Function Enable                
1098      =2  #define PCA0CPM1_MAT__SHIFT     0x03 ///< Channel 1 Match Function Enable                
1099      =2  #define PCA0CPM1_MAT__DISABLED  0x00 ///< Disable match function.                        
1100      =2  #define PCA0CPM1_MAT__ENABLED   0x08 ///< Enable match function.                         
1101      =2                                                                                           
1102      =2  #define PCA0CPM1_CAPN__BMASK    0x10 ///< Channel 1 Capture Negative Function Enable     
1103      =2  #define PCA0CPM1_CAPN__SHIFT    0x04 ///< Channel 1 Capture Negative Function Enable     
1104      =2  #define PCA0CPM1_CAPN__DISABLED 0x00 ///< Disable negative edge capture.                 
1105      =2  #define PCA0CPM1_CAPN__ENABLED  0x10 ///< Enable negative edge capture.                  
1106      =2                                                                                           
1107      =2  #define PCA0CPM1_CAPP__BMASK    0x20 ///< Channel 1 Capture Positive Function Enable     
1108      =2  #define PCA0CPM1_CAPP__SHIFT    0x05 ///< Channel 1 Capture Positive Function Enable     
1109      =2  #define PCA0CPM1_CAPP__DISABLED 0x00 ///< Disable positive edge capture.                 
1110      =2  #define PCA0CPM1_CAPP__ENABLED  0x20 ///< Enable positive edge capture.                  
1111      =2                                                                                           
1112      =2  #define PCA0CPM1_ECOM__BMASK    0x40 ///< Channel 1 Comparator Function Enable           
1113      =2  #define PCA0CPM1_ECOM__SHIFT    0x06 ///< Channel 1 Comparator Function Enable           
1114      =2  #define PCA0CPM1_ECOM__DISABLED 0x00 ///< Disable comparator function.                   
1115      =2  #define PCA0CPM1_ECOM__ENABLED  0x40 ///< Enable comparator function.                    
1116      =2                                                                                           
1117      =2  #define PCA0CPM1_PWM16__BMASK   0x80 ///< Channel 1 16-bit Pulse Width Modulation Enable 
1118      =2  #define PCA0CPM1_PWM16__SHIFT   0x07 ///< Channel 1 16-bit Pulse Width Modulation Enable 
1119      =2  #define PCA0CPM1_PWM16__8_BIT   0x00 ///< 8-bit PWM selected.                            
1120      =2  #define PCA0CPM1_PWM16__16_BIT  0x80 ///< 16-bit PWM selected.                           
1121      =2                                                                                           
1122      =2  //------------------------------------------------------------------------------
1123      =2  // PCA0CPH2 Enums (PCA Channel 2 Capture Module High Byte @ 0xEC)
1124      =2  //------------------------------------------------------------------------------
1125      =2  #define PCA0CPH2_PCA0CPH2__FMASK 0xFF ///< PCA Channel 2 Capture Module High Byte
1126      =2  #define PCA0CPH2_PCA0CPH2__SHIFT 0x00 ///< PCA Channel 2 Capture Module High Byte
1127      =2                                                                                   
1128      =2  //------------------------------------------------------------------------------
1129      =2  // PCA0CPL2 Enums (PCA Channel 2 Capture Module Low Byte @ 0xEB)
1130      =2  //------------------------------------------------------------------------------
1131      =2  #define PCA0CPL2_PCA0CPL2__FMASK 0xFF ///< PCA Channel 2 Capture Module Low Byte
1132      =2  #define PCA0CPL2_PCA0CPL2__SHIFT 0x00 ///< PCA Channel 2 Capture Module Low Byte
1133      =2                                                                                  
1134      =2  //------------------------------------------------------------------------------
1135      =2  // PCA0CPM2 Enums (PCA Channel 2 Capture/Compare Mode @ 0xDC)
1136      =2  //------------------------------------------------------------------------------
1137      =2  #define PCA0CPM2_ECCF__BMASK    0x01 ///< Channel 2 Capture/Compare Flag Interrupt Enable
1138      =2  #define PCA0CPM2_ECCF__SHIFT    0x00 ///< Channel 2 Capture/Compare Flag Interrupt Enable
1139      =2  #define PCA0CPM2_ECCF__DISABLED 0x00 ///< Disable CCF2 interrupts.                       
1140      =2  #define PCA0CPM2_ECCF__ENABLED  0x01 ///< Enable a Capture/Compare Flag interrupt request
1141      =2                                       ///< when CCF2 is set.                              
1142      =2                                                                                           
1143      =2  #define PCA0CPM2_PWM__BMASK     0x02 ///< Channel 2 Pulse Width Modulation Mode Enable   
1144      =2  #define PCA0CPM2_PWM__SHIFT     0x01 ///< Channel 2 Pulse Width Modulation Mode Enable   
1145      =2  #define PCA0CPM2_PWM__DISABLED  0x00 ///< Disable PWM function.                          
1146      =2  #define PCA0CPM2_PWM__ENABLED   0x02 ///< Enable PWM function.                           
1147      =2                                                                                           
1148      =2  #define PCA0CPM2_TOG__BMASK     0x04 ///< Channel 2 Toggle Function Enable               
1149      =2  #define PCA0CPM2_TOG__SHIFT     0x02 ///< Channel 2 Toggle Function Enable               
1150      =2  #define PCA0CPM2_TOG__DISABLED  0x00 ///< Disable toggle function.                       
1151      =2  #define PCA0CPM2_TOG__ENABLED   0x04 ///< Enable toggle function.                        
1152      =2                                                                                           
1153      =2  #define PCA0CPM2_MAT__BMASK     0x08 ///< Channel 2 Match Function Enable                
1154      =2  #define PCA0CPM2_MAT__SHIFT     0x03 ///< Channel 2 Match Function Enable                
1155      =2  #define PCA0CPM2_MAT__DISABLED  0x00 ///< Disable match function.                        
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 38  

1156      =2  #define PCA0CPM2_MAT__ENABLED   0x08 ///< Enable match function.                         
1157      =2                                                                                           
1158      =2  #define PCA0CPM2_CAPN__BMASK    0x10 ///< Channel 2 Capture Negative Function Enable     
1159      =2  #define PCA0CPM2_CAPN__SHIFT    0x04 ///< Channel 2 Capture Negative Function Enable     
1160      =2  #define PCA0CPM2_CAPN__DISABLED 0x00 ///< Disable negative edge capture.                 
1161      =2  #define PCA0CPM2_CAPN__ENABLED  0x10 ///< Enable negative edge capture.                  
1162      =2                                                                                           
1163      =2  #define PCA0CPM2_CAPP__BMASK    0x20 ///< Channel 2 Capture Positive Function Enable     
1164      =2  #define PCA0CPM2_CAPP__SHIFT    0x05 ///< Channel 2 Capture Positive Function Enable     
1165      =2  #define PCA0CPM2_CAPP__DISABLED 0x00 ///< Disable positive edge capture.                 
1166      =2  #define PCA0CPM2_CAPP__ENABLED  0x20 ///< Enable positive edge capture.                  
1167      =2                                                                                           
1168      =2  #define PCA0CPM2_ECOM__BMASK    0x40 ///< Channel 2 Comparator Function Enable           
1169      =2  #define PCA0CPM2_ECOM__SHIFT    0x06 ///< Channel 2 Comparator Function Enable           
1170      =2  #define PCA0CPM2_ECOM__DISABLED 0x00 ///< Disable comparator function.                   
1171      =2  #define PCA0CPM2_ECOM__ENABLED  0x40 ///< Enable comparator function.                    
1172      =2                                                                                           
1173      =2  #define PCA0CPM2_PWM16__BMASK   0x80 ///< Channel 2 16-bit Pulse Width Modulation Enable 
1174      =2  #define PCA0CPM2_PWM16__SHIFT   0x07 ///< Channel 2 16-bit Pulse Width Modulation Enable 
1175      =2  #define PCA0CPM2_PWM16__8_BIT   0x00 ///< 8-bit PWM selected.                            
1176      =2  #define PCA0CPM2_PWM16__16_BIT  0x80 ///< 16-bit PWM selected.                           
1177      =2                                                                                           
1178      =2  //------------------------------------------------------------------------------
1179      =2  // PCA0CPH3 Enums (PCA Channel 3 Capture Module High Byte @ 0xEE)
1180      =2  //------------------------------------------------------------------------------
1181      =2  #define PCA0CPH3_PCA0CPH3__FMASK 0xFF ///< PCA Channel 3 Capture Module High Byte
1182      =2  #define PCA0CPH3_PCA0CPH3__SHIFT 0x00 ///< PCA Channel 3 Capture Module High Byte
1183      =2                                                                                   
1184      =2  //------------------------------------------------------------------------------
1185      =2  // PCA0CPL3 Enums (PCA Channel 3 Capture Module Low Byte @ 0xED)
1186      =2  //------------------------------------------------------------------------------
1187      =2  #define PCA0CPL3_PCA0CPL3__FMASK 0xFF ///< PCA Channel 3 Capture Module Low Byte
1188      =2  #define PCA0CPL3_PCA0CPL3__SHIFT 0x00 ///< PCA Channel 3 Capture Module Low Byte
1189      =2                                                                                  
1190      =2  //------------------------------------------------------------------------------
1191      =2  // PCA0CPM3 Enums (PCA Channel 3 Capture/Compare Mode @ 0xDD)
1192      =2  //------------------------------------------------------------------------------
1193      =2  #define PCA0CPM3_ECCF__BMASK    0x01 ///< Channel 3 Capture/Compare Flag Interrupt Enable
1194      =2  #define PCA0CPM3_ECCF__SHIFT    0x00 ///< Channel 3 Capture/Compare Flag Interrupt Enable
1195      =2  #define PCA0CPM3_ECCF__DISABLED 0x00 ///< Disable CCF3 interrupts.                       
1196      =2  #define PCA0CPM3_ECCF__ENABLED  0x01 ///< Enable a Capture/Compare Flag interrupt request
1197      =2                                       ///< when CCF3 is set.                              
1198      =2                                                                                           
1199      =2  #define PCA0CPM3_PWM__BMASK     0x02 ///< Channel 3 Pulse Width Modulation Mode Enable   
1200      =2  #define PCA0CPM3_PWM__SHIFT     0x01 ///< Channel 3 Pulse Width Modulation Mode Enable   
1201      =2  #define PCA0CPM3_PWM__DISABLED  0x00 ///< Disable PWM function.                          
1202      =2  #define PCA0CPM3_PWM__ENABLED   0x02 ///< Enable PWM function.                           
1203      =2                                                                                           
1204      =2  #define PCA0CPM3_TOG__BMASK     0x04 ///< Channel 3 Toggle Function Enable               
1205      =2  #define PCA0CPM3_TOG__SHIFT     0x02 ///< Channel 3 Toggle Function Enable               
1206      =2  #define PCA0CPM3_TOG__DISABLED  0x00 ///< Disable toggle function.                       
1207      =2  #define PCA0CPM3_TOG__ENABLED   0x04 ///< Enable toggle function.                        
1208      =2                                                                                           
1209      =2  #define PCA0CPM3_MAT__BMASK     0x08 ///< Channel 3 Match Function Enable                
1210      =2  #define PCA0CPM3_MAT__SHIFT     0x03 ///< Channel 3 Match Function Enable                
1211      =2  #define PCA0CPM3_MAT__DISABLED  0x00 ///< Disable match function.                        
1212      =2  #define PCA0CPM3_MAT__ENABLED   0x08 ///< Enable match function.                         
1213      =2                                                                                           
1214      =2  #define PCA0CPM3_CAPN__BMASK    0x10 ///< Channel 3 Capture Negative Function Enable     
1215      =2  #define PCA0CPM3_CAPN__SHIFT    0x04 ///< Channel 3 Capture Negative Function Enable     
1216      =2  #define PCA0CPM3_CAPN__DISABLED 0x00 ///< Disable negative edge capture.                 
1217      =2  #define PCA0CPM3_CAPN__ENABLED  0x10 ///< Enable negative edge capture.                  
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 39  

1218      =2                                                                                           
1219      =2  #define PCA0CPM3_CAPP__BMASK    0x20 ///< Channel 3 Capture Positive Function Enable     
1220      =2  #define PCA0CPM3_CAPP__SHIFT    0x05 ///< Channel 3 Capture Positive Function Enable     
1221      =2  #define PCA0CPM3_CAPP__DISABLED 0x00 ///< Disable positive edge capture.                 
1222      =2  #define PCA0CPM3_CAPP__ENABLED  0x20 ///< Enable positive edge capture.                  
1223      =2                                                                                           
1224      =2  #define PCA0CPM3_ECOM__BMASK    0x40 ///< Channel 3 Comparator Function Enable           
1225      =2  #define PCA0CPM3_ECOM__SHIFT    0x06 ///< Channel 3 Comparator Function Enable           
1226      =2  #define PCA0CPM3_ECOM__DISABLED 0x00 ///< Disable comparator function.                   
1227      =2  #define PCA0CPM3_ECOM__ENABLED  0x40 ///< Enable comparator function.                    
1228      =2                                                                                           
1229      =2  #define PCA0CPM3_PWM16__BMASK   0x80 ///< Channel 3 16-bit Pulse Width Modulation Enable 
1230      =2  #define PCA0CPM3_PWM16__SHIFT   0x07 ///< Channel 3 16-bit Pulse Width Modulation Enable 
1231      =2  #define PCA0CPM3_PWM16__8_BIT   0x00 ///< 8-bit PWM selected.                            
1232      =2  #define PCA0CPM3_PWM16__16_BIT  0x80 ///< 16-bit PWM selected.                           
1233      =2                                                                                           
1234      =2  //------------------------------------------------------------------------------
1235      =2  // PCA0CPH4 Enums (PCA Channel 4 Capture Module High Byte @ 0xFE)
1236      =2  //------------------------------------------------------------------------------
1237      =2  #define PCA0CPH4_PCA0CPH4__FMASK 0xFF ///< PCA Channel 4 Capture Module High Byte
1238      =2  #define PCA0CPH4_PCA0CPH4__SHIFT 0x00 ///< PCA Channel 4 Capture Module High Byte
1239      =2                                                                                   
1240      =2  //------------------------------------------------------------------------------
1241      =2  // PCA0CPL4 Enums (PCA Channel 4 Capture Module Low Byte @ 0xFD)
1242      =2  //------------------------------------------------------------------------------
1243      =2  #define PCA0CPL4_PCA0CPL4__FMASK 0xFF ///< PCA Channel 4 Capture Module Low Byte
1244      =2  #define PCA0CPL4_PCA0CPL4__SHIFT 0x00 ///< PCA Channel 4 Capture Module Low Byte
1245      =2                                                                                  
1246      =2  //------------------------------------------------------------------------------
1247      =2  // PCA0CPM4 Enums (PCA Channel 4 Capture/Compare Mode @ 0xDE)
1248      =2  //------------------------------------------------------------------------------
1249      =2  #define PCA0CPM4_ECCF__BMASK    0x01 ///< Channel 4 Capture/Compare Flag Interrupt Enable
1250      =2  #define PCA0CPM4_ECCF__SHIFT    0x00 ///< Channel 4 Capture/Compare Flag Interrupt Enable
1251      =2  #define PCA0CPM4_ECCF__DISABLED 0x00 ///< Disable CCF4 interrupts.                       
1252      =2  #define PCA0CPM4_ECCF__ENABLED  0x01 ///< Enable a Capture/Compare Flag interrupt request
1253      =2                                       ///< when CCF4 is set.                              
1254      =2                                                                                           
1255      =2  #define PCA0CPM4_PWM__BMASK     0x02 ///< Channel 4 Pulse Width Modulation Mode Enable   
1256      =2  #define PCA0CPM4_PWM__SHIFT     0x01 ///< Channel 4 Pulse Width Modulation Mode Enable   
1257      =2  #define PCA0CPM4_PWM__DISABLED  0x00 ///< Disable PWM function.                          
1258      =2  #define PCA0CPM4_PWM__ENABLED   0x02 ///< Enable PWM function.                           
1259      =2                                                                                           
1260      =2  #define PCA0CPM4_TOG__BMASK     0x04 ///< Channel 4 Toggle Function Enable               
1261      =2  #define PCA0CPM4_TOG__SHIFT     0x02 ///< Channel 4 Toggle Function Enable               
1262      =2  #define PCA0CPM4_TOG__DISABLED  0x00 ///< Disable toggle function.                       
1263      =2  #define PCA0CPM4_TOG__ENABLED   0x04 ///< Enable toggle function.                        
1264      =2                                                                                           
1265      =2  #define PCA0CPM4_MAT__BMASK     0x08 ///< Channel 4 Match Function Enable                
1266      =2  #define PCA0CPM4_MAT__SHIFT     0x03 ///< Channel 4 Match Function Enable                
1267      =2  #define PCA0CPM4_MAT__DISABLED  0x00 ///< Disable match function.                        
1268      =2  #define PCA0CPM4_MAT__ENABLED   0x08 ///< Enable match function.                         
1269      =2                                                                                           
1270      =2  #define PCA0CPM4_CAPN__BMASK    0x10 ///< Channel 4 Capture Negative Function Enable     
1271      =2  #define PCA0CPM4_CAPN__SHIFT    0x04 ///< Channel 4 Capture Negative Function Enable     
1272      =2  #define PCA0CPM4_CAPN__DISABLED 0x00 ///< Disable negative edge capture.                 
1273      =2  #define PCA0CPM4_CAPN__ENABLED  0x10 ///< Enable negative edge capture.                  
1274      =2                                                                                           
1275      =2  #define PCA0CPM4_CAPP__BMASK    0x20 ///< Channel 4 Capture Positive Function Enable     
1276      =2  #define PCA0CPM4_CAPP__SHIFT    0x05 ///< Channel 4 Capture Positive Function Enable     
1277      =2  #define PCA0CPM4_CAPP__DISABLED 0x00 ///< Disable positive edge capture.                 
1278      =2  #define PCA0CPM4_CAPP__ENABLED  0x20 ///< Enable positive edge capture.                  
1279      =2                                                                                           
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 40  

1280      =2  #define PCA0CPM4_ECOM__BMASK    0x40 ///< Channel 4 Comparator Function Enable           
1281      =2  #define PCA0CPM4_ECOM__SHIFT    0x06 ///< Channel 4 Comparator Function Enable           
1282      =2  #define PCA0CPM4_ECOM__DISABLED 0x00 ///< Disable comparator function.                   
1283      =2  #define PCA0CPM4_ECOM__ENABLED  0x40 ///< Enable comparator function.                    
1284      =2                                                                                           
1285      =2  #define PCA0CPM4_PWM16__BMASK   0x80 ///< Channel 4 16-bit Pulse Width Modulation Enable 
1286      =2  #define PCA0CPM4_PWM16__SHIFT   0x07 ///< Channel 4 16-bit Pulse Width Modulation Enable 
1287      =2  #define PCA0CPM4_PWM16__8_BIT   0x00 ///< 8-bit PWM selected.                            
1288      =2  #define PCA0CPM4_PWM16__16_BIT  0x80 ///< 16-bit PWM selected.                           
1289      =2                                                                                           
1290      =2  //------------------------------------------------------------------------------
1291      =2  // PCA0CN0 Enums (PCA Control 0 @ 0xD8)
1292      =2  //------------------------------------------------------------------------------
1293      =2  #define PCA0CN0_CCF0__BMASK   0x01 ///< PCA Module 0 Capture/Compare Flag             
1294      =2  #define PCA0CN0_CCF0__SHIFT   0x00 ///< PCA Module 0 Capture/Compare Flag             
1295      =2  #define PCA0CN0_CCF0__NOT_SET 0x00 ///< A match or capture did not occur on channel 0.
1296      =2  #define PCA0CN0_CCF0__SET     0x01 ///< A match or capture occurred on channel 0.     
1297      =2                                                                                        
1298      =2  #define PCA0CN0_CCF1__BMASK   0x02 ///< PCA Module 1 Capture/Compare Flag             
1299      =2  #define PCA0CN0_CCF1__SHIFT   0x01 ///< PCA Module 1 Capture/Compare Flag             
1300      =2  #define PCA0CN0_CCF1__NOT_SET 0x00 ///< A match or capture did not occur on channel 1.
1301      =2  #define PCA0CN0_CCF1__SET     0x02 ///< A match or capture occurred on channel 1.     
1302      =2                                                                                        
1303      =2  #define PCA0CN0_CCF2__BMASK   0x04 ///< PCA Module 2 Capture/Compare Flag             
1304      =2  #define PCA0CN0_CCF2__SHIFT   0x02 ///< PCA Module 2 Capture/Compare Flag             
1305      =2  #define PCA0CN0_CCF2__NOT_SET 0x00 ///< A match or capture did not occur on channel 2.
1306      =2  #define PCA0CN0_CCF2__SET     0x04 ///< A match or capture occurred on channel 2.     
1307      =2                                                                                        
1308      =2  #define PCA0CN0_CCF3__BMASK   0x08 ///< PCA Module 3 Capture/Compare Flag             
1309      =2  #define PCA0CN0_CCF3__SHIFT   0x03 ///< PCA Module 3 Capture/Compare Flag             
1310      =2  #define PCA0CN0_CCF3__NOT_SET 0x00 ///< A match or capture did not occur on channel 3.
1311      =2  #define PCA0CN0_CCF3__SET     0x08 ///< A match or capture occurred on channel 3.     
1312      =2                                                                                        
1313      =2  #define PCA0CN0_CCF4__BMASK   0x10 ///< PCA Module 4 Capture/Compare Flag             
1314      =2  #define PCA0CN0_CCF4__SHIFT   0x04 ///< PCA Module 4 Capture/Compare Flag             
1315      =2  #define PCA0CN0_CCF4__NOT_SET 0x00 ///< A match or capture did not occur on channel 4.
1316      =2  #define PCA0CN0_CCF4__SET     0x10 ///< A match or capture occurred on channel 4.     
1317      =2                                                                                        
1318      =2  #define PCA0CN0_CR__BMASK     0x40 ///< PCA Counter/Timer Run Control                 
1319      =2  #define PCA0CN0_CR__SHIFT     0x06 ///< PCA Counter/Timer Run Control                 
1320      =2  #define PCA0CN0_CR__STOP      0x00 ///< Stop the PCA Counter/Timer.                   
1321      =2  #define PCA0CN0_CR__RUN       0x40 ///< Start the PCA Counter/Timer running.          
1322      =2                                                                                        
1323      =2  #define PCA0CN0_CF__BMASK     0x80 ///< PCA Counter/Timer Overflow Flag               
1324      =2  #define PCA0CN0_CF__SHIFT     0x07 ///< PCA Counter/Timer Overflow Flag               
1325      =2  #define PCA0CN0_CF__NOT_SET   0x00 ///< The PCA counter/timer did not overflow.       
1326      =2  #define PCA0CN0_CF__SET       0x80 ///< The PCA counter/timer overflowed.             
1327      =2                                                                                        
1328      =2  //------------------------------------------------------------------------------
1329      =2  // PCA0H Enums (PCA Counter/Timer High Byte @ 0xFA)
1330      =2  //------------------------------------------------------------------------------
1331      =2  #define PCA0H_PCA0H__FMASK 0xFF ///< PCA Counter/Timer High Byte
1332      =2  #define PCA0H_PCA0H__SHIFT 0x00 ///< PCA Counter/Timer High Byte
1333      =2                                                                  
1334      =2  //------------------------------------------------------------------------------
1335      =2  // PCA0L Enums (PCA Counter/Timer Low Byte @ 0xF9)
1336      =2  //------------------------------------------------------------------------------
1337      =2  #define PCA0L_PCA0L__FMASK 0xFF ///< PCA Counter/Timer Low Byte
1338      =2  #define PCA0L_PCA0L__SHIFT 0x00 ///< PCA Counter/Timer Low Byte
1339      =2                                                                 
1340      =2  //------------------------------------------------------------------------------
1341      =2  // PCA0MD Enums (PCA Mode @ 0xD9)
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 41  

1342      =2  //------------------------------------------------------------------------------
1343      =2  #define PCA0MD_ECF__BMASK            0x01 ///< PCA Counter/Timer Overflow Interrupt Enable       
1344      =2  #define PCA0MD_ECF__SHIFT            0x00 ///< PCA Counter/Timer Overflow Interrupt Enable       
1345      =2  #define PCA0MD_ECF__OVF_INT_DISABLED 0x00 ///< Disable the CF interrupt.                         
1346      =2  #define PCA0MD_ECF__OVF_INT_ENABLED  0x01 ///< Enable a PCA Counter/Timer Overflow interrupt     
1347      =2                                            ///< request when CF is set.                           
1348      =2                                                                                                   
1349      =2  #define PCA0MD_CPS__FMASK            0x0E ///< PCA Counter/Timer Pulse Select                    
1350      =2  #define PCA0MD_CPS__SHIFT            0x01 ///< PCA Counter/Timer Pulse Select                    
1351      =2  #define PCA0MD_CPS__SYSCLK_DIV_12    0x00 ///< System clock divided by 12.                       
1352      =2  #define PCA0MD_CPS__SYSCLK_DIV_4     0x02 ///< System clock divided by 4.                        
1353      =2  #define PCA0MD_CPS__T0_OVERFLOW      0x04 ///< Timer 0 overflow.                                 
1354      =2  #define PCA0MD_CPS__ECI              0x06 ///< High-to-low transitions on ECI (max rate = system 
1355      =2                                            ///< clock divided by 4).                              
1356      =2  #define PCA0MD_CPS__SYSCLK           0x08 ///< System clock.                                     
1357      =2  #define PCA0MD_CPS__EXTOSC_DIV_8     0x0A ///< External clock divided by 8 (synchronized with the
1358      =2                                            ///< system clock).                                    
1359      =2                                                                                                   
1360      =2  #define PCA0MD_WDLCK__BMASK          0x20 ///< Watchdog Timer Lock                               
1361      =2  #define PCA0MD_WDLCK__SHIFT          0x05 ///< Watchdog Timer Lock                               
1362      =2  #define PCA0MD_WDLCK__UNLOCKED       0x00 ///< Watchdog Timer Enable unlocked.                   
1363      =2  #define PCA0MD_WDLCK__LOCKED         0x20 ///< Watchdog Timer Enable locked.                     
1364      =2                                                                                                   
1365      =2  #define PCA0MD_WDTE__BMASK           0x40 ///< Watchdog Timer Enable                             
1366      =2  #define PCA0MD_WDTE__SHIFT           0x06 ///< Watchdog Timer Enable                             
1367      =2  #define PCA0MD_WDTE__DISABLED        0x00 ///< Disable Watchdog Timer.                           
1368      =2  #define PCA0MD_WDTE__ENABLED         0x40 ///< Enable PCA Module 4 as the Watchdog Timer.        
1369      =2                                                                                                   
1370      =2  #define PCA0MD_CIDL__BMASK           0x80 ///< PCA Counter/Timer Idle Control                    
1371      =2  #define PCA0MD_CIDL__SHIFT           0x07 ///< PCA Counter/Timer Idle Control                    
1372      =2  #define PCA0MD_CIDL__NORMAL          0x00 ///< PCA continues to function normally while the      
1373      =2                                            ///< system controller is in Idle Mode.                
1374      =2  #define PCA0MD_CIDL__SUSPEND         0x80 ///< PCA operation is suspended while the system       
1375      =2                                            ///< controller is in Idle Mode.                       
1376      =2                                                                                                   
1377      =2  //------------------------------------------------------------------------------
1378      =2  // PCON0 Enums (Power Control @ 0x87)
1379      =2  //------------------------------------------------------------------------------
1380      =2  #define PCON0_IDLE__BMASK  0x01 ///< Idle Mode Select                                
1381      =2  #define PCON0_IDLE__SHIFT  0x00 ///< Idle Mode Select                                
1382      =2  #define PCON0_IDLE__NORMAL 0x00 ///< Idle mode not activated.                        
1383      =2  #define PCON0_IDLE__IDLE   0x01 ///< CPU goes into Idle mode (shuts off clock to CPU,
1384      =2                                  ///< but clocks to enabled peripherals are still     
1385      =2                                  ///< active).                                        
1386      =2                                                                                       
1387      =2  #define PCON0_STOP__BMASK  0x02 ///< Stop Mode Select                                
1388      =2  #define PCON0_STOP__SHIFT  0x01 ///< Stop Mode Select                                
1389      =2  #define PCON0_STOP__NORMAL 0x00 ///< Stop mode not activated.                        
1390      =2  #define PCON0_STOP__STOP   0x02 ///< CPU goes into Stop mode (internal oscillator    
1391      =2                                  ///< stopped).                                       
1392      =2                                                                                       
1393      =2  #define PCON0_GF0__BMASK   0x04 ///< General Purpose Flag 0                          
1394      =2  #define PCON0_GF0__SHIFT   0x02 ///< General Purpose Flag 0                          
1395      =2  #define PCON0_GF0__NOT_SET 0x00 ///< The GF0 flag is not set. Clear the GF0 flag.    
1396      =2  #define PCON0_GF0__SET     0x04 ///< The GF0 flag is set. Set the GF0 flag.          
1397      =2                                                                                       
1398      =2  #define PCON0_GF1__BMASK   0x08 ///< General Purpose Flag 1                          
1399      =2  #define PCON0_GF1__SHIFT   0x03 ///< General Purpose Flag 1                          
1400      =2  #define PCON0_GF1__NOT_SET 0x00 ///< The GF1 flag is not set. Clear the GF1 flag.    
1401      =2  #define PCON0_GF1__SET     0x08 ///< The GF1 flag is set. Set the GF1 flag.          
1402      =2                                                                                       
1403      =2  #define PCON0_GF2__BMASK   0x10 ///< General Purpose Flag 2                          
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 42  

1404      =2  #define PCON0_GF2__SHIFT   0x04 ///< General Purpose Flag 2                          
1405      =2  #define PCON0_GF2__NOT_SET 0x00 ///< The GF2 flag is not set. Clear the GF2 flag.    
1406      =2  #define PCON0_GF2__SET     0x10 ///< The GF2 flag is set. Set the GF2 flag.          
1407      =2                                                                                       
1408      =2  #define PCON0_GF3__BMASK   0x20 ///< General Purpose Flag 3                          
1409      =2  #define PCON0_GF3__SHIFT   0x05 ///< General Purpose Flag 3                          
1410      =2  #define PCON0_GF3__NOT_SET 0x00 ///< The GF3 flag is not set. Clear the GF3 flag.    
1411      =2  #define PCON0_GF3__SET     0x20 ///< The GF3 flag is set. Set the GF3 flag.          
1412      =2                                                                                       
1413      =2  #define PCON0_GF4__BMASK   0x40 ///< General Purpose Flag 4                          
1414      =2  #define PCON0_GF4__SHIFT   0x06 ///< General Purpose Flag 4                          
1415      =2  #define PCON0_GF4__NOT_SET 0x00 ///< The GF4 flag is not set. Clear the GF4 flag.    
1416      =2  #define PCON0_GF4__SET     0x40 ///< The GF4 flag is set. Set the GF4 flag.          
1417      =2                                                                                       
1418      =2  #define PCON0_GF5__BMASK   0x80 ///< General Purpose Flag 5                          
1419      =2  #define PCON0_GF5__SHIFT   0x07 ///< General Purpose Flag 5                          
1420      =2  #define PCON0_GF5__NOT_SET 0x00 ///< The GF5 flag is not set. Clear the GF5 flag.    
1421      =2  #define PCON0_GF5__SET     0x80 ///< The GF5 flag is set. Set the GF5 flag.          
1422      =2                                                                                       
1423      =2  //------------------------------------------------------------------------------
1424      =2  // P0 Enums (Port 0 Pin Latch @ 0x80)
1425      =2  //------------------------------------------------------------------------------
1426      =2  #define P0_B0__BMASK 0x01 ///< Port 0 Bit 0 Latch                            
1427      =2  #define P0_B0__SHIFT 0x00 ///< Port 0 Bit 0 Latch                            
1428      =2  #define P0_B0__LOW   0x00 ///< P0.0 is low. Set P0.0 to drive low.           
1429      =2  #define P0_B0__HIGH  0x01 ///< P0.0 is high. Set P0.0 to drive or float high.
1430      =2                                                                               
1431      =2  #define P0_B1__BMASK 0x02 ///< Port 0 Bit 1 Latch                            
1432      =2  #define P0_B1__SHIFT 0x01 ///< Port 0 Bit 1 Latch                            
1433      =2  #define P0_B1__LOW   0x00 ///< P0.1 is low. Set P0.1 to drive low.           
1434      =2  #define P0_B1__HIGH  0x02 ///< P0.1 is high. Set P0.1 to drive or float high.
1435      =2                                                                               
1436      =2  #define P0_B2__BMASK 0x04 ///< Port 0 Bit 2 Latch                            
1437      =2  #define P0_B2__SHIFT 0x02 ///< Port 0 Bit 2 Latch                            
1438      =2  #define P0_B2__LOW   0x00 ///< P0.2 is low. Set P0.2 to drive low.           
1439      =2  #define P0_B2__HIGH  0x04 ///< P0.2 is high. Set P0.2 to drive or float high.
1440      =2                                                                               
1441      =2  #define P0_B3__BMASK 0x08 ///< Port 0 Bit 3 Latch                            
1442      =2  #define P0_B3__SHIFT 0x03 ///< Port 0 Bit 3 Latch                            
1443      =2  #define P0_B3__LOW   0x00 ///< P0.3 is low. Set P0.3 to drive low.           
1444      =2  #define P0_B3__HIGH  0x08 ///< P0.3 is high. Set P0.3 to drive or float high.
1445      =2                                                                               
1446      =2  #define P0_B4__BMASK 0x10 ///< Port 0 Bit 4 Latch                            
1447      =2  #define P0_B4__SHIFT 0x04 ///< Port 0 Bit 4 Latch                            
1448      =2  #define P0_B4__LOW   0x00 ///< P0.4 is low. Set P0.4 to drive low.           
1449      =2  #define P0_B4__HIGH  0x10 ///< P0.4 is high. Set P0.4 to drive or float high.
1450      =2                                                                               
1451      =2  #define P0_B5__BMASK 0x20 ///< Port 0 Bit 5 Latch                            
1452      =2  #define P0_B5__SHIFT 0x05 ///< Port 0 Bit 5 Latch                            
1453      =2  #define P0_B5__LOW   0x00 ///< P0.5 is low. Set P0.5 to drive low.           
1454      =2  #define P0_B5__HIGH  0x20 ///< P0.5 is high. Set P0.5 to drive or float high.
1455      =2                                                                               
1456      =2  #define P0_B6__BMASK 0x40 ///< Port 0 Bit 6 Latch                            
1457      =2  #define P0_B6__SHIFT 0x06 ///< Port 0 Bit 6 Latch                            
1458      =2  #define P0_B6__LOW   0x00 ///< P0.6 is low. Set P0.6 to drive low.           
1459      =2  #define P0_B6__HIGH  0x40 ///< P0.6 is high. Set P0.6 to drive or float high.
1460      =2                                                                               
1461      =2  #define P0_B7__BMASK 0x80 ///< Port 0 Bit 7 Latch                            
1462      =2  #define P0_B7__SHIFT 0x07 ///< Port 0 Bit 7 Latch                            
1463      =2  #define P0_B7__LOW   0x00 ///< P0.7 is low. Set P0.7 to drive low.           
1464      =2  #define P0_B7__HIGH  0x80 ///< P0.7 is high. Set P0.7 to drive or float high.
1465      =2                                                                               
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 43  

1466      =2  //------------------------------------------------------------------------------
1467      =2  // P0MDIN Enums (Port 0 Input Mode @ 0xF1)
1468      =2  //------------------------------------------------------------------------------
1469      =2  #define P0MDIN_B0__BMASK   0x01 ///< Port 0 Bit 0 Input Mode                 
1470      =2  #define P0MDIN_B0__SHIFT   0x00 ///< Port 0 Bit 0 Input Mode                 
1471      =2  #define P0MDIN_B0__ANALOG  0x00 ///< P0.0 pin is configured for analog mode. 
1472      =2  #define P0MDIN_B0__DIGITAL 0x01 ///< P0.0 pin is configured for digital mode.
1473      =2                                                                               
1474      =2  #define P0MDIN_B1__BMASK   0x02 ///< Port 0 Bit 1 Input Mode                 
1475      =2  #define P0MDIN_B1__SHIFT   0x01 ///< Port 0 Bit 1 Input Mode                 
1476      =2  #define P0MDIN_B1__ANALOG  0x00 ///< P0.1 pin is configured for analog mode. 
1477      =2  #define P0MDIN_B1__DIGITAL 0x02 ///< P0.1 pin is configured for digital mode.
1478      =2                                                                               
1479      =2  #define P0MDIN_B2__BMASK   0x04 ///< Port 0 Bit 2 Input Mode                 
1480      =2  #define P0MDIN_B2__SHIFT   0x02 ///< Port 0 Bit 2 Input Mode                 
1481      =2  #define P0MDIN_B2__ANALOG  0x00 ///< P0.2 pin is configured for analog mode. 
1482      =2  #define P0MDIN_B2__DIGITAL 0x04 ///< P0.2 pin is configured for digital mode.
1483      =2                                                                               
1484      =2  #define P0MDIN_B3__BMASK   0x08 ///< Port 0 Bit 3 Input Mode                 
1485      =2  #define P0MDIN_B3__SHIFT   0x03 ///< Port 0 Bit 3 Input Mode                 
1486      =2  #define P0MDIN_B3__ANALOG  0x00 ///< P0.3 pin is configured for analog mode. 
1487      =2  #define P0MDIN_B3__DIGITAL 0x08 ///< P0.3 pin is configured for digital mode.
1488      =2                                                                               
1489      =2  #define P0MDIN_B4__BMASK   0x10 ///< Port 0 Bit 4 Input Mode                 
1490      =2  #define P0MDIN_B4__SHIFT   0x04 ///< Port 0 Bit 4 Input Mode                 
1491      =2  #define P0MDIN_B4__ANALOG  0x00 ///< P0.4 pin is configured for analog mode. 
1492      =2  #define P0MDIN_B4__DIGITAL 0x10 ///< P0.4 pin is configured for digital mode.
1493      =2                                                                               
1494      =2  #define P0MDIN_B5__BMASK   0x20 ///< Port 0 Bit 5 Input Mode                 
1495      =2  #define P0MDIN_B5__SHIFT   0x05 ///< Port 0 Bit 5 Input Mode                 
1496      =2  #define P0MDIN_B5__ANALOG  0x00 ///< P0.5 pin is configured for analog mode. 
1497      =2  #define P0MDIN_B5__DIGITAL 0x20 ///< P0.5 pin is configured for digital mode.
1498      =2                                                                               
1499      =2  #define P0MDIN_B6__BMASK   0x40 ///< Port 0 Bit 6 Input Mode                 
1500      =2  #define P0MDIN_B6__SHIFT   0x06 ///< Port 0 Bit 6 Input Mode                 
1501      =2  #define P0MDIN_B6__ANALOG  0x00 ///< P0.6 pin is configured for analog mode. 
1502      =2  #define P0MDIN_B6__DIGITAL 0x40 ///< P0.6 pin is configured for digital mode.
1503      =2                                                                               
1504      =2  #define P0MDIN_B7__BMASK   0x80 ///< Port 0 Bit 7 Input Mode                 
1505      =2  #define P0MDIN_B7__SHIFT   0x07 ///< Port 0 Bit 7 Input Mode                 
1506      =2  #define P0MDIN_B7__ANALOG  0x00 ///< P0.7 pin is configured for analog mode. 
1507      =2  #define P0MDIN_B7__DIGITAL 0x80 ///< P0.7 pin is configured for digital mode.
1508      =2                                                                               
1509      =2  //------------------------------------------------------------------------------
1510      =2  // P0MDOUT Enums (Port 0 Output Mode @ 0xA4)
1511      =2  //------------------------------------------------------------------------------
1512      =2  #define P0MDOUT_B0__BMASK      0x01 ///< Port 0 Bit 0 Output Mode  
1513      =2  #define P0MDOUT_B0__SHIFT      0x00 ///< Port 0 Bit 0 Output Mode  
1514      =2  #define P0MDOUT_B0__OPEN_DRAIN 0x00 ///< P0.0 output is open-drain.
1515      =2  #define P0MDOUT_B0__PUSH_PULL  0x01 ///< P0.0 output is push-pull. 
1516      =2                                                                     
1517      =2  #define P0MDOUT_B1__BMASK      0x02 ///< Port 0 Bit 1 Output Mode  
1518      =2  #define P0MDOUT_B1__SHIFT      0x01 ///< Port 0 Bit 1 Output Mode  
1519      =2  #define P0MDOUT_B1__OPEN_DRAIN 0x00 ///< P0.1 output is open-drain.
1520      =2  #define P0MDOUT_B1__PUSH_PULL  0x02 ///< P0.1 output is push-pull. 
1521      =2                                                                     
1522      =2  #define P0MDOUT_B2__BMASK      0x04 ///< Port 0 Bit 2 Output Mode  
1523      =2  #define P0MDOUT_B2__SHIFT      0x02 ///< Port 0 Bit 2 Output Mode  
1524      =2  #define P0MDOUT_B2__OPEN_DRAIN 0x00 ///< P0.2 output is open-drain.
1525      =2  #define P0MDOUT_B2__PUSH_PULL  0x04 ///< P0.2 output is push-pull. 
1526      =2                                                                     
1527      =2  #define P0MDOUT_B3__BMASK      0x08 ///< Port 0 Bit 3 Output Mode  
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 44  

1528      =2  #define P0MDOUT_B3__SHIFT      0x03 ///< Port 0 Bit 3 Output Mode  
1529      =2  #define P0MDOUT_B3__OPEN_DRAIN 0x00 ///< P0.3 output is open-drain.
1530      =2  #define P0MDOUT_B3__PUSH_PULL  0x08 ///< P0.3 output is push-pull. 
1531      =2                                                                     
1532      =2  #define P0MDOUT_B4__BMASK      0x10 ///< Port 0 Bit 4 Output Mode  
1533      =2  #define P0MDOUT_B4__SHIFT      0x04 ///< Port 0 Bit 4 Output Mode  
1534      =2  #define P0MDOUT_B4__OPEN_DRAIN 0x00 ///< P0.4 output is open-drain.
1535      =2  #define P0MDOUT_B4__PUSH_PULL  0x10 ///< P0.4 output is push-pull. 
1536      =2                                                                     
1537      =2  #define P0MDOUT_B5__BMASK      0x20 ///< Port 0 Bit 5 Output Mode  
1538      =2  #define P0MDOUT_B5__SHIFT      0x05 ///< Port 0 Bit 5 Output Mode  
1539      =2  #define P0MDOUT_B5__OPEN_DRAIN 0x00 ///< P0.5 output is open-drain.
1540      =2  #define P0MDOUT_B5__PUSH_PULL  0x20 ///< P0.5 output is push-pull. 
1541      =2                                                                     
1542      =2  #define P0MDOUT_B6__BMASK      0x40 ///< Port 0 Bit 6 Output Mode  
1543      =2  #define P0MDOUT_B6__SHIFT      0x06 ///< Port 0 Bit 6 Output Mode  
1544      =2  #define P0MDOUT_B6__OPEN_DRAIN 0x00 ///< P0.6 output is open-drain.
1545      =2  #define P0MDOUT_B6__PUSH_PULL  0x40 ///< P0.6 output is push-pull. 
1546      =2                                                                     
1547      =2  #define P0MDOUT_B7__BMASK      0x80 ///< Port 0 Bit 7 Output Mode  
1548      =2  #define P0MDOUT_B7__SHIFT      0x07 ///< Port 0 Bit 7 Output Mode  
1549      =2  #define P0MDOUT_B7__OPEN_DRAIN 0x00 ///< P0.7 output is open-drain.
1550      =2  #define P0MDOUT_B7__PUSH_PULL  0x80 ///< P0.7 output is push-pull. 
1551      =2                                                                     
1552      =2  //------------------------------------------------------------------------------
1553      =2  // P0SKIP Enums (Port 0 Skip @ 0xD4)
1554      =2  //------------------------------------------------------------------------------
1555      =2  #define P0SKIP_B0__BMASK       0x01 ///< Port 0 Bit 0 Skip                       
1556      =2  #define P0SKIP_B0__SHIFT       0x00 ///< Port 0 Bit 0 Skip                       
1557      =2  #define P0SKIP_B0__NOT_SKIPPED 0x00 ///< P0.0 pin is not skipped by the crossbar.
1558      =2  #define P0SKIP_B0__SKIPPED     0x01 ///< P0.0 pin is skipped by the crossbar.    
1559      =2                                                                                   
1560      =2  #define P0SKIP_B1__BMASK       0x02 ///< Port 0 Bit 1 Skip                       
1561      =2  #define P0SKIP_B1__SHIFT       0x01 ///< Port 0 Bit 1 Skip                       
1562      =2  #define P0SKIP_B1__NOT_SKIPPED 0x00 ///< P0.1 pin is not skipped by the crossbar.
1563      =2  #define P0SKIP_B1__SKIPPED     0x02 ///< P0.1 pin is skipped by the crossbar.    
1564      =2                                                                                   
1565      =2  #define P0SKIP_B2__BMASK       0x04 ///< Port 0 Bit 2 Skip                       
1566      =2  #define P0SKIP_B2__SHIFT       0x02 ///< Port 0 Bit 2 Skip                       
1567      =2  #define P0SKIP_B2__NOT_SKIPPED 0x00 ///< P0.2 pin is not skipped by the crossbar.
1568      =2  #define P0SKIP_B2__SKIPPED     0x04 ///< P0.2 pin is skipped by the crossbar.    
1569      =2                                                                                   
1570      =2  #define P0SKIP_B3__BMASK       0x08 ///< Port 0 Bit 3 Skip                       
1571      =2  #define P0SKIP_B3__SHIFT       0x03 ///< Port 0 Bit 3 Skip                       
1572      =2  #define P0SKIP_B3__NOT_SKIPPED 0x00 ///< P0.3 pin is not skipped by the crossbar.
1573      =2  #define P0SKIP_B3__SKIPPED     0x08 ///< P0.3 pin is skipped by the crossbar.    
1574      =2                                                                                   
1575      =2  #define P0SKIP_B4__BMASK       0x10 ///< Port 0 Bit 4 Skip                       
1576      =2  #define P0SKIP_B4__SHIFT       0x04 ///< Port 0 Bit 4 Skip                       
1577      =2  #define P0SKIP_B4__NOT_SKIPPED 0x00 ///< P0.4 pin is not skipped by the crossbar.
1578      =2  #define P0SKIP_B4__SKIPPED     0x10 ///< P0.4 pin is skipped by the crossbar.    
1579      =2                                                                                   
1580      =2  #define P0SKIP_B5__BMASK       0x20 ///< Port 0 Bit 5 Skip                       
1581      =2  #define P0SKIP_B5__SHIFT       0x05 ///< Port 0 Bit 5 Skip                       
1582      =2  #define P0SKIP_B5__NOT_SKIPPED 0x00 ///< P0.5 pin is not skipped by the crossbar.
1583      =2  #define P0SKIP_B5__SKIPPED     0x20 ///< P0.5 pin is skipped by the crossbar.    
1584      =2                                                                                   
1585      =2  #define P0SKIP_B6__BMASK       0x40 ///< Port 0 Bit 6 Skip                       
1586      =2  #define P0SKIP_B6__SHIFT       0x06 ///< Port 0 Bit 6 Skip                       
1587      =2  #define P0SKIP_B6__NOT_SKIPPED 0x00 ///< P0.6 pin is not skipped by the crossbar.
1588      =2  #define P0SKIP_B6__SKIPPED     0x40 ///< P0.6 pin is skipped by the crossbar.    
1589      =2                                                                                   
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 45  

1590      =2  #define P0SKIP_B7__BMASK       0x80 ///< Port 0 Bit 7 Skip                       
1591      =2  #define P0SKIP_B7__SHIFT       0x07 ///< Port 0 Bit 7 Skip                       
1592      =2  #define P0SKIP_B7__NOT_SKIPPED 0x00 ///< P0.7 pin is not skipped by the crossbar.
1593      =2  #define P0SKIP_B7__SKIPPED     0x80 ///< P0.7 pin is skipped by the crossbar.    
1594      =2                                                                                   
1595      =2  //------------------------------------------------------------------------------
1596      =2  // P1 Enums (Port 1 Pin Latch @ 0x90)
1597      =2  //------------------------------------------------------------------------------
1598      =2  #define P1_B0__BMASK 0x01 ///< Port 1 Bit 0 Latch                            
1599      =2  #define P1_B0__SHIFT 0x00 ///< Port 1 Bit 0 Latch                            
1600      =2  #define P1_B0__LOW   0x00 ///< P1.0 is low. Set P1.0 to drive low.           
1601      =2  #define P1_B0__HIGH  0x01 ///< P1.0 is high. Set P1.0 to drive or float high.
1602      =2                                                                               
1603      =2  #define P1_B1__BMASK 0x02 ///< Port 1 Bit 1 Latch                            
1604      =2  #define P1_B1__SHIFT 0x01 ///< Port 1 Bit 1 Latch                            
1605      =2  #define P1_B1__LOW   0x00 ///< P1.1 is low. Set P1.1 to drive low.           
1606      =2  #define P1_B1__HIGH  0x02 ///< P1.1 is high. Set P1.1 to drive or float high.
1607      =2                                                                               
1608      =2  #define P1_B2__BMASK 0x04 ///< Port 1 Bit 2 Latch                            
1609      =2  #define P1_B2__SHIFT 0x02 ///< Port 1 Bit 2 Latch                            
1610      =2  #define P1_B2__LOW   0x00 ///< P1.2 is low. Set P1.2 to drive low.           
1611      =2  #define P1_B2__HIGH  0x04 ///< P1.2 is high. Set P1.2 to drive or float high.
1612      =2                                                                               
1613      =2  #define P1_B3__BMASK 0x08 ///< Port 1 Bit 3 Latch                            
1614      =2  #define P1_B3__SHIFT 0x03 ///< Port 1 Bit 3 Latch                            
1615      =2  #define P1_B3__LOW   0x00 ///< P1.3 is low. Set P1.3 to drive low.           
1616      =2  #define P1_B3__HIGH  0x08 ///< P1.3 is high. Set P1.3 to drive or float high.
1617      =2                                                                               
1618      =2  #define P1_B4__BMASK 0x10 ///< Port 1 Bit 4 Latch                            
1619      =2  #define P1_B4__SHIFT 0x04 ///< Port 1 Bit 4 Latch                            
1620      =2  #define P1_B4__LOW   0x00 ///< P1.4 is low. Set P1.4 to drive low.           
1621      =2  #define P1_B4__HIGH  0x10 ///< P1.4 is high. Set P1.4 to drive or float high.
1622      =2                                                                               
1623      =2  #define P1_B5__BMASK 0x20 ///< Port 1 Bit 5 Latch                            
1624      =2  #define P1_B5__SHIFT 0x05 ///< Port 1 Bit 5 Latch                            
1625      =2  #define P1_B5__LOW   0x00 ///< P1.5 is low. Set P1.5 to drive low.           
1626      =2  #define P1_B5__HIGH  0x20 ///< P1.5 is high. Set P1.5 to drive or float high.
1627      =2                                                                               
1628      =2  #define P1_B6__BMASK 0x40 ///< Port 1 Bit 6 Latch                            
1629      =2  #define P1_B6__SHIFT 0x06 ///< Port 1 Bit 6 Latch                            
1630      =2  #define P1_B6__LOW   0x00 ///< P1.6 is low. Set P1.6 to drive low.           
1631      =2  #define P1_B6__HIGH  0x40 ///< P1.6 is high. Set P1.6 to drive or float high.
1632      =2                                                                               
1633      =2  #define P1_B7__BMASK 0x80 ///< Port 1 Bit 7 Latch                            
1634      =2  #define P1_B7__SHIFT 0x07 ///< Port 1 Bit 7 Latch                            
1635      =2  #define P1_B7__LOW   0x00 ///< P1.7 is low. Set P1.7 to drive low.           
1636      =2  #define P1_B7__HIGH  0x80 ///< P1.7 is high. Set P1.7 to drive or float high.
1637      =2                                                                               
1638      =2  //------------------------------------------------------------------------------
1639      =2  // P1MDIN Enums (Port 1 Input Mode @ 0xF2)
1640      =2  //------------------------------------------------------------------------------
1641      =2  #define P1MDIN_B0__BMASK   0x01 ///< Port 1 Bit 0 Input Mode                 
1642      =2  #define P1MDIN_B0__SHIFT   0x00 ///< Port 1 Bit 0 Input Mode                 
1643      =2  #define P1MDIN_B0__ANALOG  0x00 ///< P1.0 pin is configured for analog mode. 
1644      =2  #define P1MDIN_B0__DIGITAL 0x01 ///< P1.0 pin is configured for digital mode.
1645      =2                                                                               
1646      =2  #define P1MDIN_B1__BMASK   0x02 ///< Port 1 Bit 1 Input Mode                 
1647      =2  #define P1MDIN_B1__SHIFT   0x01 ///< Port 1 Bit 1 Input Mode                 
1648      =2  #define P1MDIN_B1__ANALOG  0x00 ///< P1.1 pin is configured for analog mode. 
1649      =2  #define P1MDIN_B1__DIGITAL 0x02 ///< P1.1 pin is configured for digital mode.
1650      =2                                                                               
1651      =2  #define P1MDIN_B2__BMASK   0x04 ///< Port 1 Bit 2 Input Mode                 
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 46  

1652      =2  #define P1MDIN_B2__SHIFT   0x02 ///< Port 1 Bit 2 Input Mode                 
1653      =2  #define P1MDIN_B2__ANALOG  0x00 ///< P1.2 pin is configured for analog mode. 
1654      =2  #define P1MDIN_B2__DIGITAL 0x04 ///< P1.2 pin is configured for digital mode.
1655      =2                                                                               
1656      =2  #define P1MDIN_B3__BMASK   0x08 ///< Port 1 Bit 3 Input Mode                 
1657      =2  #define P1MDIN_B3__SHIFT   0x03 ///< Port 1 Bit 3 Input Mode                 
1658      =2  #define P1MDIN_B3__ANALOG  0x00 ///< P1.3 pin is configured for analog mode. 
1659      =2  #define P1MDIN_B3__DIGITAL 0x08 ///< P1.3 pin is configured for digital mode.
1660      =2                                                                               
1661      =2  #define P1MDIN_B4__BMASK   0x10 ///< Port 1 Bit 4 Input Mode                 
1662      =2  #define P1MDIN_B4__SHIFT   0x04 ///< Port 1 Bit 4 Input Mode                 
1663      =2  #define P1MDIN_B4__ANALOG  0x00 ///< P1.4 pin is configured for analog mode. 
1664      =2  #define P1MDIN_B4__DIGITAL 0x10 ///< P1.4 pin is configured for digital mode.
1665      =2                                                                               
1666      =2  #define P1MDIN_B5__BMASK   0x20 ///< Port 1 Bit 5 Input Mode                 
1667      =2  #define P1MDIN_B5__SHIFT   0x05 ///< Port 1 Bit 5 Input Mode                 
1668      =2  #define P1MDIN_B5__ANALOG  0x00 ///< P1.5 pin is configured for analog mode. 
1669      =2  #define P1MDIN_B5__DIGITAL 0x20 ///< P1.5 pin is configured for digital mode.
1670      =2                                                                               
1671      =2  #define P1MDIN_B6__BMASK   0x40 ///< Port 1 Bit 6 Input Mode                 
1672      =2  #define P1MDIN_B6__SHIFT   0x06 ///< Port 1 Bit 6 Input Mode                 
1673      =2  #define P1MDIN_B6__ANALOG  0x00 ///< P1.6 pin is configured for analog mode. 
1674      =2  #define P1MDIN_B6__DIGITAL 0x40 ///< P1.6 pin is configured for digital mode.
1675      =2                                                                               
1676      =2  #define P1MDIN_B7__BMASK   0x80 ///< Port 1 Bit 7 Input Mode                 
1677      =2  #define P1MDIN_B7__SHIFT   0x07 ///< Port 1 Bit 7 Input Mode                 
1678      =2  #define P1MDIN_B7__ANALOG  0x00 ///< P1.7 pin is configured for analog mode. 
1679      =2  #define P1MDIN_B7__DIGITAL 0x80 ///< P1.7 pin is configured for digital mode.
1680      =2                                                                               
1681      =2  //------------------------------------------------------------------------------
1682      =2  // P1MDOUT Enums (Port 1 Output Mode @ 0xA5)
1683      =2  //------------------------------------------------------------------------------
1684      =2  #define P1MDOUT_B0__BMASK      0x01 ///< Port 1 Bit 0 Output Mode  
1685      =2  #define P1MDOUT_B0__SHIFT      0x00 ///< Port 1 Bit 0 Output Mode  
1686      =2  #define P1MDOUT_B0__OPEN_DRAIN 0x00 ///< P1.0 output is open-drain.
1687      =2  #define P1MDOUT_B0__PUSH_PULL  0x01 ///< P1.0 output is push-pull. 
1688      =2                                                                     
1689      =2  #define P1MDOUT_B1__BMASK      0x02 ///< Port 1 Bit 1 Output Mode  
1690      =2  #define P1MDOUT_B1__SHIFT      0x01 ///< Port 1 Bit 1 Output Mode  
1691      =2  #define P1MDOUT_B1__OPEN_DRAIN 0x00 ///< P1.1 output is open-drain.
1692      =2  #define P1MDOUT_B1__PUSH_PULL  0x02 ///< P1.1 output is push-pull. 
1693      =2                                                                     
1694      =2  #define P1MDOUT_B2__BMASK      0x04 ///< Port 1 Bit 2 Output Mode  
1695      =2  #define P1MDOUT_B2__SHIFT      0x02 ///< Port 1 Bit 2 Output Mode  
1696      =2  #define P1MDOUT_B2__OPEN_DRAIN 0x00 ///< P1.2 output is open-drain.
1697      =2  #define P1MDOUT_B2__PUSH_PULL  0x04 ///< P1.2 output is push-pull. 
1698      =2                                                                     
1699      =2  #define P1MDOUT_B3__BMASK      0x08 ///< Port 1 Bit 3 Output Mode  
1700      =2  #define P1MDOUT_B3__SHIFT      0x03 ///< Port 1 Bit 3 Output Mode  
1701      =2  #define P1MDOUT_B3__OPEN_DRAIN 0x00 ///< P1.3 output is open-drain.
1702      =2  #define P1MDOUT_B3__PUSH_PULL  0x08 ///< P1.3 output is push-pull. 
1703      =2                                                                     
1704      =2  #define P1MDOUT_B4__BMASK      0x10 ///< Port 1 Bit 4 Output Mode  
1705      =2  #define P1MDOUT_B4__SHIFT      0x04 ///< Port 1 Bit 4 Output Mode  
1706      =2  #define P1MDOUT_B4__OPEN_DRAIN 0x00 ///< P1.4 output is open-drain.
1707      =2  #define P1MDOUT_B4__PUSH_PULL  0x10 ///< P1.4 output is push-pull. 
1708      =2                                                                     
1709      =2  #define P1MDOUT_B5__BMASK      0x20 ///< Port 1 Bit 5 Output Mode  
1710      =2  #define P1MDOUT_B5__SHIFT      0x05 ///< Port 1 Bit 5 Output Mode  
1711      =2  #define P1MDOUT_B5__OPEN_DRAIN 0x00 ///< P1.5 output is open-drain.
1712      =2  #define P1MDOUT_B5__PUSH_PULL  0x20 ///< P1.5 output is push-pull. 
1713      =2                                                                     
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 47  

1714      =2  #define P1MDOUT_B6__BMASK      0x40 ///< Port 1 Bit 6 Output Mode  
1715      =2  #define P1MDOUT_B6__SHIFT      0x06 ///< Port 1 Bit 6 Output Mode  
1716      =2  #define P1MDOUT_B6__OPEN_DRAIN 0x00 ///< P1.6 output is open-drain.
1717      =2  #define P1MDOUT_B6__PUSH_PULL  0x40 ///< P1.6 output is push-pull. 
1718      =2                                                                     
1719      =2  #define P1MDOUT_B7__BMASK      0x80 ///< Port 1 Bit 7 Output Mode  
1720      =2  #define P1MDOUT_B7__SHIFT      0x07 ///< Port 1 Bit 7 Output Mode  
1721      =2  #define P1MDOUT_B7__OPEN_DRAIN 0x00 ///< P1.7 output is open-drain.
1722      =2  #define P1MDOUT_B7__PUSH_PULL  0x80 ///< P1.7 output is push-pull. 
1723      =2                                                                     
1724      =2  //------------------------------------------------------------------------------
1725      =2  // P1SKIP Enums (Port 1 Skip @ 0xD5)
1726      =2  //------------------------------------------------------------------------------
1727      =2  #define P1SKIP_B0__BMASK       0x01 ///< Port 1 Bit 0 Skip                       
1728      =2  #define P1SKIP_B0__SHIFT       0x00 ///< Port 1 Bit 0 Skip                       
1729      =2  #define P1SKIP_B0__NOT_SKIPPED 0x00 ///< P1.0 pin is not skipped by the crossbar.
1730      =2  #define P1SKIP_B0__SKIPPED     0x01 ///< P1.0 pin is skipped by the crossbar.    
1731      =2                                                                                   
1732      =2  #define P1SKIP_B1__BMASK       0x02 ///< Port 1 Bit 1 Skip                       
1733      =2  #define P1SKIP_B1__SHIFT       0x01 ///< Port 1 Bit 1 Skip                       
1734      =2  #define P1SKIP_B1__NOT_SKIPPED 0x00 ///< P1.1 pin is not skipped by the crossbar.
1735      =2  #define P1SKIP_B1__SKIPPED     0x02 ///< P1.1 pin is skipped by the crossbar.    
1736      =2                                                                                   
1737      =2  #define P1SKIP_B2__BMASK       0x04 ///< Port 1 Bit 2 Skip                       
1738      =2  #define P1SKIP_B2__SHIFT       0x02 ///< Port 1 Bit 2 Skip                       
1739      =2  #define P1SKIP_B2__NOT_SKIPPED 0x00 ///< P1.2 pin is not skipped by the crossbar.
1740      =2  #define P1SKIP_B2__SKIPPED     0x04 ///< P1.2 pin is skipped by the crossbar.    
1741      =2                                                                                   
1742      =2  #define P1SKIP_B3__BMASK       0x08 ///< Port 1 Bit 3 Skip                       
1743      =2  #define P1SKIP_B3__SHIFT       0x03 ///< Port 1 Bit 3 Skip                       
1744      =2  #define P1SKIP_B3__NOT_SKIPPED 0x00 ///< P1.3 pin is not skipped by the crossbar.
1745      =2  #define P1SKIP_B3__SKIPPED     0x08 ///< P1.3 pin is skipped by the crossbar.    
1746      =2                                                                                   
1747      =2  #define P1SKIP_B4__BMASK       0x10 ///< Port 1 Bit 4 Skip                       
1748      =2  #define P1SKIP_B4__SHIFT       0x04 ///< Port 1 Bit 4 Skip                       
1749      =2  #define P1SKIP_B4__NOT_SKIPPED 0x00 ///< P1.4 pin is not skipped by the crossbar.
1750      =2  #define P1SKIP_B4__SKIPPED     0x10 ///< P1.4 pin is skipped by the crossbar.    
1751      =2                                                                                   
1752      =2  #define P1SKIP_B5__BMASK       0x20 ///< Port 1 Bit 5 Skip                       
1753      =2  #define P1SKIP_B5__SHIFT       0x05 ///< Port 1 Bit 5 Skip                       
1754      =2  #define P1SKIP_B5__NOT_SKIPPED 0x00 ///< P1.5 pin is not skipped by the crossbar.
1755      =2  #define P1SKIP_B5__SKIPPED     0x20 ///< P1.5 pin is skipped by the crossbar.    
1756      =2                                                                                   
1757      =2  #define P1SKIP_B6__BMASK       0x40 ///< Port 1 Bit 6 Skip                       
1758      =2  #define P1SKIP_B6__SHIFT       0x06 ///< Port 1 Bit 6 Skip                       
1759      =2  #define P1SKIP_B6__NOT_SKIPPED 0x00 ///< P1.6 pin is not skipped by the crossbar.
1760      =2  #define P1SKIP_B6__SKIPPED     0x40 ///< P1.6 pin is skipped by the crossbar.    
1761      =2                                                                                   
1762      =2  #define P1SKIP_B7__BMASK       0x80 ///< Port 1 Bit 7 Skip                       
1763      =2  #define P1SKIP_B7__SHIFT       0x07 ///< Port 1 Bit 7 Skip                       
1764      =2  #define P1SKIP_B7__NOT_SKIPPED 0x00 ///< P1.7 pin is not skipped by the crossbar.
1765      =2  #define P1SKIP_B7__SKIPPED     0x80 ///< P1.7 pin is skipped by the crossbar.    
1766      =2                                                                                   
1767      =2  //------------------------------------------------------------------------------
1768      =2  // P2 Enums (Port 2 Pin Latch @ 0xA0)
1769      =2  //------------------------------------------------------------------------------
1770      =2  #define P2_B0__BMASK 0x01 ///< Port 2 Bit 0 Latch                            
1771      =2  #define P2_B0__SHIFT 0x00 ///< Port 2 Bit 0 Latch                            
1772      =2  #define P2_B0__LOW   0x00 ///< P2.0 is low. Set P2.0 to drive low.           
1773      =2  #define P2_B0__HIGH  0x01 ///< P2.0 is high. Set P2.0 to drive or float high.
1774      =2                                                                               
1775      =2  #define P2_B1__BMASK 0x02 ///< Port 2 Bit 1 Latch                            
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 48  

1776      =2  #define P2_B1__SHIFT 0x01 ///< Port 2 Bit 1 Latch                            
1777      =2  #define P2_B1__LOW   0x00 ///< P2.1 is low. Set P2.1 to drive low.           
1778      =2  #define P2_B1__HIGH  0x02 ///< P2.1 is high. Set P2.1 to drive or float high.
1779      =2                                                                               
1780      =2  #define P2_B2__BMASK 0x04 ///< Port 2 Bit 2 Latch                            
1781      =2  #define P2_B2__SHIFT 0x02 ///< Port 2 Bit 2 Latch                            
1782      =2  #define P2_B2__LOW   0x00 ///< P2.2 is low. Set P2.2 to drive low.           
1783      =2  #define P2_B2__HIGH  0x04 ///< P2.2 is high. Set P2.2 to drive or float high.
1784      =2                                                                               
1785      =2  #define P2_B3__BMASK 0x08 ///< Port 2 Bit 3 Latch                            
1786      =2  #define P2_B3__SHIFT 0x03 ///< Port 2 Bit 3 Latch                            
1787      =2  #define P2_B3__LOW   0x00 ///< P2.3 is low. Set P2.3 to drive low.           
1788      =2  #define P2_B3__HIGH  0x08 ///< P2.3 is high. Set P2.3 to drive or float high.
1789      =2                                                                               
1790      =2  #define P2_B4__BMASK 0x10 ///< Port 2 Bit 4 Latch                            
1791      =2  #define P2_B4__SHIFT 0x04 ///< Port 2 Bit 4 Latch                            
1792      =2  #define P2_B4__LOW   0x00 ///< P2.4 is low. Set P2.4 to drive low.           
1793      =2  #define P2_B4__HIGH  0x10 ///< P2.4 is high. Set P2.4 to drive or float high.
1794      =2                                                                               
1795      =2  #define P2_B5__BMASK 0x20 ///< Port 2 Bit 5 Latch                            
1796      =2  #define P2_B5__SHIFT 0x05 ///< Port 2 Bit 5 Latch                            
1797      =2  #define P2_B5__LOW   0x00 ///< P2.5 is low. Set P2.5 to drive low.           
1798      =2  #define P2_B5__HIGH  0x20 ///< P2.5 is high. Set P2.5 to drive or float high.
1799      =2                                                                               
1800      =2  #define P2_B6__BMASK 0x40 ///< Port 2 Bit 6 Latch                            
1801      =2  #define P2_B6__SHIFT 0x06 ///< Port 2 Bit 6 Latch                            
1802      =2  #define P2_B6__LOW   0x00 ///< P2.6 is low. Set P2.6 to drive low.           
1803      =2  #define P2_B6__HIGH  0x40 ///< P2.6 is high. Set P2.6 to drive or float high.
1804      =2                                                                               
1805      =2  #define P2_B7__BMASK 0x80 ///< Port 2 Bit 7 Latch                            
1806      =2  #define P2_B7__SHIFT 0x07 ///< Port 2 Bit 7 Latch                            
1807      =2  #define P2_B7__LOW   0x00 ///< P2.7 is low. Set P2.7 to drive low.           
1808      =2  #define P2_B7__HIGH  0x80 ///< P2.7 is high. Set P2.7 to drive or float high.
1809      =2                                                                               
1810      =2  //------------------------------------------------------------------------------
1811      =2  // P2MDIN Enums (Port 2 Input Mode @ 0xF3)
1812      =2  //------------------------------------------------------------------------------
1813      =2  #define P2MDIN_B0__BMASK   0x01 ///< Port 2 Bit 0 Input Mode                 
1814      =2  #define P2MDIN_B0__SHIFT   0x00 ///< Port 2 Bit 0 Input Mode                 
1815      =2  #define P2MDIN_B0__ANALOG  0x00 ///< P2.0 pin is configured for analog mode. 
1816      =2  #define P2MDIN_B0__DIGITAL 0x01 ///< P2.0 pin is configured for digital mode.
1817      =2                                                                               
1818      =2  #define P2MDIN_B1__BMASK   0x02 ///< Port 2 Bit 1 Input Mode                 
1819      =2  #define P2MDIN_B1__SHIFT   0x01 ///< Port 2 Bit 1 Input Mode                 
1820      =2  #define P2MDIN_B1__ANALOG  0x00 ///< P2.1 pin is configured for analog mode. 
1821      =2  #define P2MDIN_B1__DIGITAL 0x02 ///< P2.1 pin is configured for digital mode.
1822      =2                                                                               
1823      =2  #define P2MDIN_B2__BMASK   0x04 ///< Port 2 Bit 2 Input Mode                 
1824      =2  #define P2MDIN_B2__SHIFT   0x02 ///< Port 2 Bit 2 Input Mode                 
1825      =2  #define P2MDIN_B2__ANALOG  0x00 ///< P2.2 pin is configured for analog mode. 
1826      =2  #define P2MDIN_B2__DIGITAL 0x04 ///< P2.2 pin is configured for digital mode.
1827      =2                                                                               
1828      =2  #define P2MDIN_B3__BMASK   0x08 ///< Port 2 Bit 3 Input Mode                 
1829      =2  #define P2MDIN_B3__SHIFT   0x03 ///< Port 2 Bit 3 Input Mode                 
1830      =2  #define P2MDIN_B3__ANALOG  0x00 ///< P2.3 pin is configured for analog mode. 
1831      =2  #define P2MDIN_B3__DIGITAL 0x08 ///< P2.3 pin is configured for digital mode.
1832      =2                                                                               
1833      =2  #define P2MDIN_B4__BMASK   0x10 ///< Port 2 Bit 4 Input Mode                 
1834      =2  #define P2MDIN_B4__SHIFT   0x04 ///< Port 2 Bit 4 Input Mode                 
1835      =2  #define P2MDIN_B4__ANALOG  0x00 ///< P2.4 pin is configured for analog mode. 
1836      =2  #define P2MDIN_B4__DIGITAL 0x10 ///< P2.4 pin is configured for digital mode.
1837      =2                                                                               
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 49  

1838      =2  #define P2MDIN_B5__BMASK   0x20 ///< Port 2 Bit 5 Input Mode                 
1839      =2  #define P2MDIN_B5__SHIFT   0x05 ///< Port 2 Bit 5 Input Mode                 
1840      =2  #define P2MDIN_B5__ANALOG  0x00 ///< P2.5 pin is configured for analog mode. 
1841      =2  #define P2MDIN_B5__DIGITAL 0x20 ///< P2.5 pin is configured for digital mode.
1842      =2                                                                               
1843      =2  #define P2MDIN_B6__BMASK   0x40 ///< Port 2 Bit 6 Input Mode                 
1844      =2  #define P2MDIN_B6__SHIFT   0x06 ///< Port 2 Bit 6 Input Mode                 
1845      =2  #define P2MDIN_B6__ANALOG  0x00 ///< P2.6 pin is configured for analog mode. 
1846      =2  #define P2MDIN_B6__DIGITAL 0x40 ///< P2.6 pin is configured for digital mode.
1847      =2                                                                               
1848      =2  #define P2MDIN_B7__BMASK   0x80 ///< Port 2 Bit 7 Input Mode                 
1849      =2  #define P2MDIN_B7__SHIFT   0x07 ///< Port 2 Bit 7 Input Mode                 
1850      =2  #define P2MDIN_B7__ANALOG  0x00 ///< P2.7 pin is configured for analog mode. 
1851      =2  #define P2MDIN_B7__DIGITAL 0x80 ///< P2.7 pin is configured for digital mode.
1852      =2                                                                               
1853      =2  //------------------------------------------------------------------------------
1854      =2  // P2MDOUT Enums (Port 2 Output Mode @ 0xA6)
1855      =2  //------------------------------------------------------------------------------
1856      =2  #define P2MDOUT_B0__BMASK      0x01 ///< Port 2 Bit 0 Output Mode  
1857      =2  #define P2MDOUT_B0__SHIFT      0x00 ///< Port 2 Bit 0 Output Mode  
1858      =2  #define P2MDOUT_B0__OPEN_DRAIN 0x00 ///< P2.0 output is open-drain.
1859      =2  #define P2MDOUT_B0__PUSH_PULL  0x01 ///< P2.0 output is push-pull. 
1860      =2                                                                     
1861      =2  #define P2MDOUT_B1__BMASK      0x02 ///< Port 2 Bit 1 Output Mode  
1862      =2  #define P2MDOUT_B1__SHIFT      0x01 ///< Port 2 Bit 1 Output Mode  
1863      =2  #define P2MDOUT_B1__OPEN_DRAIN 0x00 ///< P2.1 output is open-drain.
1864      =2  #define P2MDOUT_B1__PUSH_PULL  0x02 ///< P2.1 output is push-pull. 
1865      =2                                                                     
1866      =2  #define P2MDOUT_B2__BMASK      0x04 ///< Port 2 Bit 2 Output Mode  
1867      =2  #define P2MDOUT_B2__SHIFT      0x02 ///< Port 2 Bit 2 Output Mode  
1868      =2  #define P2MDOUT_B2__OPEN_DRAIN 0x00 ///< P2.2 output is open-drain.
1869      =2  #define P2MDOUT_B2__PUSH_PULL  0x04 ///< P2.2 output is push-pull. 
1870      =2                                                                     
1871      =2  #define P2MDOUT_B3__BMASK      0x08 ///< Port 2 Bit 3 Output Mode  
1872      =2  #define P2MDOUT_B3__SHIFT      0x03 ///< Port 2 Bit 3 Output Mode  
1873      =2  #define P2MDOUT_B3__OPEN_DRAIN 0x00 ///< P2.3 output is open-drain.
1874      =2  #define P2MDOUT_B3__PUSH_PULL  0x08 ///< P2.3 output is push-pull. 
1875      =2                                                                     
1876      =2  #define P2MDOUT_B4__BMASK      0x10 ///< Port 2 Bit 4 Output Mode  
1877      =2  #define P2MDOUT_B4__SHIFT      0x04 ///< Port 2 Bit 4 Output Mode  
1878      =2  #define P2MDOUT_B4__OPEN_DRAIN 0x00 ///< P2.4 output is open-drain.
1879      =2  #define P2MDOUT_B4__PUSH_PULL  0x10 ///< P2.4 output is push-pull. 
1880      =2                                                                     
1881      =2  #define P2MDOUT_B5__BMASK      0x20 ///< Port 2 Bit 5 Output Mode  
1882      =2  #define P2MDOUT_B5__SHIFT      0x05 ///< Port 2 Bit 5 Output Mode  
1883      =2  #define P2MDOUT_B5__OPEN_DRAIN 0x00 ///< P2.5 output is open-drain.
1884      =2  #define P2MDOUT_B5__PUSH_PULL  0x20 ///< P2.5 output is push-pull. 
1885      =2                                                                     
1886      =2  #define P2MDOUT_B6__BMASK      0x40 ///< Port 2 Bit 6 Output Mode  
1887      =2  #define P2MDOUT_B6__SHIFT      0x06 ///< Port 2 Bit 6 Output Mode  
1888      =2  #define P2MDOUT_B6__OPEN_DRAIN 0x00 ///< P2.6 output is open-drain.
1889      =2  #define P2MDOUT_B6__PUSH_PULL  0x40 ///< P2.6 output is push-pull. 
1890      =2                                                                     
1891      =2  #define P2MDOUT_B7__BMASK      0x80 ///< Port 2 Bit 7 Output Mode  
1892      =2  #define P2MDOUT_B7__SHIFT      0x07 ///< Port 2 Bit 7 Output Mode  
1893      =2  #define P2MDOUT_B7__OPEN_DRAIN 0x00 ///< P2.7 output is open-drain.
1894      =2  #define P2MDOUT_B7__PUSH_PULL  0x80 ///< P2.7 output is push-pull. 
1895      =2                                                                     
1896      =2  //------------------------------------------------------------------------------
1897      =2  // P2SKIP Enums (Port 2 Skip @ 0xD6)
1898      =2  //------------------------------------------------------------------------------
1899      =2  #define P2SKIP_B0__BMASK       0x01 ///< Port 2 Bit 0 Skip                       
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 50  

1900      =2  #define P2SKIP_B0__SHIFT       0x00 ///< Port 2 Bit 0 Skip                       
1901      =2  #define P2SKIP_B0__NOT_SKIPPED 0x00 ///< P2.0 pin is not skipped by the crossbar.
1902      =2  #define P2SKIP_B0__SKIPPED     0x01 ///< P2.0 pin is skipped by the crossbar.    
1903      =2                                                                                   
1904      =2  #define P2SKIP_B1__BMASK       0x02 ///< Port 2 Bit 1 Skip                       
1905      =2  #define P2SKIP_B1__SHIFT       0x01 ///< Port 2 Bit 1 Skip                       
1906      =2  #define P2SKIP_B1__NOT_SKIPPED 0x00 ///< P2.1 pin is not skipped by the crossbar.
1907      =2  #define P2SKIP_B1__SKIPPED     0x02 ///< P2.1 pin is skipped by the crossbar.    
1908      =2                                                                                   
1909      =2  #define P2SKIP_B2__BMASK       0x04 ///< Port 2 Bit 2 Skip                       
1910      =2  #define P2SKIP_B2__SHIFT       0x02 ///< Port 2 Bit 2 Skip                       
1911      =2  #define P2SKIP_B2__NOT_SKIPPED 0x00 ///< P2.2 pin is not skipped by the crossbar.
1912      =2  #define P2SKIP_B2__SKIPPED     0x04 ///< P2.2 pin is skipped by the crossbar.    
1913      =2                                                                                   
1914      =2  #define P2SKIP_B3__BMASK       0x08 ///< Port 2 Bit 3 Skip                       
1915      =2  #define P2SKIP_B3__SHIFT       0x03 ///< Port 2 Bit 3 Skip                       
1916      =2  #define P2SKIP_B3__NOT_SKIPPED 0x00 ///< P2.3 pin is not skipped by the crossbar.
1917      =2  #define P2SKIP_B3__SKIPPED     0x08 ///< P2.3 pin is skipped by the crossbar.    
1918      =2                                                                                   
1919      =2  #define P2SKIP_B4__BMASK       0x10 ///< Port 2 Bit 4 Skip                       
1920      =2  #define P2SKIP_B4__SHIFT       0x04 ///< Port 2 Bit 4 Skip                       
1921      =2  #define P2SKIP_B4__NOT_SKIPPED 0x00 ///< P2.4 pin is not skipped by the crossbar.
1922      =2  #define P2SKIP_B4__SKIPPED     0x10 ///< P2.4 pin is skipped by the crossbar.    
1923      =2                                                                                   
1924      =2  #define P2SKIP_B5__BMASK       0x20 ///< Port 2 Bit 5 Skip                       
1925      =2  #define P2SKIP_B5__SHIFT       0x05 ///< Port 2 Bit 5 Skip                       
1926      =2  #define P2SKIP_B5__NOT_SKIPPED 0x00 ///< P2.5 pin is not skipped by the crossbar.
1927      =2  #define P2SKIP_B5__SKIPPED     0x20 ///< P2.5 pin is skipped by the crossbar.    
1928      =2                                                                                   
1929      =2  #define P2SKIP_B6__BMASK       0x40 ///< Port 2 Bit 6 Skip                       
1930      =2  #define P2SKIP_B6__SHIFT       0x06 ///< Port 2 Bit 6 Skip                       
1931      =2  #define P2SKIP_B6__NOT_SKIPPED 0x00 ///< P2.6 pin is not skipped by the crossbar.
1932      =2  #define P2SKIP_B6__SKIPPED     0x40 ///< P2.6 pin is skipped by the crossbar.    
1933      =2                                                                                   
1934      =2  #define P2SKIP_B7__BMASK       0x80 ///< Port 2 Bit 7 Skip                       
1935      =2  #define P2SKIP_B7__SHIFT       0x07 ///< Port 2 Bit 7 Skip                       
1936      =2  #define P2SKIP_B7__NOT_SKIPPED 0x00 ///< P2.7 pin is not skipped by the crossbar.
1937      =2  #define P2SKIP_B7__SKIPPED     0x80 ///< P2.7 pin is skipped by the crossbar.    
1938      =2                                                                                   
1939      =2  //------------------------------------------------------------------------------
1940      =2  // P3 Enums (Port 3 Pin Latch @ 0xB0)
1941      =2  //------------------------------------------------------------------------------
1942      =2  #define P3_B0__BMASK 0x01 ///< Port 3 Bit 0 Latch                            
1943      =2  #define P3_B0__SHIFT 0x00 ///< Port 3 Bit 0 Latch                            
1944      =2  #define P3_B0__LOW   0x00 ///< P3.0 is low. Set P3.0 to drive low.           
1945      =2  #define P3_B0__HIGH  0x01 ///< P3.0 is high. Set P3.0 to drive or float high.
1946      =2                                                                               
1947      =2  #define P3_B1__BMASK 0x02 ///< Port 3 Bit 1 Latch                            
1948      =2  #define P3_B1__SHIFT 0x01 ///< Port 3 Bit 1 Latch                            
1949      =2  #define P3_B1__LOW   0x00 ///< P3.1 is low. Set P3.1 to drive low.           
1950      =2  #define P3_B1__HIGH  0x02 ///< P3.1 is high. Set P3.1 to drive or float high.
1951      =2                                                                               
1952      =2  #define P3_B2__BMASK 0x04 ///< Port 3 Bit 2 Latch                            
1953      =2  #define P3_B2__SHIFT 0x02 ///< Port 3 Bit 2 Latch                            
1954      =2  #define P3_B2__LOW   0x00 ///< P3.2 is low. Set P3.2 to drive low.           
1955      =2  #define P3_B2__HIGH  0x04 ///< P3.2 is high. Set P3.2 to drive or float high.
1956      =2                                                                               
1957      =2  #define P3_B3__BMASK 0x08 ///< Port 3 Bit 3 Latch                            
1958      =2  #define P3_B3__SHIFT 0x03 ///< Port 3 Bit 3 Latch                            
1959      =2  #define P3_B3__LOW   0x00 ///< P3.3 is low. Set P3.3 to drive low.           
1960      =2  #define P3_B3__HIGH  0x08 ///< P3.3 is high. Set P3.3 to drive or float high.
1961      =2                                                                               
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 51  

1962      =2  #define P3_B4__BMASK 0x10 ///< Port 3 Bit 4 Latch                            
1963      =2  #define P3_B4__SHIFT 0x04 ///< Port 3 Bit 4 Latch                            
1964      =2  #define P3_B4__LOW   0x00 ///< P3.4 is low. Set P3.4 to drive low.           
1965      =2  #define P3_B4__HIGH  0x10 ///< P3.4 is high. Set P3.4 to drive or float high.
1966      =2                                                                               
1967      =2  #define P3_B5__BMASK 0x20 ///< Port 3 Bit 5 Latch                            
1968      =2  #define P3_B5__SHIFT 0x05 ///< Port 3 Bit 5 Latch                            
1969      =2  #define P3_B5__LOW   0x00 ///< P3.5 is low. Set P3.5 to drive low.           
1970      =2  #define P3_B5__HIGH  0x20 ///< P3.5 is high. Set P3.5 to drive or float high.
1971      =2                                                                               
1972      =2  #define P3_B6__BMASK 0x40 ///< Port 3 Bit 6 Latch                            
1973      =2  #define P3_B6__SHIFT 0x06 ///< Port 3 Bit 6 Latch                            
1974      =2  #define P3_B6__LOW   0x00 ///< P3.6 is low. Set P3.6 to drive low.           
1975      =2  #define P3_B6__HIGH  0x40 ///< P3.6 is high. Set P3.6 to drive or float high.
1976      =2                                                                               
1977      =2  #define P3_B7__BMASK 0x80 ///< Port 3 Bit 7 Latch                            
1978      =2  #define P3_B7__SHIFT 0x07 ///< Port 3 Bit 7 Latch                            
1979      =2  #define P3_B7__LOW   0x00 ///< P3.7 is low. Set P3.7 to drive low.           
1980      =2  #define P3_B7__HIGH  0x80 ///< P3.7 is high. Set P3.7 to drive or float high.
1981      =2                                                                               
1982      =2  //------------------------------------------------------------------------------
1983      =2  // P3MDIN Enums (Port 3 Input Mode @ 0xF4)
1984      =2  //------------------------------------------------------------------------------
1985      =2  #define P3MDIN_B0__BMASK   0x01 ///< Port 3 Bit 0 Input Mode                 
1986      =2  #define P3MDIN_B0__SHIFT   0x00 ///< Port 3 Bit 0 Input Mode                 
1987      =2  #define P3MDIN_B0__ANALOG  0x00 ///< P3.0 pin is configured for analog mode. 
1988      =2  #define P3MDIN_B0__DIGITAL 0x01 ///< P3.0 pin is configured for digital mode.
1989      =2                                                                               
1990      =2  #define P3MDIN_B1__BMASK   0x02 ///< Port 3 Bit 1 Input Mode                 
1991      =2  #define P3MDIN_B1__SHIFT   0x01 ///< Port 3 Bit 1 Input Mode                 
1992      =2  #define P3MDIN_B1__ANALOG  0x00 ///< P3.1 pin is configured for analog mode. 
1993      =2  #define P3MDIN_B1__DIGITAL 0x02 ///< P3.1 pin is configured for digital mode.
1994      =2                                                                               
1995      =2  #define P3MDIN_B2__BMASK   0x04 ///< Port 3 Bit 2 Input Mode                 
1996      =2  #define P3MDIN_B2__SHIFT   0x02 ///< Port 3 Bit 2 Input Mode                 
1997      =2  #define P3MDIN_B2__ANALOG  0x00 ///< P3.2 pin is configured for analog mode. 
1998      =2  #define P3MDIN_B2__DIGITAL 0x04 ///< P3.2 pin is configured for digital mode.
1999      =2                                                                               
2000      =2  #define P3MDIN_B3__BMASK   0x08 ///< Port 3 Bit 3 Input Mode                 
2001      =2  #define P3MDIN_B3__SHIFT   0x03 ///< Port 3 Bit 3 Input Mode                 
2002      =2  #define P3MDIN_B3__ANALOG  0x00 ///< P3.3 pin is configured for analog mode. 
2003      =2  #define P3MDIN_B3__DIGITAL 0x08 ///< P3.3 pin is configured for digital mode.
2004      =2                                                                               
2005      =2  #define P3MDIN_B4__BMASK   0x10 ///< Port 3 Bit 4 Input Mode                 
2006      =2  #define P3MDIN_B4__SHIFT   0x04 ///< Port 3 Bit 4 Input Mode                 
2007      =2  #define P3MDIN_B4__ANALOG  0x00 ///< P3.4 pin is configured for analog mode. 
2008      =2  #define P3MDIN_B4__DIGITAL 0x10 ///< P3.4 pin is configured for digital mode.
2009      =2                                                                               
2010      =2  #define P3MDIN_B5__BMASK   0x20 ///< Port 3 Bit 5 Input Mode                 
2011      =2  #define P3MDIN_B5__SHIFT   0x05 ///< Port 3 Bit 5 Input Mode                 
2012      =2  #define P3MDIN_B5__ANALOG  0x00 ///< P3.5 pin is configured for analog mode. 
2013      =2  #define P3MDIN_B5__DIGITAL 0x20 ///< P3.5 pin is configured for digital mode.
2014      =2                                                                               
2015      =2  #define P3MDIN_B6__BMASK   0x40 ///< Port 3 Bit 6 Input Mode                 
2016      =2  #define P3MDIN_B6__SHIFT   0x06 ///< Port 3 Bit 6 Input Mode                 
2017      =2  #define P3MDIN_B6__ANALOG  0x00 ///< P3.6 pin is configured for analog mode. 
2018      =2  #define P3MDIN_B6__DIGITAL 0x40 ///< P3.6 pin is configured for digital mode.
2019      =2                                                                               
2020      =2  #define P3MDIN_B7__BMASK   0x80 ///< Port 3 Bit 7 Input Mode                 
2021      =2  #define P3MDIN_B7__SHIFT   0x07 ///< Port 3 Bit 7 Input Mode                 
2022      =2  #define P3MDIN_B7__ANALOG  0x00 ///< P3.7 pin is configured for analog mode. 
2023      =2  #define P3MDIN_B7__DIGITAL 0x80 ///< P3.7 pin is configured for digital mode.
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 52  

2024      =2                                                                               
2025      =2  //------------------------------------------------------------------------------
2026      =2  // P3MDOUT Enums (Port 3 Output Mode @ 0xA7)
2027      =2  //------------------------------------------------------------------------------
2028      =2  #define P3MDOUT_B0__BMASK      0x01 ///< Port 3 Bit 0 Output Mode  
2029      =2  #define P3MDOUT_B0__SHIFT      0x00 ///< Port 3 Bit 0 Output Mode  
2030      =2  #define P3MDOUT_B0__OPEN_DRAIN 0x00 ///< P3.0 output is open-drain.
2031      =2  #define P3MDOUT_B0__PUSH_PULL  0x01 ///< P3.0 output is push-pull. 
2032      =2                                                                     
2033      =2  #define P3MDOUT_B1__BMASK      0x02 ///< Port 3 Bit 1 Output Mode  
2034      =2  #define P3MDOUT_B1__SHIFT      0x01 ///< Port 3 Bit 1 Output Mode  
2035      =2  #define P3MDOUT_B1__OPEN_DRAIN 0x00 ///< P3.1 output is open-drain.
2036      =2  #define P3MDOUT_B1__PUSH_PULL  0x02 ///< P3.1 output is push-pull. 
2037      =2                                                                     
2038      =2  #define P3MDOUT_B2__BMASK      0x04 ///< Port 3 Bit 2 Output Mode  
2039      =2  #define P3MDOUT_B2__SHIFT      0x02 ///< Port 3 Bit 2 Output Mode  
2040      =2  #define P3MDOUT_B2__OPEN_DRAIN 0x00 ///< P3.2 output is open-drain.
2041      =2  #define P3MDOUT_B2__PUSH_PULL  0x04 ///< P3.2 output is push-pull. 
2042      =2                                                                     
2043      =2  #define P3MDOUT_B3__BMASK      0x08 ///< Port 3 Bit 3 Output Mode  
2044      =2  #define P3MDOUT_B3__SHIFT      0x03 ///< Port 3 Bit 3 Output Mode  
2045      =2  #define P3MDOUT_B3__OPEN_DRAIN 0x00 ///< P3.3 output is open-drain.
2046      =2  #define P3MDOUT_B3__PUSH_PULL  0x08 ///< P3.3 output is push-pull. 
2047      =2                                                                     
2048      =2  #define P3MDOUT_B4__BMASK      0x10 ///< Port 3 Bit 4 Output Mode  
2049      =2  #define P3MDOUT_B4__SHIFT      0x04 ///< Port 3 Bit 4 Output Mode  
2050      =2  #define P3MDOUT_B4__OPEN_DRAIN 0x00 ///< P3.4 output is open-drain.
2051      =2  #define P3MDOUT_B4__PUSH_PULL  0x10 ///< P3.4 output is push-pull. 
2052      =2                                                                     
2053      =2  #define P3MDOUT_B5__BMASK      0x20 ///< Port 3 Bit 5 Output Mode  
2054      =2  #define P3MDOUT_B5__SHIFT      0x05 ///< Port 3 Bit 5 Output Mode  
2055      =2  #define P3MDOUT_B5__OPEN_DRAIN 0x00 ///< P3.5 output is open-drain.
2056      =2  #define P3MDOUT_B5__PUSH_PULL  0x20 ///< P3.5 output is push-pull. 
2057      =2                                                                     
2058      =2  #define P3MDOUT_B6__BMASK      0x40 ///< Port 3 Bit 6 Output Mode  
2059      =2  #define P3MDOUT_B6__SHIFT      0x06 ///< Port 3 Bit 6 Output Mode  
2060      =2  #define P3MDOUT_B6__OPEN_DRAIN 0x00 ///< P3.6 output is open-drain.
2061      =2  #define P3MDOUT_B6__PUSH_PULL  0x40 ///< P3.6 output is push-pull. 
2062      =2                                                                     
2063      =2  #define P3MDOUT_B7__BMASK      0x80 ///< Port 3 Bit 7 Output Mode  
2064      =2  #define P3MDOUT_B7__SHIFT      0x07 ///< Port 3 Bit 7 Output Mode  
2065      =2  #define P3MDOUT_B7__OPEN_DRAIN 0x00 ///< P3.7 output is open-drain.
2066      =2  #define P3MDOUT_B7__PUSH_PULL  0x80 ///< P3.7 output is push-pull. 
2067      =2                                                                     
2068      =2  //------------------------------------------------------------------------------
2069      =2  // P3SKIP Enums (Port 3 Skip @ 0xDF)
2070      =2  //------------------------------------------------------------------------------
2071      =2  #define P3SKIP_B0__BMASK       0x01 ///< Port 3 Bit 0 Skip                       
2072      =2  #define P3SKIP_B0__SHIFT       0x00 ///< Port 3 Bit 0 Skip                       
2073      =2  #define P3SKIP_B0__NOT_SKIPPED 0x00 ///< P3.0 pin is not skipped by the crossbar.
2074      =2  #define P3SKIP_B0__SKIPPED     0x01 ///< P3.0 pin is skipped by the crossbar.    
2075      =2                                                                                   
2076      =2  #define P3SKIP_B1__BMASK       0x02 ///< Port 3 Bit 1 Skip                       
2077      =2  #define P3SKIP_B1__SHIFT       0x01 ///< Port 3 Bit 1 Skip                       
2078      =2  #define P3SKIP_B1__NOT_SKIPPED 0x00 ///< P3.1 pin is not skipped by the crossbar.
2079      =2  #define P3SKIP_B1__SKIPPED     0x02 ///< P3.1 pin is skipped by the crossbar.    
2080      =2                                                                                   
2081      =2  #define P3SKIP_B2__BMASK       0x04 ///< Port 3 Bit 2 Skip                       
2082      =2  #define P3SKIP_B2__SHIFT       0x02 ///< Port 3 Bit 2 Skip                       
2083      =2  #define P3SKIP_B2__NOT_SKIPPED 0x00 ///< P3.2 pin is not skipped by the crossbar.
2084      =2  #define P3SKIP_B2__SKIPPED     0x04 ///< P3.2 pin is skipped by the crossbar.    
2085      =2                                                                                   
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 53  

2086      =2  #define P3SKIP_B3__BMASK       0x08 ///< Port 3 Bit 3 Skip                       
2087      =2  #define P3SKIP_B3__SHIFT       0x03 ///< Port 3 Bit 3 Skip                       
2088      =2  #define P3SKIP_B3__NOT_SKIPPED 0x00 ///< P3.3 pin is not skipped by the crossbar.
2089      =2  #define P3SKIP_B3__SKIPPED     0x08 ///< P3.3 pin is skipped by the crossbar.    
2090      =2                                                                                   
2091      =2  #define P3SKIP_B4__BMASK       0x10 ///< Port 3 Bit 4 Skip                       
2092      =2  #define P3SKIP_B4__SHIFT       0x04 ///< Port 3 Bit 4 Skip                       
2093      =2  #define P3SKIP_B4__NOT_SKIPPED 0x00 ///< P3.4 pin is not skipped by the crossbar.
2094      =2  #define P3SKIP_B4__SKIPPED     0x10 ///< P3.4 pin is skipped by the crossbar.    
2095      =2                                                                                   
2096      =2  #define P3SKIP_B5__BMASK       0x20 ///< Port 3 Bit 5 Skip                       
2097      =2  #define P3SKIP_B5__SHIFT       0x05 ///< Port 3 Bit 5 Skip                       
2098      =2  #define P3SKIP_B5__NOT_SKIPPED 0x00 ///< P3.5 pin is not skipped by the crossbar.
2099      =2  #define P3SKIP_B5__SKIPPED     0x20 ///< P3.5 pin is skipped by the crossbar.    
2100      =2                                                                                   
2101      =2  #define P3SKIP_B6__BMASK       0x40 ///< Port 3 Bit 6 Skip                       
2102      =2  #define P3SKIP_B6__SHIFT       0x06 ///< Port 3 Bit 6 Skip                       
2103      =2  #define P3SKIP_B6__NOT_SKIPPED 0x00 ///< P3.6 pin is not skipped by the crossbar.
2104      =2  #define P3SKIP_B6__SKIPPED     0x40 ///< P3.6 pin is skipped by the crossbar.    
2105      =2                                                                                   
2106      =2  #define P3SKIP_B7__BMASK       0x80 ///< Port 3 Bit 7 Skip                       
2107      =2  #define P3SKIP_B7__SHIFT       0x07 ///< Port 3 Bit 7 Skip                       
2108      =2  #define P3SKIP_B7__NOT_SKIPPED 0x00 ///< P3.7 pin is not skipped by the crossbar.
2109      =2  #define P3SKIP_B7__SKIPPED     0x80 ///< P3.7 pin is skipped by the crossbar.    
2110      =2                                                                                   
2111      =2  //------------------------------------------------------------------------------
2112      =2  // P4 Enums (Port 4 Pin Latch @ 0xC7)
2113      =2  //------------------------------------------------------------------------------
2114      =2  #define P4_B0__BMASK 0x01 ///< Port 4 Bit 0 Latch                            
2115      =2  #define P4_B0__SHIFT 0x00 ///< Port 4 Bit 0 Latch                            
2116      =2  #define P4_B0__LOW   0x00 ///< P4.0 is low. Set P4.0 to drive low.           
2117      =2  #define P4_B0__HIGH  0x01 ///< P4.0 is high. Set P4.0 to drive or float high.
2118      =2                                                                               
2119      =2  #define P4_B1__BMASK 0x02 ///< Port 4 Bit 1 Latch                            
2120      =2  #define P4_B1__SHIFT 0x01 ///< Port 4 Bit 1 Latch                            
2121      =2  #define P4_B1__LOW   0x00 ///< P4.1 is low. Set P4.1 to drive low.           
2122      =2  #define P4_B1__HIGH  0x02 ///< P4.1 is high. Set P4.1 to drive or float high.
2123      =2                                                                               
2124      =2  #define P4_B2__BMASK 0x04 ///< Port 4 Bit 2 Latch                            
2125      =2  #define P4_B2__SHIFT 0x02 ///< Port 4 Bit 2 Latch                            
2126      =2  #define P4_B2__LOW   0x00 ///< P4.2 is low. Set P4.2 to drive low.           
2127      =2  #define P4_B2__HIGH  0x04 ///< P4.2 is high. Set P4.2 to drive or float high.
2128      =2                                                                               
2129      =2  #define P4_B3__BMASK 0x08 ///< Port 4 Bit 3 Latch                            
2130      =2  #define P4_B3__SHIFT 0x03 ///< Port 4 Bit 3 Latch                            
2131      =2  #define P4_B3__LOW   0x00 ///< P4.3 is low. Set P4.3 to drive low.           
2132      =2  #define P4_B3__HIGH  0x08 ///< P4.3 is high. Set P4.3 to drive or float high.
2133      =2                                                                               
2134      =2  #define P4_B4__BMASK 0x10 ///< Port 4 Bit 4 Latch                            
2135      =2  #define P4_B4__SHIFT 0x04 ///< Port 4 Bit 4 Latch                            
2136      =2  #define P4_B4__LOW   0x00 ///< P4.4 is low. Set P4.4 to drive low.           
2137      =2  #define P4_B4__HIGH  0x10 ///< P4.4 is high. Set P4.4 to drive or float high.
2138      =2                                                                               
2139      =2  #define P4_B5__BMASK 0x20 ///< Port 4 Bit 5 Latch                            
2140      =2  #define P4_B5__SHIFT 0x05 ///< Port 4 Bit 5 Latch                            
2141      =2  #define P4_B5__LOW   0x00 ///< P4.5 is low. Set P4.5 to drive low.           
2142      =2  #define P4_B5__HIGH  0x20 ///< P4.5 is high. Set P4.5 to drive or float high.
2143      =2                                                                               
2144      =2  #define P4_B6__BMASK 0x40 ///< Port 4 Bit 6 Latch                            
2145      =2  #define P4_B6__SHIFT 0x06 ///< Port 4 Bit 6 Latch                            
2146      =2  #define P4_B6__LOW   0x00 ///< P4.6 is low. Set P4.6 to drive low.           
2147      =2  #define P4_B6__HIGH  0x40 ///< P4.6 is high. Set P4.6 to drive or float high.
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 54  

2148      =2                                                                               
2149      =2  #define P4_B7__BMASK 0x80 ///< Port 4 Bit 7 Latch                            
2150      =2  #define P4_B7__SHIFT 0x07 ///< Port 4 Bit 7 Latch                            
2151      =2  #define P4_B7__LOW   0x00 ///< P4.7 is low. Set P4.7 to drive low.           
2152      =2  #define P4_B7__HIGH  0x80 ///< P4.7 is high. Set P4.7 to drive or float high.
2153      =2                                                                               
2154      =2  //------------------------------------------------------------------------------
2155      =2  // P4MDIN Enums (Port 4 Input Mode @ 0xF5)
2156      =2  //------------------------------------------------------------------------------
2157      =2  #define P4MDIN_B0__BMASK   0x01 ///< Port 4 Bit 0 Input Mode                 
2158      =2  #define P4MDIN_B0__SHIFT   0x00 ///< Port 4 Bit 0 Input Mode                 
2159      =2  #define P4MDIN_B0__ANALOG  0x00 ///< P4.0 pin is configured for analog mode. 
2160      =2  #define P4MDIN_B0__DIGITAL 0x01 ///< P4.0 pin is configured for digital mode.
2161      =2                                                                               
2162      =2  #define P4MDIN_B1__BMASK   0x02 ///< Port 4 Bit 1 Input Mode                 
2163      =2  #define P4MDIN_B1__SHIFT   0x01 ///< Port 4 Bit 1 Input Mode                 
2164      =2  #define P4MDIN_B1__ANALOG  0x00 ///< P4.1 pin is configured for analog mode. 
2165      =2  #define P4MDIN_B1__DIGITAL 0x02 ///< P4.1 pin is configured for digital mode.
2166      =2                                                                               
2167      =2  #define P4MDIN_B2__BMASK   0x04 ///< Port 4 Bit 2 Input Mode                 
2168      =2  #define P4MDIN_B2__SHIFT   0x02 ///< Port 4 Bit 2 Input Mode                 
2169      =2  #define P4MDIN_B2__ANALOG  0x00 ///< P4.2 pin is configured for analog mode. 
2170      =2  #define P4MDIN_B2__DIGITAL 0x04 ///< P4.2 pin is configured for digital mode.
2171      =2                                                                               
2172      =2  #define P4MDIN_B3__BMASK   0x08 ///< Port 4 Bit 3 Input Mode                 
2173      =2  #define P4MDIN_B3__SHIFT   0x03 ///< Port 4 Bit 3 Input Mode                 
2174      =2  #define P4MDIN_B3__ANALOG  0x00 ///< P4.3 pin is configured for analog mode. 
2175      =2  #define P4MDIN_B3__DIGITAL 0x08 ///< P4.3 pin is configured for digital mode.
2176      =2                                                                               
2177      =2  #define P4MDIN_B4__BMASK   0x10 ///< Port 4 Bit 4 Input Mode                 
2178      =2  #define P4MDIN_B4__SHIFT   0x04 ///< Port 4 Bit 4 Input Mode                 
2179      =2  #define P4MDIN_B4__ANALOG  0x00 ///< P4.4 pin is configured for analog mode. 
2180      =2  #define P4MDIN_B4__DIGITAL 0x10 ///< P4.4 pin is configured for digital mode.
2181      =2                                                                               
2182      =2  #define P4MDIN_B5__BMASK   0x20 ///< Port 4 Bit 5 Input Mode                 
2183      =2  #define P4MDIN_B5__SHIFT   0x05 ///< Port 4 Bit 5 Input Mode                 
2184      =2  #define P4MDIN_B5__ANALOG  0x00 ///< P4.5 pin is configured for analog mode. 
2185      =2  #define P4MDIN_B5__DIGITAL 0x20 ///< P4.5 pin is configured for digital mode.
2186      =2                                                                               
2187      =2  #define P4MDIN_B6__BMASK   0x40 ///< Port 4 Bit 6 Input Mode                 
2188      =2  #define P4MDIN_B6__SHIFT   0x06 ///< Port 4 Bit 6 Input Mode                 
2189      =2  #define P4MDIN_B6__ANALOG  0x00 ///< P4.6 pin is configured for analog mode. 
2190      =2  #define P4MDIN_B6__DIGITAL 0x40 ///< P4.6 pin is configured for digital mode.
2191      =2                                                                               
2192      =2  #define P4MDIN_B7__BMASK   0x80 ///< Port 4 Bit 7 Input Mode                 
2193      =2  #define P4MDIN_B7__SHIFT   0x07 ///< Port 4 Bit 7 Input Mode                 
2194      =2  #define P4MDIN_B7__ANALOG  0x00 ///< P4.7 pin is configured for analog mode. 
2195      =2  #define P4MDIN_B7__DIGITAL 0x80 ///< P4.7 pin is configured for digital mode.
2196      =2                                                                               
2197      =2  //------------------------------------------------------------------------------
2198      =2  // P4MDOUT Enums (Port 4 Output Mode @ 0xAE)
2199      =2  //------------------------------------------------------------------------------
2200      =2  #define P4MDOUT_B0__BMASK      0x01 ///< Port 4 Bit 0 Output Mode  
2201      =2  #define P4MDOUT_B0__SHIFT      0x00 ///< Port 4 Bit 0 Output Mode  
2202      =2  #define P4MDOUT_B0__OPEN_DRAIN 0x00 ///< P4.0 output is open-drain.
2203      =2  #define P4MDOUT_B0__PUSH_PULL  0x01 ///< P4.0 output is push-pull. 
2204      =2                                                                     
2205      =2  #define P4MDOUT_B1__BMASK      0x02 ///< Port 4 Bit 1 Output Mode  
2206      =2  #define P4MDOUT_B1__SHIFT      0x01 ///< Port 4 Bit 1 Output Mode  
2207      =2  #define P4MDOUT_B1__OPEN_DRAIN 0x00 ///< P4.1 output is open-drain.
2208      =2  #define P4MDOUT_B1__PUSH_PULL  0x02 ///< P4.1 output is push-pull. 
2209      =2                                                                     
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 55  

2210      =2  #define P4MDOUT_B2__BMASK      0x04 ///< Port 4 Bit 2 Output Mode  
2211      =2  #define P4MDOUT_B2__SHIFT      0x02 ///< Port 4 Bit 2 Output Mode  
2212      =2  #define P4MDOUT_B2__OPEN_DRAIN 0x00 ///< P4.2 output is open-drain.
2213      =2  #define P4MDOUT_B2__PUSH_PULL  0x04 ///< P4.2 output is push-pull. 
2214      =2                                                                     
2215      =2  #define P4MDOUT_B3__BMASK      0x08 ///< Port 4 Bit 3 Output Mode  
2216      =2  #define P4MDOUT_B3__SHIFT      0x03 ///< Port 4 Bit 3 Output Mode  
2217      =2  #define P4MDOUT_B3__OPEN_DRAIN 0x00 ///< P4.3 output is open-drain.
2218      =2  #define P4MDOUT_B3__PUSH_PULL  0x08 ///< P4.3 output is push-pull. 
2219      =2                                                                     
2220      =2  #define P4MDOUT_B4__BMASK      0x10 ///< Port 4 Bit 4 Output Mode  
2221      =2  #define P4MDOUT_B4__SHIFT      0x04 ///< Port 4 Bit 4 Output Mode  
2222      =2  #define P4MDOUT_B4__OPEN_DRAIN 0x00 ///< P4.4 output is open-drain.
2223      =2  #define P4MDOUT_B4__PUSH_PULL  0x10 ///< P4.4 output is push-pull. 
2224      =2                                                                     
2225      =2  #define P4MDOUT_B5__BMASK      0x20 ///< Port 4 Bit 5 Output Mode  
2226      =2  #define P4MDOUT_B5__SHIFT      0x05 ///< Port 4 Bit 5 Output Mode  
2227      =2  #define P4MDOUT_B5__OPEN_DRAIN 0x00 ///< P4.5 output is open-drain.
2228      =2  #define P4MDOUT_B5__PUSH_PULL  0x20 ///< P4.5 output is push-pull. 
2229      =2                                                                     
2230      =2  #define P4MDOUT_B6__BMASK      0x40 ///< Port 4 Bit 6 Output Mode  
2231      =2  #define P4MDOUT_B6__SHIFT      0x06 ///< Port 4 Bit 6 Output Mode  
2232      =2  #define P4MDOUT_B6__OPEN_DRAIN 0x00 ///< P4.6 output is open-drain.
2233      =2  #define P4MDOUT_B6__PUSH_PULL  0x40 ///< P4.6 output is push-pull. 
2234      =2                                                                     
2235      =2  #define P4MDOUT_B7__BMASK      0x80 ///< Port 4 Bit 7 Output Mode  
2236      =2  #define P4MDOUT_B7__SHIFT      0x07 ///< Port 4 Bit 7 Output Mode  
2237      =2  #define P4MDOUT_B7__OPEN_DRAIN 0x00 ///< P4.7 output is open-drain.
2238      =2  #define P4MDOUT_B7__PUSH_PULL  0x80 ///< P4.7 output is push-pull. 
2239      =2                                                                     
2240      =2  //------------------------------------------------------------------------------
2241      =2  // RSTSRC Enums (Reset Source @ 0xEF)
2242      =2  //------------------------------------------------------------------------------
2243      =2  #define RSTSRC_PINRSF__BMASK   0x01 ///< HW Pin Reset Flag                                                
             -    
2244      =2  #define RSTSRC_PINRSF__SHIFT   0x00 ///< HW Pin Reset Flag                                                
             -    
2245      =2  #define RSTSRC_PINRSF__NOT_SET 0x00 ///< The RSTb pin did not cause the last reset.                       
             -    
2246      =2  #define RSTSRC_PINRSF__SET     0x01 ///< The RSTb pin caused the last reset.                              
             -    
2247      =2                                                                                                            
             -    
2248      =2  #define RSTSRC_PORSF__BMASK    0x02 ///< Power-On / Supply Monitor Reset Flag, and Supply Monitor Reset En
             -able
2249      =2  #define RSTSRC_PORSF__SHIFT    0x01 ///< Power-On / Supply Monitor Reset Flag, and Supply Monitor Reset En
             -able
2250      =2  #define RSTSRC_PORSF__NOT_SET  0x00 ///< A power-on or supply monitor reset did not occur.                
             -    
2251      =2  #define RSTSRC_PORSF__SET      0x02 ///< A power-on or supply monitor reset occurred.                     
             -    
2252      =2                                                                                                            
             -    
2253      =2  #define RSTSRC_MCDRSF__BMASK   0x04 ///< Missing Clock Detector Enable and Flag                           
             -    
2254      =2  #define RSTSRC_MCDRSF__SHIFT   0x02 ///< Missing Clock Detector Enable and Flag                           
             -    
2255      =2  #define RSTSRC_MCDRSF__NOT_SET 0x00 ///< A missing clock detector reset did not occur.                    
             -    
2256      =2  #define RSTSRC_MCDRSF__SET     0x04 ///< A missing clock detector reset occurred.                         
             -    
2257      =2                                                                                                            
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 56  

             -    
2258      =2  #define RSTSRC_WDTRSF__BMASK   0x08 ///< Watchdog Timer Reset Flag                                        
             -    
2259      =2  #define RSTSRC_WDTRSF__SHIFT   0x03 ///< Watchdog Timer Reset Flag                                        
             -    
2260      =2  #define RSTSRC_WDTRSF__NOT_SET 0x00 ///< A watchdog timer overflow reset did not occur.                   
             -    
2261      =2  #define RSTSRC_WDTRSF__SET     0x08 ///< A watchdog timer overflow reset occurred.                        
             -    
2262      =2                                                                                                            
             -    
2263      =2  #define RSTSRC_SWRSF__BMASK    0x10 ///< Software Reset Force and Flag                                    
             -    
2264      =2  #define RSTSRC_SWRSF__SHIFT    0x04 ///< Software Reset Force and Flag                                    
             -    
2265      =2  #define RSTSRC_SWRSF__NOT_SET  0x00 ///< A software reset did not occur.                                  
             -    
2266      =2  #define RSTSRC_SWRSF__SET      0x10 ///< A software reset occurred.                                       
             -    
2267      =2                                                                                                            
             -    
2268      =2  #define RSTSRC_C0RSEF__BMASK   0x20 ///< Comparator0 Reset Enable and Flag                                
             -    
2269      =2  #define RSTSRC_C0RSEF__SHIFT   0x05 ///< Comparator0 Reset Enable and Flag                                
             -    
2270      =2  #define RSTSRC_C0RSEF__NOT_SET 0x00 ///< A Comparator 0 reset did not occur.                              
             -    
2271      =2  #define RSTSRC_C0RSEF__SET     0x20 ///< A Comparator 0 reset occurred.                                   
             -    
2272      =2                                                                                                            
             -    
2273      =2  #define RSTSRC_FERROR__BMASK   0x40 ///< Flash Error Reset Flag                                           
             -    
2274      =2  #define RSTSRC_FERROR__SHIFT   0x06 ///< Flash Error Reset Flag                                           
             -    
2275      =2  #define RSTSRC_FERROR__NOT_SET 0x00 ///< A flash error reset did not occur.                               
             -    
2276      =2  #define RSTSRC_FERROR__SET     0x40 ///< A flash error reset occurred.                                    
             -    
2277      =2                                                                                                            
             -    
2278      =2  #define RSTSRC_USBRSF__BMASK   0x80 ///< USB Reset Enable and Flag                                        
             -    
2279      =2  #define RSTSRC_USBRSF__SHIFT   0x07 ///< USB Reset Enable and Flag                                        
             -    
2280      =2  #define RSTSRC_USBRSF__NOT_SET 0x00 ///< A USB0 reset did not occur.                                      
             -    
2281      =2  #define RSTSRC_USBRSF__SET     0x80 ///< A USB0 reset occurred.                                           
             -    
2282      =2                                                                                                            
             -    
2283      =2  //------------------------------------------------------------------------------
2284      =2  // SFRPAGE Enums (SFR Page @ 0xBF)
2285      =2  //------------------------------------------------------------------------------
2286      =2  #define SFRPAGE_SFRPAGE__FMASK 0xFF ///< SFR Page
2287      =2  #define SFRPAGE_SFRPAGE__SHIFT 0x00 ///< SFR Page
2288      =2                                                   
2289      =2  //------------------------------------------------------------------------------
2290      =2  // SMB0ADM Enums (SMBus 0 Slave Address Mask @ 0xCE)
2291      =2  //------------------------------------------------------------------------------
2292      =2  #define SMB0ADM_EHACK__BMASK             0x01 ///< Hardware Acknowledge Enable                     
2293      =2  #define SMB0ADM_EHACK__SHIFT             0x00 ///< Hardware Acknowledge Enable                     
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 57  

2294      =2  #define SMB0ADM_EHACK__ADR_ACK_MANUAL    0x00 ///< Firmware must manually acknowledge all incoming 
2295      =2                                                ///< address and data bytes.                         
2296      =2  #define SMB0ADM_EHACK__ADR_ACK_AUTOMATIC 0x01 ///< Automatic slave address recognition and hardware
2297      =2                                                ///< acknowledge is enabled.                         
2298      =2                                                                                                     
2299      =2  #define SMB0ADM_SLVM__FMASK              0xFE ///< SMBus Slave Address Mask                        
2300      =2  #define SMB0ADM_SLVM__SHIFT              0x01 ///< SMBus Slave Address Mask                        
2301      =2                                                                                                     
2302      =2  //------------------------------------------------------------------------------
2303      =2  // SMB0ADR Enums (SMBus 0 Slave Address @ 0xCF)
2304      =2  //------------------------------------------------------------------------------
2305      =2  #define SMB0ADR_GC__BMASK      0x01 ///< General Call Address Enable        
2306      =2  #define SMB0ADR_GC__SHIFT      0x00 ///< General Call Address Enable        
2307      =2  #define SMB0ADR_GC__IGNORED    0x00 ///< General Call Address is ignored.   
2308      =2  #define SMB0ADR_GC__RECOGNIZED 0x01 ///< General Call Address is recognized.
2309      =2                                                                              
2310      =2  #define SMB0ADR_SLV__FMASK     0xFE ///< SMBus Hardware Slave Address       
2311      =2  #define SMB0ADR_SLV__SHIFT     0x01 ///< SMBus Hardware Slave Address       
2312      =2                                                                              
2313      =2  //------------------------------------------------------------------------------
2314      =2  // SMB0CF Enums (SMBus 0 Configuration @ 0xC1)
2315      =2  //------------------------------------------------------------------------------
2316      =2  #define SMB0CF_SMBCS__FMASK             0x03 ///< SMBus Clock Source Selection                     
2317      =2  #define SMB0CF_SMBCS__SHIFT             0x00 ///< SMBus Clock Source Selection                     
2318      =2  #define SMB0CF_SMBCS__TIMER0            0x00 ///< Timer 0 Overflow.                                
2319      =2  #define SMB0CF_SMBCS__TIMER1            0x01 ///< Timer 1 Overflow.                                
2320      =2  #define SMB0CF_SMBCS__TIMER2_HIGH       0x02 ///< Timer 2 High Byte Overflow.                      
2321      =2  #define SMB0CF_SMBCS__TIMER2_LOW        0x03 ///< Timer 2 Low Byte Overflow.                       
2322      =2                                                                                                     
2323      =2  #define SMB0CF_SMBFTE__BMASK            0x04 ///< SMBus Free Timeout Detection Enable              
2324      =2  #define SMB0CF_SMBFTE__SHIFT            0x02 ///< SMBus Free Timeout Detection Enable              
2325      =2  #define SMB0CF_SMBFTE__FREE_TO_DISABLED 0x00 ///< Disable bus free timeouts.                       
2326      =2  #define SMB0CF_SMBFTE__FREE_TO_ENABLED  0x04 ///< Enable bus free timeouts. The bus the bus will be
2327      =2                                               ///< considered free if SCL and SDA remain high for   
2328      =2                                               ///< more than 10 SMBus clock source periods.         
2329      =2                                                                                                     
2330      =2  #define SMB0CF_SMBTOE__BMASK            0x08 ///< SMBus SCL Timeout Detection Enable               
2331      =2  #define SMB0CF_SMBTOE__SHIFT            0x03 ///< SMBus SCL Timeout Detection Enable               
2332      =2  #define SMB0CF_SMBTOE__SCL_TO_DISABLED  0x00 ///< Disable SCL low timeouts.                        
2333      =2  #define SMB0CF_SMBTOE__SCL_TO_ENABLED   0x08 ///< Enable SCL low timeouts.                         
2334      =2                                                                                                     
2335      =2  #define SMB0CF_EXTHOLD__BMASK           0x10 ///< SMBus Setup and Hold Time Extension Enable       
2336      =2  #define SMB0CF_EXTHOLD__SHIFT           0x04 ///< SMBus Setup and Hold Time Extension Enable       
2337      =2  #define SMB0CF_EXTHOLD__DISABLED        0x00 ///< Disable SDA extended setup and hold times.       
2338      =2  #define SMB0CF_EXTHOLD__ENABLED         0x10 ///< Enable SDA extended setup and hold times.        
2339      =2                                                                                                     
2340      =2  #define SMB0CF_BUSY__BMASK              0x20 ///< SMBus Busy Indicator                             
2341      =2  #define SMB0CF_BUSY__SHIFT              0x05 ///< SMBus Busy Indicator                             
2342      =2  #define SMB0CF_BUSY__NOT_SET            0x00 ///< The bus is not busy.                             
2343      =2  #define SMB0CF_BUSY__SET                0x20 ///< The bus is busy and a transfer is currently in   
2344      =2                                               ///< progress.                                        
2345      =2                                                                                                     
2346      =2  #define SMB0CF_INH__BMASK               0x40 ///< SMBus Slave Inhibit                              
2347      =2  #define SMB0CF_INH__SHIFT               0x06 ///< SMBus Slave Inhibit                              
2348      =2  #define SMB0CF_INH__SLAVE_ENABLED       0x00 ///< Slave states are enabled.                        
2349      =2  #define SMB0CF_INH__SLAVE_DISABLED      0x40 ///< Slave states are inhibited.                      
2350      =2                                                                                                     
2351      =2  #define SMB0CF_ENSMB__BMASK             0x80 ///< SMBus Enable                                     
2352      =2  #define SMB0CF_ENSMB__SHIFT             0x07 ///< SMBus Enable                                     
2353      =2  #define SMB0CF_ENSMB__DISABLED          0x00 ///< Disable the SMBus module.                        
2354      =2  #define SMB0CF_ENSMB__ENABLED           0x80 ///< Enable the SMBus module.                         
2355      =2                                                                                                     
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 58  

2356      =2  //------------------------------------------------------------------------------
2357      =2  // SMB0CN0 Enums (SMBus 0 Control @ 0xC0)
2358      =2  //------------------------------------------------------------------------------
2359      =2  #define SMB0CN0_SI__BMASK           0x01 ///< SMBus Interrupt Flag                           
2360      =2  #define SMB0CN0_SI__SHIFT           0x00 ///< SMBus Interrupt Flag                           
2361      =2  #define SMB0CN0_SI__NOT_SET         0x00 ///<                                                
2362      =2  #define SMB0CN0_SI__SET             0x01 ///<                                                
2363      =2                                                                                               
2364      =2  #define SMB0CN0_ACK__BMASK          0x02 ///< SMBus Acknowledge                              
2365      =2  #define SMB0CN0_ACK__SHIFT          0x01 ///< SMBus Acknowledge                              
2366      =2  #define SMB0CN0_ACK__NOT_SET        0x00 ///< Generate a NACK, or the response was a NACK.   
2367      =2  #define SMB0CN0_ACK__SET            0x02 ///< Generate an ACK, or the response was an ACK.   
2368      =2                                                                                               
2369      =2  #define SMB0CN0_ARBLOST__BMASK      0x04 ///< SMBus Arbitration Lost Indicator               
2370      =2  #define SMB0CN0_ARBLOST__SHIFT      0x02 ///< SMBus Arbitration Lost Indicator               
2371      =2  #define SMB0CN0_ARBLOST__NOT_SET    0x00 ///< No arbitration error.                          
2372      =2  #define SMB0CN0_ARBLOST__ERROR      0x04 ///< Arbitration error occurred.                    
2373      =2                                                                                               
2374      =2  #define SMB0CN0_ACKRQ__BMASK        0x08 ///< SMBus Acknowledge Request                      
2375      =2  #define SMB0CN0_ACKRQ__SHIFT        0x03 ///< SMBus Acknowledge Request                      
2376      =2  #define SMB0CN0_ACKRQ__NOT_SET      0x00 ///< No ACK requested.                              
2377      =2  #define SMB0CN0_ACKRQ__REQUESTED    0x08 ///< ACK requested.                                 
2378      =2                                                                                               
2379      =2  #define SMB0CN0_STO__BMASK          0x10 ///< SMBus Stop Flag                                
2380      =2  #define SMB0CN0_STO__SHIFT          0x04 ///< SMBus Stop Flag                                
2381      =2  #define SMB0CN0_STO__NOT_SET        0x00 ///< A STOP is not pending.                         
2382      =2  #define SMB0CN0_STO__SET            0x10 ///< Generate a STOP or a STOP is currently pending.
2383      =2                                                                                               
2384      =2  #define SMB0CN0_STA__BMASK          0x20 ///< SMBus Start Flag                               
2385      =2  #define SMB0CN0_STA__SHIFT          0x05 ///< SMBus Start Flag                               
2386      =2  #define SMB0CN0_STA__NOT_SET        0x00 ///< A START was not detected.                      
2387      =2  #define SMB0CN0_STA__SET            0x20 ///< Generate a START, repeated START, or a START is
2388      =2                                           ///< currently pending.                             
2389      =2                                                                                               
2390      =2  #define SMB0CN0_TXMODE__BMASK       0x40 ///< SMBus Transmit Mode Indicator                  
2391      =2  #define SMB0CN0_TXMODE__SHIFT       0x06 ///< SMBus Transmit Mode Indicator                  
2392      =2  #define SMB0CN0_TXMODE__RECEIVER    0x00 ///< SMBus in Receiver Mode.                        
2393      =2  #define SMB0CN0_TXMODE__TRANSMITTER 0x40 ///< SMBus in Transmitter Mode.                     
2394      =2                                                                                               
2395      =2  #define SMB0CN0_MASTER__BMASK       0x80 ///< SMBus Master/Slave Indicator                   
2396      =2  #define SMB0CN0_MASTER__SHIFT       0x07 ///< SMBus Master/Slave Indicator                   
2397      =2  #define SMB0CN0_MASTER__SLAVE       0x00 ///< SMBus operating in slave mode.                 
2398      =2  #define SMB0CN0_MASTER__MASTER      0x80 ///< SMBus operating in master mode.                
2399      =2                                                                                               
2400      =2  //------------------------------------------------------------------------------
2401      =2  // SMB0DAT Enums (SMBus 0 Data @ 0xC2)
2402      =2  //------------------------------------------------------------------------------
2403      =2  #define SMB0DAT_SMB0DAT__FMASK 0xFF ///< SMBus 0 Data
2404      =2  #define SMB0DAT_SMB0DAT__SHIFT 0x00 ///< SMBus 0 Data
2405      =2                                                       
2406      =2  //------------------------------------------------------------------------------
2407      =2  // SMB1ADM Enums (SMBus 1 Slave Address Mask @ 0xCE)
2408      =2  //------------------------------------------------------------------------------
2409      =2  #define SMB1ADM_EHACK__BMASK             0x01 ///< Hardware Acknowledge Enable                     
2410      =2  #define SMB1ADM_EHACK__SHIFT             0x00 ///< Hardware Acknowledge Enable                     
2411      =2  #define SMB1ADM_EHACK__ADR_ACK_MANUAL    0x00 ///< Firmware must manually acknowledge all incoming 
2412      =2                                                ///< address and data bytes.                         
2413      =2  #define SMB1ADM_EHACK__ADR_ACK_AUTOMATIC 0x01 ///< Automatic slave address recognition and hardware
2414      =2                                                ///< acknowledge is enabled.                         
2415      =2                                                                                                     
2416      =2  #define SMB1ADM_SLVM__FMASK              0xFE ///< SMBus Slave Address Mask                        
2417      =2  #define SMB1ADM_SLVM__SHIFT              0x01 ///< SMBus Slave Address Mask                        
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 59  

2418      =2                                                                                                     
2419      =2  //------------------------------------------------------------------------------
2420      =2  // SMB1ADR Enums (SMBus 1 Slave Address @ 0xCF)
2421      =2  //------------------------------------------------------------------------------
2422      =2  #define SMB1ADR_GC__BMASK      0x01 ///< General Call Address Enable        
2423      =2  #define SMB1ADR_GC__SHIFT      0x00 ///< General Call Address Enable        
2424      =2  #define SMB1ADR_GC__IGNORED    0x00 ///< General Call Address is ignored.   
2425      =2  #define SMB1ADR_GC__RECOGNIZED 0x01 ///< General Call Address is recognized.
2426      =2                                                                              
2427      =2  #define SMB1ADR_SLV__FMASK     0xFE ///< SMBus Hardware Slave Address       
2428      =2  #define SMB1ADR_SLV__SHIFT     0x01 ///< SMBus Hardware Slave Address       
2429      =2                                                                              
2430      =2  //------------------------------------------------------------------------------
2431      =2  // SMB1CF Enums (SMBus 1 Configuration @ 0xC1)
2432      =2  //------------------------------------------------------------------------------
2433      =2  #define SMB1CF_SMBCS__FMASK             0x03 ///< SMBus Clock Source Selection                     
2434      =2  #define SMB1CF_SMBCS__SHIFT             0x00 ///< SMBus Clock Source Selection                     
2435      =2  #define SMB1CF_SMBCS__TIMER0            0x00 ///< Timer 0 Overflow.                                
2436      =2  #define SMB1CF_SMBCS__TIMER5            0x01 ///< Timer 5 Overflow.                                
2437      =2  #define SMB1CF_SMBCS__TIMER2_HIGH       0x02 ///< Timer 2 High Byte Overflow.                      
2438      =2  #define SMB1CF_SMBCS__TIMER2_LOW        0x03 ///< Timer 2 Low Byte Overflow.                       
2439      =2                                                                                                     
2440      =2  #define SMB1CF_SMBFTE__BMASK            0x04 ///< SMBus Free Timeout Detection Enable              
2441      =2  #define SMB1CF_SMBFTE__SHIFT            0x02 ///< SMBus Free Timeout Detection Enable              
2442      =2  #define SMB1CF_SMBFTE__FREE_TO_DISABLED 0x00 ///< Disable bus free timeouts.                       
2443      =2  #define SMB1CF_SMBFTE__FREE_TO_ENABLED  0x04 ///< Enable bus free timeouts. The bus the bus will be
2444      =2                                               ///< considered free if SCL and SDA remain high for   
2445      =2                                               ///< more than 10 SMBus clock source periods.         
2446      =2                                                                                                     
2447      =2  #define SMB1CF_SMBTOE__BMASK            0x08 ///< SMBus SCL Timeout Detection Enable               
2448      =2  #define SMB1CF_SMBTOE__SHIFT            0x03 ///< SMBus SCL Timeout Detection Enable               
2449      =2  #define SMB1CF_SMBTOE__SCL_TO_DISABLED  0x00 ///< Disable SCL low timeouts.                        
2450      =2  #define SMB1CF_SMBTOE__SCL_TO_ENABLED   0x08 ///< Enable SCL low timeouts.                         
2451      =2                                                                                                     
2452      =2  #define SMB1CF_EXTHOLD__BMASK           0x10 ///< SMBus Setup and Hold Time Extension Enable       
2453      =2  #define SMB1CF_EXTHOLD__SHIFT           0x04 ///< SMBus Setup and Hold Time Extension Enable       
2454      =2  #define SMB1CF_EXTHOLD__DISABLED        0x00 ///< Disable SDA extended setup and hold times.       
2455      =2  #define SMB1CF_EXTHOLD__ENABLED         0x10 ///< Enable SDA extended setup and hold times.        
2456      =2                                                                                                     
2457      =2  #define SMB1CF_BUSY__BMASK              0x20 ///< SMBus Busy Indicator                             
2458      =2  #define SMB1CF_BUSY__SHIFT              0x05 ///< SMBus Busy Indicator                             
2459      =2  #define SMB1CF_BUSY__NOT_SET            0x00 ///< The bus is not busy.                             
2460      =2  #define SMB1CF_BUSY__SET                0x20 ///< The bus is busy and a transfer is currently in   
2461      =2                                               ///< progress.                                        
2462      =2                                                                                                     
2463      =2  #define SMB1CF_INH__BMASK               0x40 ///< SMBus Slave Inhibit                              
2464      =2  #define SMB1CF_INH__SHIFT               0x06 ///< SMBus Slave Inhibit                              
2465      =2  #define SMB1CF_INH__SLAVE_ENABLED       0x00 ///< Slave states are enabled.                        
2466      =2  #define SMB1CF_INH__SLAVE_DISABLED      0x40 ///< Slave states are inhibited.                      
2467      =2                                                                                                     
2468      =2  #define SMB1CF_ENSMB__BMASK             0x80 ///< SMBus Enable                                     
2469      =2  #define SMB1CF_ENSMB__SHIFT             0x07 ///< SMBus Enable                                     
2470      =2  #define SMB1CF_ENSMB__DISABLED          0x00 ///< Disable the SMBus module.                        
2471      =2  #define SMB1CF_ENSMB__ENABLED           0x80 ///< Enable the SMBus module.                         
2472      =2                                                                                                     
2473      =2  //------------------------------------------------------------------------------
2474      =2  // SMB1CN0 Enums (SMBus 1 Control @ 0xC0)
2475      =2  //------------------------------------------------------------------------------
2476      =2  #define SMB1CN0_SI__BMASK           0x01 ///< SMBus Interrupt Flag                           
2477      =2  #define SMB1CN0_SI__SHIFT           0x00 ///< SMBus Interrupt Flag                           
2478      =2  #define SMB1CN0_SI__NOT_SET         0x00 ///<                                                
2479      =2  #define SMB1CN0_SI__SET             0x01 ///<                                                
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 60  

2480      =2                                                                                               
2481      =2  #define SMB1CN0_ACK__BMASK          0x02 ///< SMBus Acknowledge                              
2482      =2  #define SMB1CN0_ACK__SHIFT          0x01 ///< SMBus Acknowledge                              
2483      =2  #define SMB1CN0_ACK__NOT_SET        0x00 ///< Generate a NACK, or the response was a NACK.   
2484      =2  #define SMB1CN0_ACK__SET            0x02 ///< Generate an ACK, or the response was an ACK.   
2485      =2                                                                                               
2486      =2  #define SMB1CN0_ARBLOST__BMASK      0x04 ///< SMBus Arbitration Lost Indicator               
2487      =2  #define SMB1CN0_ARBLOST__SHIFT      0x02 ///< SMBus Arbitration Lost Indicator               
2488      =2  #define SMB1CN0_ARBLOST__NOT_SET    0x00 ///< No arbitration error.                          
2489      =2  #define SMB1CN0_ARBLOST__ERROR      0x04 ///< Arbitration error occurred.                    
2490      =2                                                                                               
2491      =2  #define SMB1CN0_ACKRQ__BMASK        0x08 ///< SMBus Acknowledge Request                      
2492      =2  #define SMB1CN0_ACKRQ__SHIFT        0x03 ///< SMBus Acknowledge Request                      
2493      =2  #define SMB1CN0_ACKRQ__NOT_SET      0x00 ///< No ACK requested.                              
2494      =2  #define SMB1CN0_ACKRQ__REQUESTED    0x08 ///< ACK requested.                                 
2495      =2                                                                                               
2496      =2  #define SMB1CN0_STO__BMASK          0x10 ///< SMBus Stop Flag                                
2497      =2  #define SMB1CN0_STO__SHIFT          0x04 ///< SMBus Stop Flag                                
2498      =2  #define SMB1CN0_STO__NOT_SET        0x00 ///< A STOP is not pending.                         
2499      =2  #define SMB1CN0_STO__SET            0x10 ///< Generate a STOP or a STOP is currently pending.
2500      =2                                                                                               
2501      =2  #define SMB1CN0_STA__BMASK          0x20 ///< SMBus Start Flag                               
2502      =2  #define SMB1CN0_STA__SHIFT          0x05 ///< SMBus Start Flag                               
2503      =2  #define SMB1CN0_STA__NOT_SET        0x00 ///< A START was not detected.                      
2504      =2  #define SMB1CN0_STA__SET            0x20 ///< Generate a START, repeated START, or a START is
2505      =2                                           ///< currently pending.                             
2506      =2                                                                                               
2507      =2  #define SMB1CN0_TXMODE__BMASK       0x40 ///< SMBus Transmit Mode Indicator                  
2508      =2  #define SMB1CN0_TXMODE__SHIFT       0x06 ///< SMBus Transmit Mode Indicator                  
2509      =2  #define SMB1CN0_TXMODE__RECEIVER    0x00 ///< SMBus in Receiver Mode.                        
2510      =2  #define SMB1CN0_TXMODE__TRANSMITTER 0x40 ///< SMBus in Transmitter Mode.                     
2511      =2                                                                                               
2512      =2  #define SMB1CN0_MASTER__BMASK       0x80 ///< SMBus Master/Slave Indicator                   
2513      =2  #define SMB1CN0_MASTER__SHIFT       0x07 ///< SMBus Master/Slave Indicator                   
2514      =2  #define SMB1CN0_MASTER__SLAVE       0x00 ///< SMBus operating in slave mode.                 
2515      =2  #define SMB1CN0_MASTER__MASTER      0x80 ///< SMBus operating in master mode.                
2516      =2                                                                                               
2517      =2  //------------------------------------------------------------------------------
2518      =2  // SMB1DAT Enums (SMBus 1 Data @ 0xC2)
2519      =2  //------------------------------------------------------------------------------
2520      =2  #define SMB1DAT_SMB1DAT__FMASK 0xFF ///< SMBus 1 Data
2521      =2  #define SMB1DAT_SMB1DAT__SHIFT 0x00 ///< SMBus 1 Data
2522      =2                                                       
2523      =2  //------------------------------------------------------------------------------
2524      =2  // SMBTC Enums (SMBus Timing and Pin Control @ 0xB9)
2525      =2  //------------------------------------------------------------------------------
2526      =2  #define SMBTC_SMB0SDD__FMASK         0x03 ///< SMBus 0 Start Detection Window                   
2527      =2  #define SMBTC_SMB0SDD__SHIFT         0x00 ///< SMBus 0 Start Detection Window                   
2528      =2  #define SMBTC_SMB0SDD__NONE          0x00 ///< No additional hold time window (0-1 SYSCLK).     
2529      =2  #define SMBTC_SMB0SDD__ADD_2_SYSCLKS 0x01 ///< Increase hold time window to 2-3 SYSCLKs.        
2530      =2  #define SMBTC_SMB0SDD__ADD_4_SYSCLKS 0x02 ///< Increase hold time window to 4-5 SYSCLKs.        
2531      =2  #define SMBTC_SMB0SDD__ADD_8_SYSCLKS 0x03 ///< Increase hold time window to 8-9 SYSCLKs.        
2532      =2                                                                                                  
2533      =2  #define SMBTC_SMB1SDD__FMASK         0x0C ///< SMBus 1 Start Detection Window                   
2534      =2  #define SMBTC_SMB1SDD__SHIFT         0x02 ///< SMBus 1 Start Detection Window                   
2535      =2  #define SMBTC_SMB1SDD__NONE          0x00 ///< No additional hold time requirement (0-1 SYSCLK).
2536      =2  #define SMBTC_SMB1SDD__ADD_2_SYSCLKS 0x04 ///< Increase hold time window to 2-3 SYSCLKs.        
2537      =2  #define SMBTC_SMB1SDD__ADD_4_SYSCLKS 0x08 ///< Increase hold time window to 4-5 SYSCLKs.        
2538      =2  #define SMBTC_SMB1SDD__ADD_8_SYSCLKS 0x0C ///< Increase hold time window to 8-9 SYSCLKs.        
2539      =2                                                                                                  
2540      =2  //------------------------------------------------------------------------------
2541      =2  // SPI0CFG Enums (SPI0 Configuration @ 0xA1)
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 61  

2542      =2  //------------------------------------------------------------------------------
2543      =2  #define SPI0CFG_RXBMT__BMASK                0x01 ///< Receive Buffer Empty                              
2544      =2  #define SPI0CFG_RXBMT__SHIFT                0x00 ///< Receive Buffer Empty                              
2545      =2  #define SPI0CFG_RXBMT__NOT_SET              0x00 ///< New data is available in the receive buffer (Slave
2546      =2                                                   ///< mode).                                            
2547      =2  #define SPI0CFG_RXBMT__SET                  0x01 ///< No new data in the receive buffer (Slave mode).   
2548      =2                                                                                                          
2549      =2  #define SPI0CFG_SRMT__BMASK                 0x02 ///< Shift Register Empty                              
2550      =2  #define SPI0CFG_SRMT__SHIFT                 0x01 ///< Shift Register Empty                              
2551      =2  #define SPI0CFG_SRMT__NOT_SET               0x00 ///< The shift register is not empty.                  
2552      =2  #define SPI0CFG_SRMT__SET                   0x02 ///< The shift register is empty.                      
2553      =2                                                                                                          
2554      =2  #define SPI0CFG_NSSIN__BMASK                0x04 ///< NSS Instantaneous Pin Input                       
2555      =2  #define SPI0CFG_NSSIN__SHIFT                0x02 ///< NSS Instantaneous Pin Input                       
2556      =2  #define SPI0CFG_NSSIN__LOW                  0x00 ///< The NSS pin is low.                               
2557      =2  #define SPI0CFG_NSSIN__HIGH                 0x04 ///< The NSS pin is high.                              
2558      =2                                                                                                          
2559      =2  #define SPI0CFG_SLVSEL__BMASK               0x08 ///< Slave Selected Flag                               
2560      =2  #define SPI0CFG_SLVSEL__SHIFT               0x03 ///< Slave Selected Flag                               
2561      =2  #define SPI0CFG_SLVSEL__NOT_SELECTED        0x00 ///< The Slave is not selected (NSS is high).          
2562      =2  #define SPI0CFG_SLVSEL__SELECTED            0x08 ///< The Slave is selected (NSS is low).               
2563      =2                                                                                                          
2564      =2  #define SPI0CFG_CKPOL__BMASK                0x10 ///< SPI0 Clock Polarity                               
2565      =2  #define SPI0CFG_CKPOL__SHIFT                0x04 ///< SPI0 Clock Polarity                               
2566      =2  #define SPI0CFG_CKPOL__IDLE_LOW             0x00 ///< SCK line low in idle state.                       
2567      =2  #define SPI0CFG_CKPOL__IDLE_HIGH            0x10 ///< SCK line high in idle state.                      
2568      =2                                                                                                          
2569      =2  #define SPI0CFG_CKPHA__BMASK                0x20 ///< SPI0 Clock Phase                                  
2570      =2  #define SPI0CFG_CKPHA__SHIFT                0x05 ///< SPI0 Clock Phase                                  
2571      =2  #define SPI0CFG_CKPHA__DATA_CENTERED_FIRST  0x00 ///< Data centered on first edge of SCK period.        
2572      =2  #define SPI0CFG_CKPHA__DATA_CENTERED_SECOND 0x20 ///< Data centered on second edge of SCK period.       
2573      =2                                                                                                          
2574      =2  #define SPI0CFG_MSTEN__BMASK                0x40 ///< Master Mode Enable                                
2575      =2  #define SPI0CFG_MSTEN__SHIFT                0x06 ///< Master Mode Enable                                
2576      =2  #define SPI0CFG_MSTEN__MASTER_DISABLED      0x00 ///< Disable master mode. Operate in slave mode.       
2577      =2  #define SPI0CFG_MSTEN__MASTER_ENABLED       0x40 ///< Enable master mode. Operate as a master.          
2578      =2                                                                                                          
2579      =2  #define SPI0CFG_SPIBSY__BMASK               0x80 ///< SPI Busy                                          
2580      =2  #define SPI0CFG_SPIBSY__SHIFT               0x07 ///< SPI Busy                                          
2581      =2  #define SPI0CFG_SPIBSY__NOT_SET             0x00 ///< A SPI transfer is not in progress.                
2582      =2  #define SPI0CFG_SPIBSY__SET                 0x80 ///< A SPI transfer is in progress.                    
2583      =2                                                                                                          
2584      =2  //------------------------------------------------------------------------------
2585      =2  // SPI0CKR Enums (SPI0 Clock Rate @ 0xA2)
2586      =2  //------------------------------------------------------------------------------
2587      =2  #define SPI0CKR_SPI0CKR__FMASK 0xFF ///< SPI0 Clock Rate
2588      =2  #define SPI0CKR_SPI0CKR__SHIFT 0x00 ///< SPI0 Clock Rate
2589      =2                                                          
2590      =2  //------------------------------------------------------------------------------
2591      =2  // SPI0CN0 Enums (SPI0 Control @ 0xF8)
2592      =2  //------------------------------------------------------------------------------
2593      =2  #define SPI0CN0_SPIEN__BMASK                  0x01 ///< SPI0 Enable                                       
2594      =2  #define SPI0CN0_SPIEN__SHIFT                  0x00 ///< SPI0 Enable                                       
2595      =2  #define SPI0CN0_SPIEN__DISABLED               0x00 ///< Disable the SPI module.                           
2596      =2  #define SPI0CN0_SPIEN__ENABLED                0x01 ///< Enable the SPI module.                            
2597      =2                                                                                                            
2598      =2  #define SPI0CN0_TXBMT__BMASK                  0x02 ///< Transmit Buffer Empty                             
2599      =2  #define SPI0CN0_TXBMT__SHIFT                  0x01 ///< Transmit Buffer Empty                             
2600      =2  #define SPI0CN0_TXBMT__NOT_SET                0x00 ///< The transmit buffer is not empty.                 
2601      =2  #define SPI0CN0_TXBMT__SET                    0x02 ///< The transmit buffer is empty.                     
2602      =2                                                                                                            
2603      =2  #define SPI0CN0_NSSMD__FMASK                  0x0C ///< Slave Select Mode                                 
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 62  

2604      =2  #define SPI0CN0_NSSMD__SHIFT                  0x02 ///< Slave Select Mode                                 
2605      =2  #define SPI0CN0_NSSMD__3_WIRE                 0x00 ///< 3-Wire Slave or 3-Wire Master Mode. NSS signal is 
2606      =2                                                     ///< not routed to a port pin.                         
2607      =2  #define SPI0CN0_NSSMD__4_WIRE_SLAVE           0x04 ///< 4-Wire Slave or Multi-Master Mode. NSS is an input
2608      =2                                                     ///< to the device.                                    
2609      =2  #define SPI0CN0_NSSMD__4_WIRE_MASTER_NSS_LOW  0x08 ///< 4-Wire Single-Master Mode. NSS is an output and   
2610      =2                                                     ///< logic low.                                        
2611      =2  #define SPI0CN0_NSSMD__4_WIRE_MASTER_NSS_HIGH 0x0C ///< 4-Wire Single-Master Mode. NSS is an output and   
2612      =2                                                     ///< logic high.                                       
2613      =2                                                                                                            
2614      =2  #define SPI0CN0_RXOVRN__BMASK                 0x10 ///< Receive Overrun Flag                              
2615      =2  #define SPI0CN0_RXOVRN__SHIFT                 0x04 ///< Receive Overrun Flag                              
2616      =2  #define SPI0CN0_RXOVRN__NOT_SET               0x00 ///< A receive overrun did not occur.                  
2617      =2  #define SPI0CN0_RXOVRN__SET                   0x10 ///< A receive overrun occurred.                       
2618      =2                                                                                                            
2619      =2  #define SPI0CN0_MODF__BMASK                   0x20 ///< Mode Fault Flag                                   
2620      =2  #define SPI0CN0_MODF__SHIFT                   0x05 ///< Mode Fault Flag                                   
2621      =2  #define SPI0CN0_MODF__NOT_SET                 0x00 ///< A master collision did not occur.                 
2622      =2  #define SPI0CN0_MODF__SET                     0x20 ///< A master collision occurred.                      
2623      =2                                                                                                            
2624      =2  #define SPI0CN0_WCOL__BMASK                   0x40 ///< Write Collision Flag                              
2625      =2  #define SPI0CN0_WCOL__SHIFT                   0x06 ///< Write Collision Flag                              
2626      =2  #define SPI0CN0_WCOL__NOT_SET                 0x00 ///< A write collision did not occur.                  
2627      =2  #define SPI0CN0_WCOL__SET                     0x40 ///< A write collision occurred.                       
2628      =2                                                                                                            
2629      =2  #define SPI0CN0_SPIF__BMASK                   0x80 ///< SPI0 Interrupt Flag                               
2630      =2  #define SPI0CN0_SPIF__SHIFT                   0x07 ///< SPI0 Interrupt Flag                               
2631      =2  #define SPI0CN0_SPIF__NOT_SET                 0x00 ///< A data transfer has not completed since the last  
2632      =2                                                     ///< time SPIF was cleared.                            
2633      =2  #define SPI0CN0_SPIF__SET                     0x80 ///< A data transfer completed.                        
2634      =2                                                                                                            
2635      =2  //------------------------------------------------------------------------------
2636      =2  // SPI0DAT Enums (SPI0 Data @ 0xA3)
2637      =2  //------------------------------------------------------------------------------
2638      =2  #define SPI0DAT_SPI0DAT__FMASK 0xFF ///< SPI0 Transmit and Receive Data
2639      =2  #define SPI0DAT_SPI0DAT__SHIFT 0x00 ///< SPI0 Transmit and Receive Data
2640      =2                                                                         
2641      =2  //------------------------------------------------------------------------------
2642      =2  // TH0 Enums (Timer 0 High Byte @ 0x8C)
2643      =2  //------------------------------------------------------------------------------
2644      =2  #define TH0_TH0__FMASK 0xFF ///< Timer 0 High Byte
2645      =2  #define TH0_TH0__SHIFT 0x00 ///< Timer 0 High Byte
2646      =2                                                    
2647      =2  //------------------------------------------------------------------------------
2648      =2  // TH1 Enums (Timer 1 High Byte @ 0x8D)
2649      =2  //------------------------------------------------------------------------------
2650      =2  #define TH1_TH1__FMASK 0xFF ///< Timer 1 High Byte
2651      =2  #define TH1_TH1__SHIFT 0x00 ///< Timer 1 High Byte
2652      =2                                                    
2653      =2  //------------------------------------------------------------------------------
2654      =2  // TL0 Enums (Timer 0 Low Byte @ 0x8A)
2655      =2  //------------------------------------------------------------------------------
2656      =2  #define TL0_TL0__FMASK 0xFF ///< Timer 0 Low Byte
2657      =2  #define TL0_TL0__SHIFT 0x00 ///< Timer 0 Low Byte
2658      =2                                                   
2659      =2  //------------------------------------------------------------------------------
2660      =2  // TL1 Enums (Timer 1 Low Byte @ 0x8B)
2661      =2  //------------------------------------------------------------------------------
2662      =2  #define TL1_TL1__FMASK 0xFF ///< Timer 1 Low Byte
2663      =2  #define TL1_TL1__SHIFT 0x00 ///< Timer 1 Low Byte
2664      =2                                                   
2665      =2  //------------------------------------------------------------------------------
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 63  

2666      =2  // TMR2CN0 Enums (Timer 2 Control 0 @ 0xC8)
2667      =2  //------------------------------------------------------------------------------
2668      =2  #define TMR2CN0_T2XCLK__BMASK          0x01 ///< Timer 2 External Clock Select                    
2669      =2  #define TMR2CN0_T2XCLK__SHIFT          0x00 ///< Timer 2 External Clock Select                    
2670      =2  #define TMR2CN0_T2XCLK__SYSCLK_DIV_12  0x00 ///< Timer 2 clock is the system clock divided by 12. 
2671      =2  #define TMR2CN0_T2XCLK__EXTOSC_DIV_8   0x01 ///< Timer 2 clock is the external oscillator divided 
2672      =2                                              ///< by 8 (synchronized with SYSCLK).                 
2673      =2                                                                                                    
2674      =2  #define TMR2CN0_T2CSS__BMASK           0x02 ///< Timer 2 Capture Source Select                    
2675      =2  #define TMR2CN0_T2CSS__SHIFT           0x01 ///< Timer 2 Capture Source Select                    
2676      =2  #define TMR2CN0_T2CSS__USB_SOF_CAPTURE 0x00 ///< Capture source is USB SOF event.                 
2677      =2  #define TMR2CN0_T2CSS__LFOSC_CAPTURE   0x02 ///< Capture source is falling edge of Low-Frequency  
2678      =2                                              ///< Oscillator.                                      
2679      =2                                                                                                    
2680      =2  #define TMR2CN0_TR2__BMASK             0x04 ///< Timer 2 Run Control                              
2681      =2  #define TMR2CN0_TR2__SHIFT             0x02 ///< Timer 2 Run Control                              
2682      =2  #define TMR2CN0_TR2__STOP              0x00 ///< Stop Timer 2.                                    
2683      =2  #define TMR2CN0_TR2__RUN               0x04 ///< Start Timer 2 running.                           
2684      =2                                                                                                    
2685      =2  #define TMR2CN0_T2SPLIT__BMASK         0x08 ///< Timer 2 Split Mode Enable                        
2686      =2  #define TMR2CN0_T2SPLIT__SHIFT         0x03 ///< Timer 2 Split Mode Enable                        
2687      =2  #define TMR2CN0_T2SPLIT__16_BIT_RELOAD 0x00 ///< Timer 2 operates in 16-bit auto-reload mode.     
2688      =2  #define TMR2CN0_T2SPLIT__8_BIT_RELOAD  0x08 ///< Timer 2 operates as two 8-bit auto-reload timers.
2689      =2                                                                                                    
2690      =2  #define TMR2CN0_TF2CEN__BMASK          0x10 ///< Timer 2 Capture Enable                           
2691      =2  #define TMR2CN0_TF2CEN__SHIFT          0x04 ///< Timer 2 Capture Enable                           
2692      =2  #define TMR2CN0_TF2CEN__DISABLED       0x00 ///< Disable capture mode.                            
2693      =2  #define TMR2CN0_TF2CEN__ENABLED        0x10 ///< Enable capture mode.                             
2694      =2                                                                                                    
2695      =2  #define TMR2CN0_TF2LEN__BMASK          0x20 ///< Timer 2 Low Byte Interrupt Enable                
2696      =2  #define TMR2CN0_TF2LEN__SHIFT          0x05 ///< Timer 2 Low Byte Interrupt Enable                
2697      =2  #define TMR2CN0_TF2LEN__DISABLED       0x00 ///< Disable low byte interrupts.                     
2698      =2  #define TMR2CN0_TF2LEN__ENABLED        0x20 ///< Enable low byte interrupts.                      
2699      =2                                                                                                    
2700      =2  #define TMR2CN0_TF2L__BMASK            0x40 ///< Timer 2 Low Byte Overflow Flag                   
2701      =2  #define TMR2CN0_TF2L__SHIFT            0x06 ///< Timer 2 Low Byte Overflow Flag                   
2702      =2  #define TMR2CN0_TF2L__NOT_SET          0x00 ///< Timer 2 low byte did not overflow.               
2703      =2  #define TMR2CN0_TF2L__SET              0x40 ///< Timer 2 low byte overflowed.                     
2704      =2                                                                                                    
2705      =2  #define TMR2CN0_TF2H__BMASK            0x80 ///< Timer 2 High Byte Overflow Flag                  
2706      =2  #define TMR2CN0_TF2H__SHIFT            0x07 ///< Timer 2 High Byte Overflow Flag                  
2707      =2  #define TMR2CN0_TF2H__NOT_SET          0x00 ///< Timer 2 8-bit high byte or 16-bit value did not  
2708      =2                                              ///< overflow.                                        
2709      =2  #define TMR2CN0_TF2H__SET              0x80 ///< Timer 2 8-bit high byte or 16-bit value          
2710      =2                                              ///< overflowed.                                      
2711      =2                                                                                                    
2712      =2  //------------------------------------------------------------------------------
2713      =2  // TMR2H Enums (Timer 2 High Byte @ 0xCD)
2714      =2  //------------------------------------------------------------------------------
2715      =2  #define TMR2H_TMR2H__FMASK 0xFF ///< Timer 2 High Byte
2716      =2  #define TMR2H_TMR2H__SHIFT 0x00 ///< Timer 2 High Byte
2717      =2                                                        
2718      =2  //------------------------------------------------------------------------------
2719      =2  // TMR2L Enums (Timer 2 Low Byte @ 0xCC)
2720      =2  //------------------------------------------------------------------------------
2721      =2  #define TMR2L_TMR2L__FMASK 0xFF ///< Timer 2 Low Byte
2722      =2  #define TMR2L_TMR2L__SHIFT 0x00 ///< Timer 2 Low Byte
2723      =2                                                       
2724      =2  //------------------------------------------------------------------------------
2725      =2  // TMR2RLH Enums (Timer 2 Reload High Byte @ 0xCB)
2726      =2  //------------------------------------------------------------------------------
2727      =2  #define TMR2RLH_TMR2RLH__FMASK 0xFF ///< Timer 2 Reload High Byte
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 64  

2728      =2  #define TMR2RLH_TMR2RLH__SHIFT 0x00 ///< Timer 2 Reload High Byte
2729      =2                                                                   
2730      =2  //------------------------------------------------------------------------------
2731      =2  // TMR2RLL Enums (Timer 2 Reload Low Byte @ 0xCA)
2732      =2  //------------------------------------------------------------------------------
2733      =2  #define TMR2RLL_TMR2RLL__FMASK 0xFF ///< Timer 2 Reload Low Byte
2734      =2  #define TMR2RLL_TMR2RLL__SHIFT 0x00 ///< Timer 2 Reload Low Byte
2735      =2                                                                  
2736      =2  //------------------------------------------------------------------------------
2737      =2  // TMR3CN0 Enums (Timer 3 Control 0 @ 0x91)
2738      =2  //------------------------------------------------------------------------------
2739      =2  #define TMR3CN0_T3XCLK__BMASK          0x01 ///< Timer 3 External Clock Select                    
2740      =2  #define TMR3CN0_T3XCLK__SHIFT          0x00 ///< Timer 3 External Clock Select                    
2741      =2  #define TMR3CN0_T3XCLK__SYSCLK_DIV_12  0x00 ///< Timer 3 clock is the system clock divided by 12. 
2742      =2  #define TMR3CN0_T3XCLK__EXTOSC_DIV_8   0x01 ///< Timer 3 clock is the external oscillator divided 
2743      =2                                              ///< by 8 (synchronized with SYSCLK).                 
2744      =2                                                                                                    
2745      =2  #define TMR3CN0_T3CSS__BMASK           0x02 ///< Timer 3 Capture Source Select                    
2746      =2  #define TMR3CN0_T3CSS__SHIFT           0x01 ///< Timer 3 Capture Source Select                    
2747      =2  #define TMR3CN0_T3CSS__USB_SOF_CAPTURE 0x00 ///< Capture source is USB SOF event.                 
2748      =2  #define TMR3CN0_T3CSS__LFOSC_CAPTURE   0x02 ///< Capture source is falling edge of Low-Frequency  
2749      =2                                              ///< Oscillator.                                      
2750      =2                                                                                                    
2751      =2  #define TMR3CN0_TR3__BMASK             0x04 ///< Timer 3 Run Control                              
2752      =2  #define TMR3CN0_TR3__SHIFT             0x02 ///< Timer 3 Run Control                              
2753      =2  #define TMR3CN0_TR3__STOP              0x00 ///< Stop Timer 3.                                    
2754      =2  #define TMR3CN0_TR3__RUN               0x04 ///< Start Timer 3 running.                           
2755      =2                                                                                                    
2756      =2  #define TMR3CN0_T3SPLIT__BMASK         0x08 ///< Timer 3 Split Mode Enable                        
2757      =2  #define TMR3CN0_T3SPLIT__SHIFT         0x03 ///< Timer 3 Split Mode Enable                        
2758      =2  #define TMR3CN0_T3SPLIT__16_BIT_RELOAD 0x00 ///< Timer 3 operates in 16-bit auto-reload mode.     
2759      =2  #define TMR3CN0_T3SPLIT__8_BIT_RELOAD  0x08 ///< Timer 3 operates as two 8-bit auto-reload timers.
2760      =2                                                                                                    
2761      =2  #define TMR3CN0_TF3CEN__BMASK          0x10 ///< Timer 3 Capture Enable                           
2762      =2  #define TMR3CN0_TF3CEN__SHIFT          0x04 ///< Timer 3 Capture Enable                           
2763      =2  #define TMR3CN0_TF3CEN__DISABLED       0x00 ///< Disable capture mode.                            
2764      =2  #define TMR3CN0_TF3CEN__ENABLED        0x10 ///< Enable capture mode.                             
2765      =2                                                                                                    
2766      =2  #define TMR3CN0_TF3LEN__BMASK          0x20 ///< Timer 3 Low Byte Interrupt Enable                
2767      =2  #define TMR3CN0_TF3LEN__SHIFT          0x05 ///< Timer 3 Low Byte Interrupt Enable                
2768      =2  #define TMR3CN0_TF3LEN__DISABLED       0x00 ///< Disable low byte interrupts.                     
2769      =2  #define TMR3CN0_TF3LEN__ENABLED        0x20 ///< Enable low byte interrupts.                      
2770      =2                                                                                                    
2771      =2  #define TMR3CN0_TF3L__BMASK            0x40 ///< Timer 3 Low Byte Overflow Flag                   
2772      =2  #define TMR3CN0_TF3L__SHIFT            0x06 ///< Timer 3 Low Byte Overflow Flag                   
2773      =2  #define TMR3CN0_TF3L__NOT_SET          0x00 ///< Timer 3 low byte did not overflow.               
2774      =2  #define TMR3CN0_TF3L__SET              0x40 ///< Timer 3 low byte overflowed.                     
2775      =2                                                                                                    
2776      =2  #define TMR3CN0_TF3H__BMASK            0x80 ///< Timer 3 High Byte Overflow Flag                  
2777      =2  #define TMR3CN0_TF3H__SHIFT            0x07 ///< Timer 3 High Byte Overflow Flag                  
2778      =2  #define TMR3CN0_TF3H__NOT_SET          0x00 ///< Timer 3 8-bit high byte or 16-bit value did not  
2779      =2                                              ///< overflow.                                        
2780      =2  #define TMR3CN0_TF3H__SET              0x80 ///< Timer 3 8-bit high byte or 16-bit value          
2781      =2                                              ///< overflowed.                                      
2782      =2                                                                                                    
2783      =2  //------------------------------------------------------------------------------
2784      =2  // TMR3H Enums (Timer 3 High Byte @ 0x95)
2785      =2  //------------------------------------------------------------------------------
2786      =2  #define TMR3H_TMR3H__FMASK 0xFF ///< Timer 3 High Byte
2787      =2  #define TMR3H_TMR3H__SHIFT 0x00 ///< Timer 3 High Byte
2788      =2                                                        
2789      =2  //------------------------------------------------------------------------------
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 65  

2790      =2  // TMR3L Enums (Timer 3 Low Byte @ 0x94)
2791      =2  //------------------------------------------------------------------------------
2792      =2  #define TMR3L_TMR3L__FMASK 0xFF ///< Timer 3 Low Byte
2793      =2  #define TMR3L_TMR3L__SHIFT 0x00 ///< Timer 3 Low Byte
2794      =2                                                       
2795      =2  //------------------------------------------------------------------------------
2796      =2  // TMR3RLH Enums (Timer 3 Reload High Byte @ 0x93)
2797      =2  //------------------------------------------------------------------------------
2798      =2  #define TMR3RLH_TMR3RLH__FMASK 0xFF ///< Timer 3 Reload High Byte
2799      =2  #define TMR3RLH_TMR3RLH__SHIFT 0x00 ///< Timer 3 Reload High Byte
2800      =2                                                                   
2801      =2  //------------------------------------------------------------------------------
2802      =2  // TMR3RLL Enums (Timer 3 Reload Low Byte @ 0x92)
2803      =2  //------------------------------------------------------------------------------
2804      =2  #define TMR3RLL_TMR3RLL__FMASK 0xFF ///< Timer 3 Reload Low Byte
2805      =2  #define TMR3RLL_TMR3RLL__SHIFT 0x00 ///< Timer 3 Reload Low Byte
2806      =2                                                                  
2807      =2  //------------------------------------------------------------------------------
2808      =2  // TMR4CN0 Enums (Timer 4 Control 0 @ 0x91)
2809      =2  //------------------------------------------------------------------------------
2810      =2  #define TMR4CN0_T4XCLK__BMASK          0x01 ///< Timer 4 External Clock Select                    
2811      =2  #define TMR4CN0_T4XCLK__SHIFT          0x00 ///< Timer 4 External Clock Select                    
2812      =2  #define TMR4CN0_T4XCLK__SYSCLK_DIV_12  0x00 ///< Timer 4 clock is the system clock divided by 12. 
2813      =2  #define TMR4CN0_T4XCLK__EXTOSC_DIV_8   0x01 ///< Timer 4 clock is the external oscillator divided 
2814      =2                                              ///< by 8 (synchronized with SYSCLK).                 
2815      =2                                                                                                    
2816      =2  #define TMR4CN0_TR4__BMASK             0x04 ///< Timer 4 Run Control                              
2817      =2  #define TMR4CN0_TR4__SHIFT             0x02 ///< Timer 4 Run Control                              
2818      =2  #define TMR4CN0_TR4__STOP              0x00 ///< Stop Timer 4.                                    
2819      =2  #define TMR4CN0_TR4__RUN               0x04 ///< Start Timer 4 running.                           
2820      =2                                                                                                    
2821      =2  #define TMR4CN0_T4SPLIT__BMASK         0x08 ///< Timer 4 Split Mode Enable                        
2822      =2  #define TMR4CN0_T4SPLIT__SHIFT         0x03 ///< Timer 4 Split Mode Enable                        
2823      =2  #define TMR4CN0_T4SPLIT__16_BIT_RELOAD 0x00 ///< Timer 4 operates in 16-bit auto-reload mode.     
2824      =2  #define TMR4CN0_T4SPLIT__8_BIT_RELOAD  0x08 ///< Timer 4 operates as two 8-bit auto-reload timers.
2825      =2                                                                                                    
2826      =2  #define TMR4CN0_TF4LEN__BMASK          0x20 ///< Timer 4 Low Byte Interrupt Enable                
2827      =2  #define TMR4CN0_TF4LEN__SHIFT          0x05 ///< Timer 4 Low Byte Interrupt Enable                
2828      =2  #define TMR4CN0_TF4LEN__DISABLED       0x00 ///< Disable low byte interrupts.                     
2829      =2  #define TMR4CN0_TF4LEN__ENABLED        0x20 ///< Enable low byte interrupts.                      
2830      =2                                                                                                    
2831      =2  #define TMR4CN0_TF4L__BMASK            0x40 ///< Timer 4 Low Byte Overflow Flag                   
2832      =2  #define TMR4CN0_TF4L__SHIFT            0x06 ///< Timer 4 Low Byte Overflow Flag                   
2833      =2  #define TMR4CN0_TF4L__NOT_SET          0x00 ///< Timer 4 low byte did not overflow.               
2834      =2  #define TMR4CN0_TF4L__SET              0x40 ///< Timer 4 low byte overflowed.                     
2835      =2                                                                                                    
2836      =2  #define TMR4CN0_TF4H__BMASK            0x80 ///< Timer 4 High Byte Overflow Flag                  
2837      =2  #define TMR4CN0_TF4H__SHIFT            0x07 ///< Timer 4 High Byte Overflow Flag                  
2838      =2  #define TMR4CN0_TF4H__NOT_SET          0x00 ///< Timer 4 8-bit high byte or 16-bit value did not  
2839      =2                                              ///< overflow.                                        
2840      =2  #define TMR4CN0_TF4H__SET              0x80 ///< Timer 4 8-bit high byte or 16-bit value          
2841      =2                                              ///< overflowed.                                      
2842      =2                                                                                                    
2843      =2  //------------------------------------------------------------------------------
2844      =2  // TMR4H Enums (Timer 4 High Byte @ 0x95)
2845      =2  //------------------------------------------------------------------------------
2846      =2  #define TMR4H_TMR4H__FMASK 0xFF ///< Timer 4 High Byte
2847      =2  #define TMR4H_TMR4H__SHIFT 0x00 ///< Timer 4 High Byte
2848      =2                                                        
2849      =2  //------------------------------------------------------------------------------
2850      =2  // TMR4L Enums (Timer 4 Low Byte @ 0x94)
2851      =2  //------------------------------------------------------------------------------
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 66  

2852      =2  #define TMR4L_TMR4L__FMASK 0xFF ///< Timer 4 Low Byte
2853      =2  #define TMR4L_TMR4L__SHIFT 0x00 ///< Timer 4 Low Byte
2854      =2                                                       
2855      =2  //------------------------------------------------------------------------------
2856      =2  // TMR4RLH Enums (Timer 4 Reload High Byte @ 0x93)
2857      =2  //------------------------------------------------------------------------------
2858      =2  #define TMR4RLH_TMR4RLH__FMASK 0xFF ///< Timer 4 Reload High Byte
2859      =2  #define TMR4RLH_TMR4RLH__SHIFT 0x00 ///< Timer 4 Reload High Byte
2860      =2                                                                   
2861      =2  //------------------------------------------------------------------------------
2862      =2  // TMR4RLL Enums (Timer 4 Reload Low Byte @ 0x92)
2863      =2  //------------------------------------------------------------------------------
2864      =2  #define TMR4RLL_TMR4RLL__FMASK 0xFF ///< Timer 4 Reload Low Byte
2865      =2  #define TMR4RLL_TMR4RLL__SHIFT 0x00 ///< Timer 4 Reload Low Byte
2866      =2                                                                  
2867      =2  //------------------------------------------------------------------------------
2868      =2  // TMR5CN0 Enums (Timer 5 Control 0 @ 0xC8)
2869      =2  //------------------------------------------------------------------------------
2870      =2  #define TMR5CN0_T5XCLK__BMASK          0x01 ///< Timer 5 External Clock Select                    
2871      =2  #define TMR5CN0_T5XCLK__SHIFT          0x00 ///< Timer 5 External Clock Select                    
2872      =2  #define TMR5CN0_T5XCLK__SYSCLK_DIV_12  0x00 ///< Timer 5 clock is the system clock divided by 12. 
2873      =2  #define TMR5CN0_T5XCLK__EXTOSC_DIV_8   0x01 ///< Timer 5 clock is the external oscillator divided 
2874      =2                                              ///< by 8 (synchronized with SYSCLK).                 
2875      =2                                                                                                    
2876      =2  #define TMR5CN0_TR5__BMASK             0x04 ///< Timer 5 Run Control                              
2877      =2  #define TMR5CN0_TR5__SHIFT             0x02 ///< Timer 5 Run Control                              
2878      =2  #define TMR5CN0_TR5__STOP              0x00 ///< Stop Timer 5.                                    
2879      =2  #define TMR5CN0_TR5__RUN               0x04 ///< Start Timer 5 running.                           
2880      =2                                                                                                    
2881      =2  #define TMR5CN0_T5SPLIT__BMASK         0x08 ///< Timer 5 Split Mode Enable                        
2882      =2  #define TMR5CN0_T5SPLIT__SHIFT         0x03 ///< Timer 5 Split Mode Enable                        
2883      =2  #define TMR5CN0_T5SPLIT__16_BIT_RELOAD 0x00 ///< Timer 5 operates in 16-bit auto-reload mode.     
2884      =2  #define TMR5CN0_T5SPLIT__8_BIT_RELOAD  0x08 ///< Timer 5 operates as two 8-bit auto-reload timers.
2885      =2                                                                                                    
2886      =2  #define TMR5CN0_TF5LEN__BMASK          0x20 ///< Timer 5 Low Byte Interrupt Enable                
2887      =2  #define TMR5CN0_TF5LEN__SHIFT          0x05 ///< Timer 5 Low Byte Interrupt Enable                
2888      =2  #define TMR5CN0_TF5LEN__DISABLED       0x00 ///< Disable low byte interrupts.                     
2889      =2  #define TMR5CN0_TF5LEN__ENABLED        0x20 ///< Enable low byte interrupts.                      
2890      =2                                                                                                    
2891      =2  #define TMR5CN0_TF5L__BMASK            0x40 ///< Timer 5 Low Byte Overflow Flag                   
2892      =2  #define TMR5CN0_TF5L__SHIFT            0x06 ///< Timer 5 Low Byte Overflow Flag                   
2893      =2  #define TMR5CN0_TF5L__NOT_SET          0x00 ///< Timer 5 low byte did not overflow.               
2894      =2  #define TMR5CN0_TF5L__SET              0x40 ///< Timer 5 low byte overflowed.                     
2895      =2                                                                                                    
2896      =2  #define TMR5CN0_TF5H__BMASK            0x80 ///< Timer 5 High Byte Overflow Flag                  
2897      =2  #define TMR5CN0_TF5H__SHIFT            0x07 ///< Timer 5 High Byte Overflow Flag                  
2898      =2  #define TMR5CN0_TF5H__NOT_SET          0x00 ///< Timer 5 8-bit high byte or 16-bit value did not  
2899      =2                                              ///< overflow.                                        
2900      =2  #define TMR5CN0_TF5H__SET              0x80 ///< Timer 5 8-bit high byte or 16-bit value          
2901      =2                                              ///< overflowed.                                      
2902      =2                                                                                                    
2903      =2  //------------------------------------------------------------------------------
2904      =2  // TMR5H Enums (Timer 5 High Byte @ 0xCD)
2905      =2  //------------------------------------------------------------------------------
2906      =2  #define TMR5H_TMR5H__FMASK 0xFF ///< Timer 5 High Byte
2907      =2  #define TMR5H_TMR5H__SHIFT 0x00 ///< Timer 5 High Byte
2908      =2                                                        
2909      =2  //------------------------------------------------------------------------------
2910      =2  // TMR5L Enums (Timer 5 Low Byte @ 0xCC)
2911      =2  //------------------------------------------------------------------------------
2912      =2  #define TMR5L_TMR5L__FMASK 0xFF ///< Timer 5 Low Byte
2913      =2  #define TMR5L_TMR5L__SHIFT 0x00 ///< Timer 5 Low Byte
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 67  

2914      =2                                                       
2915      =2  //------------------------------------------------------------------------------
2916      =2  // TMR5RLH Enums (Timer 5 Reload High Byte @ 0xCB)
2917      =2  //------------------------------------------------------------------------------
2918      =2  #define TMR5RLH_TMR5RLH__FMASK 0xFF ///< Timer 5 Reload High Byte
2919      =2  #define TMR5RLH_TMR5RLH__SHIFT 0x00 ///< Timer 5 Reload High Byte
2920      =2                                                                   
2921      =2  //------------------------------------------------------------------------------
2922      =2  // TMR5RLL Enums (Timer 5 Reload Low Byte @ 0xCA)
2923      =2  //------------------------------------------------------------------------------
2924      =2  #define TMR5RLL_TMR5RLL__FMASK 0xFF ///< Timer 5 Reload Low Byte
2925      =2  #define TMR5RLL_TMR5RLL__SHIFT 0x00 ///< Timer 5 Reload Low Byte
2926      =2                                                                  
2927      =2  //------------------------------------------------------------------------------
2928      =2  // CKCON0 Enums (Clock Control 0 @ 0x8E)
2929      =2  //------------------------------------------------------------------------------
2930      =2  #define CKCON0_SCA__FMASK           0x03 ///< Timer 0/1 Prescale                                
2931      =2  #define CKCON0_SCA__SHIFT           0x00 ///< Timer 0/1 Prescale                                
2932      =2  #define CKCON0_SCA__SYSCLK_DIV_12   0x00 ///< System clock divided by 12.                       
2933      =2  #define CKCON0_SCA__SYSCLK_DIV_4    0x01 ///< System clock divided by 4.                        
2934      =2  #define CKCON0_SCA__SYSCLK_DIV_48   0x02 ///< System clock divided by 48.                       
2935      =2  #define CKCON0_SCA__EXTOSC_DIV_8    0x03 ///< External oscillator divided by 8 (synchronized    
2936      =2                                           ///< with the system clock).                           
2937      =2                                                                                                  
2938      =2  #define CKCON0_T0M__BMASK           0x04 ///< Timer 0 Clock Select                              
2939      =2  #define CKCON0_T0M__SHIFT           0x02 ///< Timer 0 Clock Select                              
2940      =2  #define CKCON0_T0M__PRESCALE        0x00 ///< Counter/Timer 0 uses the clock defined by the     
2941      =2                                           ///< prescale field, SCA.                              
2942      =2  #define CKCON0_T0M__SYSCLK          0x04 ///< Counter/Timer 0 uses the system clock.            
2943      =2                                                                                                  
2944      =2  #define CKCON0_T1M__BMASK           0x08 ///< Timer 1 Clock Select                              
2945      =2  #define CKCON0_T1M__SHIFT           0x03 ///< Timer 1 Clock Select                              
2946      =2  #define CKCON0_T1M__PRESCALE        0x00 ///< Timer 1 uses the clock defined by the prescale    
2947      =2                                           ///< field, SCA.                                       
2948      =2  #define CKCON0_T1M__SYSCLK          0x08 ///< Timer 1 uses the system clock.                    
2949      =2                                                                                                  
2950      =2  #define CKCON0_T2ML__BMASK          0x10 ///< Timer 2 Low Byte Clock Select                     
2951      =2  #define CKCON0_T2ML__SHIFT          0x04 ///< Timer 2 Low Byte Clock Select                     
2952      =2  #define CKCON0_T2ML__EXTERNAL_CLOCK 0x00 ///< Timer 2 low byte uses the clock defined by T2XCLK 
2953      =2                                           ///< in TMR2CN0.                                       
2954      =2  #define CKCON0_T2ML__SYSCLK         0x10 ///< Timer 2 low byte uses the system clock.           
2955      =2                                                                                                  
2956      =2  #define CKCON0_T2MH__BMASK          0x20 ///< Timer 2 High Byte Clock Select                    
2957      =2  #define CKCON0_T2MH__SHIFT          0x05 ///< Timer 2 High Byte Clock Select                    
2958      =2  #define CKCON0_T2MH__EXTERNAL_CLOCK 0x00 ///< Timer 2 high byte uses the clock defined by T2XCLK
2959      =2                                           ///< in TMR2CN0.                                       
2960      =2  #define CKCON0_T2MH__SYSCLK         0x20 ///< Timer 2 high byte uses the system clock.          
2961      =2                                                                                                  
2962      =2  #define CKCON0_T3ML__BMASK          0x40 ///< Timer 3 Low Byte Clock Select                     
2963      =2  #define CKCON0_T3ML__SHIFT          0x06 ///< Timer 3 Low Byte Clock Select                     
2964      =2  #define CKCON0_T3ML__EXTERNAL_CLOCK 0x00 ///< Timer 3 low byte uses the clock defined by T3XCLK 
2965      =2                                           ///< in TMR3CN0.                                       
2966      =2  #define CKCON0_T3ML__SYSCLK         0x40 ///< Timer 3 low byte uses the system clock.           
2967      =2                                                                                                  
2968      =2  #define CKCON0_T3MH__BMASK          0x80 ///< Timer 3 High Byte Clock Select                    
2969      =2  #define CKCON0_T3MH__SHIFT          0x07 ///< Timer 3 High Byte Clock Select                    
2970      =2  #define CKCON0_T3MH__EXTERNAL_CLOCK 0x00 ///< Timer 3 high byte uses the clock defined by T3XCLK
2971      =2                                           ///< in TMR3CN0.                                       
2972      =2  #define CKCON0_T3MH__SYSCLK         0x80 ///< Timer 3 high byte uses the system clock.          
2973      =2                                                                                                  
2974      =2  //------------------------------------------------------------------------------
2975      =2  // CKCON1 Enums (Clock Control 1 @ 0xE4)
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 68  

2976      =2  //------------------------------------------------------------------------------
2977      =2  #define CKCON1_T4ML__BMASK          0x01 ///< Timer 4 Low Byte Clock Select                     
2978      =2  #define CKCON1_T4ML__SHIFT          0x00 ///< Timer 4 Low Byte Clock Select                     
2979      =2  #define CKCON1_T4ML__EXTERNAL_CLOCK 0x00 ///< Timer 4 low byte uses the clock defined by T4XCLK 
2980      =2                                           ///< in TMR4CN0.                                       
2981      =2  #define CKCON1_T4ML__SYSCLK         0x01 ///< Timer 4 low byte uses the system clock.           
2982      =2                                                                                                  
2983      =2  #define CKCON1_T4MH__BMASK          0x02 ///< Timer 4 High Byte Clock Select                    
2984      =2  #define CKCON1_T4MH__SHIFT          0x01 ///< Timer 4 High Byte Clock Select                    
2985      =2  #define CKCON1_T4MH__EXTERNAL_CLOCK 0x00 ///< Timer 4 high byte uses the clock defined by T4XCLK
2986      =2                                           ///< in TMR4CN0.                                       
2987      =2  #define CKCON1_T4MH__SYSCLK         0x02 ///< Timer 4 high byte uses the system clock.          
2988      =2                                                                                                  
2989      =2  #define CKCON1_T5ML__BMASK          0x04 ///< Timer 5 Low Byte Clock Select                     
2990      =2  #define CKCON1_T5ML__SHIFT          0x02 ///< Timer 5 Low Byte Clock Select                     
2991      =2  #define CKCON1_T5ML__EXTERNAL_CLOCK 0x00 ///< Timer 5 low byte uses the clock defined by T5XCLK 
2992      =2                                           ///< in TMR5CN.                                        
2993      =2  #define CKCON1_T5ML__SYSCLK         0x04 ///< Timer 5 low byte uses the system clock.           
2994      =2                                                                                                  
2995      =2  #define CKCON1_T5MH__BMASK          0x08 ///< Timer 5 High Byte Clock Select                    
2996      =2  #define CKCON1_T5MH__SHIFT          0x03 ///< Timer 5 High Byte Clock Select                    
2997      =2  #define CKCON1_T5MH__EXTERNAL_CLOCK 0x00 ///< Timer 5 high byte uses the clock defined by T5XCLK
2998      =2                                           ///< in TMR5CN.                                        
2999      =2  #define CKCON1_T5MH__SYSCLK         0x08 ///< Timer 5 high byte uses the system clock.          
3000      =2                                                                                                  
3001      =2  //------------------------------------------------------------------------------
3002      =2  // TCON Enums (Timer 0/1 Control @ 0x88)
3003      =2  //------------------------------------------------------------------------------
3004      =2  #define TCON_IT0__BMASK   0x01 ///< Interrupt 0 Type Select  
3005      =2  #define TCON_IT0__SHIFT   0x00 ///< Interrupt 0 Type Select  
3006      =2  #define TCON_IT0__LEVEL   0x00 ///< INT0 is level triggered. 
3007      =2  #define TCON_IT0__EDGE    0x01 ///< INT0 is edge triggered.  
3008      =2                                                               
3009      =2  #define TCON_IE0__BMASK   0x02 ///< External Interrupt 0     
3010      =2  #define TCON_IE0__SHIFT   0x01 ///< External Interrupt 0     
3011      =2  #define TCON_IE0__NOT_SET 0x00 ///< Edge/level not detected. 
3012      =2  #define TCON_IE0__SET     0x02 ///< Edge/level detected      
3013      =2                                                               
3014      =2  #define TCON_IT1__BMASK   0x04 ///< Interrupt 1 Type Select  
3015      =2  #define TCON_IT1__SHIFT   0x02 ///< Interrupt 1 Type Select  
3016      =2  #define TCON_IT1__LEVEL   0x00 ///< INT1 is level triggered. 
3017      =2  #define TCON_IT1__EDGE    0x04 ///< INT1 is edge triggered.  
3018      =2                                                               
3019      =2  #define TCON_IE1__BMASK   0x08 ///< External Interrupt 1     
3020      =2  #define TCON_IE1__SHIFT   0x03 ///< External Interrupt 1     
3021      =2  #define TCON_IE1__NOT_SET 0x00 ///< Edge/level not detected. 
3022      =2  #define TCON_IE1__SET     0x08 ///< Edge/level detected      
3023      =2                                                               
3024      =2  #define TCON_TR0__BMASK   0x10 ///< Timer 0 Run Control      
3025      =2  #define TCON_TR0__SHIFT   0x04 ///< Timer 0 Run Control      
3026      =2  #define TCON_TR0__STOP    0x00 ///< Stop Timer 0.            
3027      =2  #define TCON_TR0__RUN     0x10 ///< Start Timer 0 running.   
3028      =2                                                               
3029      =2  #define TCON_TF0__BMASK   0x20 ///< Timer 0 Overflow Flag    
3030      =2  #define TCON_TF0__SHIFT   0x05 ///< Timer 0 Overflow Flag    
3031      =2  #define TCON_TF0__NOT_SET 0x00 ///< Timer 0 did not overflow.
3032      =2  #define TCON_TF0__SET     0x20 ///< Timer 0 overflowed.      
3033      =2                                                               
3034      =2  #define TCON_TR1__BMASK   0x40 ///< Timer 1 Run Control      
3035      =2  #define TCON_TR1__SHIFT   0x06 ///< Timer 1 Run Control      
3036      =2  #define TCON_TR1__STOP    0x00 ///< Stop Timer 1.            
3037      =2  #define TCON_TR1__RUN     0x40 ///< Start Timer 1 running.   
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 69  

3038      =2                                                               
3039      =2  #define TCON_TF1__BMASK   0x80 ///< Timer 1 Overflow Flag    
3040      =2  #define TCON_TF1__SHIFT   0x07 ///< Timer 1 Overflow Flag    
3041      =2  #define TCON_TF1__NOT_SET 0x00 ///< Timer 1 did not overflow.
3042      =2  #define TCON_TF1__SET     0x80 ///< Timer 1 overflowed.      
3043      =2                                                               
3044      =2  //------------------------------------------------------------------------------
3045      =2  // TMOD Enums (Timer 0/1 Mode @ 0x89)
3046      =2  //------------------------------------------------------------------------------
3047      =2  #define TMOD_T0M__FMASK      0x03 ///< Timer 0 Mode Select                               
3048      =2  #define TMOD_T0M__SHIFT      0x00 ///< Timer 0 Mode Select                               
3049      =2  #define TMOD_T0M__MODE0      0x00 ///< Mode 0, 13-bit Counter/Timer                      
3050      =2  #define TMOD_T0M__MODE1      0x01 ///< Mode 1, 16-bit Counter/Timer                      
3051      =2  #define TMOD_T0M__MODE2      0x02 ///< Mode 2, 8-bit Counter/Timer with Auto-Reload      
3052      =2  #define TMOD_T0M__MODE3      0x03 ///< Mode 3, Two 8-bit Counter/Timers                  
3053      =2                                                                                           
3054      =2  #define TMOD_CT0__BMASK      0x04 ///< Counter/Timer 0 Select                            
3055      =2  #define TMOD_CT0__SHIFT      0x02 ///< Counter/Timer 0 Select                            
3056      =2  #define TMOD_CT0__TIMER      0x00 ///< Timer Mode. Timer 0 increments on the clock       
3057      =2                                    ///< defined by T0M in the CKCON0 register.            
3058      =2  #define TMOD_CT0__COUNTER    0x04 ///< Counter Mode. Timer 0 increments on high-to-low   
3059      =2                                    ///< transitions of an external pin (T0).              
3060      =2                                                                                           
3061      =2  #define TMOD_GATE0__BMASK    0x08 ///< Timer 0 Gate Control                              
3062      =2  #define TMOD_GATE0__SHIFT    0x03 ///< Timer 0 Gate Control                              
3063      =2  #define TMOD_GATE0__DISABLED 0x00 ///< Timer 0 enabled when TR0 = 1 irrespective of INT0 
3064      =2                                    ///< logic level.                                      
3065      =2  #define TMOD_GATE0__ENABLED  0x08 ///< Timer 0 enabled only when TR0 = 1 and INT0 is     
3066      =2                                    ///< active as defined by bit IN0PL in register IT01CF.
3067      =2                                                                                           
3068      =2  #define TMOD_T1M__FMASK      0x30 ///< Timer 1 Mode Select                               
3069      =2  #define TMOD_T1M__SHIFT      0x04 ///< Timer 1 Mode Select                               
3070      =2  #define TMOD_T1M__MODE0      0x00 ///< Mode 0, 13-bit Counter/Timer                      
3071      =2  #define TMOD_T1M__MODE1      0x10 ///< Mode 1, 16-bit Counter/Timer                      
3072      =2  #define TMOD_T1M__MODE2      0x20 ///< Mode 2, 8-bit Counter/Timer with Auto-Reload      
3073      =2  #define TMOD_T1M__MODE3      0x30 ///< Mode 3, Timer 1 Inactive                          
3074      =2                                                                                           
3075      =2  #define TMOD_CT1__BMASK      0x40 ///< Counter/Timer 1 Select                            
3076      =2  #define TMOD_CT1__SHIFT      0x06 ///< Counter/Timer 1 Select                            
3077      =2  #define TMOD_CT1__TIMER      0x00 ///< Timer Mode. Timer 1 increments on the clock       
3078      =2                                    ///< defined by T1M in the CKCON0 register.            
3079      =2  #define TMOD_CT1__COUNTER    0x40 ///< Counter Mode. Timer 1 increments on high-to-low   
3080      =2                                    ///< transitions of an external pin (T1).              
3081      =2                                                                                           
3082      =2  #define TMOD_GATE1__BMASK    0x80 ///< Timer 1 Gate Control                              
3083      =2  #define TMOD_GATE1__SHIFT    0x07 ///< Timer 1 Gate Control                              
3084      =2  #define TMOD_GATE1__DISABLED 0x00 ///< Timer 1 enabled when TR1 = 1 irrespective of INT1 
3085      =2                                    ///< logic level.                                      
3086      =2  #define TMOD_GATE1__ENABLED  0x80 ///< Timer 1 enabled only when TR1 = 1 and INT1 is     
3087      =2                                    ///< active as defined by bit IN1PL in register IT01CF.
3088      =2                                                                                           
3089      =2  //------------------------------------------------------------------------------
3090      =2  // SBCON1 Enums (UART1 Baud Rate Generator Control @ 0xAC)
3091      =2  //------------------------------------------------------------------------------
3092      =2  #define SBCON1_BPS__FMASK     0x03 ///< Baud Rate Prescaler Select                     
3093      =2  #define SBCON1_BPS__SHIFT     0x00 ///< Baud Rate Prescaler Select                     
3094      =2  #define SBCON1_BPS__DIV_BY_12 0x00 ///< Prescaler = 12.                                
3095      =2  #define SBCON1_BPS__DIV_BY_4  0x01 ///< Prescaler = 4.                                 
3096      =2  #define SBCON1_BPS__DIV_BY_48 0x02 ///< Prescaler = 48.                                
3097      =2  #define SBCON1_BPS__DIV_BY_1  0x03 ///< Prescaler = 1.                                 
3098      =2                                                                                         
3099      =2  #define SBCON1_BREN__BMASK    0x40 ///< Baud Rate Generator Enable                     
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 70  

3100      =2  #define SBCON1_BREN__SHIFT    0x06 ///< Baud Rate Generator Enable                     
3101      =2  #define SBCON1_BREN__DISABLED 0x00 ///< Disable the baud rate generator. UART1 will not
3102      =2                                     ///< function.                                      
3103      =2  #define SBCON1_BREN__ENABLED  0x40 ///< Enable the baud rate generator.                
3104      =2                                                                                         
3105      =2  //------------------------------------------------------------------------------
3106      =2  // SBRLH1 Enums (UART1 Baud Rate Generator High Byte @ 0xB5)
3107      =2  //------------------------------------------------------------------------------
3108      =2  #define SBRLH1_BRH__FMASK 0xFF ///< UART1 Baud Rate Reload High
3109      =2  #define SBRLH1_BRH__SHIFT 0x00 ///< UART1 Baud Rate Reload High
3110      =2                                                                 
3111      =2  //------------------------------------------------------------------------------
3112      =2  // SBRLL1 Enums (UART1 Baud Rate Generator Low Byte @ 0xB4)
3113      =2  //------------------------------------------------------------------------------
3114      =2  #define SBRLL1_BRL__FMASK 0xFF ///< UART1 Baud Rate Reload Low
3115      =2  #define SBRLL1_BRL__SHIFT 0x00 ///< UART1 Baud Rate Reload Low
3116      =2                                                                
3117      =2  //------------------------------------------------------------------------------
3118      =2  // SBUF1 Enums (UART1 Serial Port Data Buffer @ 0xD3)
3119      =2  //------------------------------------------------------------------------------
3120      =2  #define SBUF1_SBUF1__FMASK 0xFF ///< Serial Port Data Buffer
3121      =2  #define SBUF1_SBUF1__SHIFT 0x00 ///< Serial Port Data Buffer
3122      =2                                                              
3123      =2  //------------------------------------------------------------------------------
3124      =2  // SCON1 Enums (UART1 Serial Port Control @ 0xD2)
3125      =2  //------------------------------------------------------------------------------
3126      =2  #define SCON1_RI__BMASK             0x01 ///< Receive Interrupt Flag                           
3127      =2  #define SCON1_RI__SHIFT             0x00 ///< Receive Interrupt Flag                           
3128      =2  #define SCON1_RI__NOT_SET           0x00 ///< New data has not been received by UART1.         
3129      =2  #define SCON1_RI__SET               0x01 ///< UART1 received one or more data bytes.           
3130      =2                                                                                                 
3131      =2  #define SCON1_TI__BMASK             0x02 ///< Transmit Interrupt Flag                          
3132      =2  #define SCON1_TI__SHIFT             0x01 ///< Transmit Interrupt Flag                          
3133      =2  #define SCON1_TI__NOT_SET           0x00 ///< A byte of data has not been transmitted by UART1.
3134      =2  #define SCON1_TI__SET               0x02 ///< UART1 transmitted a byte of data.                
3135      =2                                                                                                 
3136      =2  #define SCON1_RBX__BMASK            0x04 ///< Extra Receive Bit                                
3137      =2  #define SCON1_RBX__SHIFT            0x02 ///< Extra Receive Bit                                
3138      =2  #define SCON1_RBX__LOW              0x00 ///< The extra bit or the first stop bit is 0.        
3139      =2  #define SCON1_RBX__HIGH             0x04 ///< The extra bit or the first stop bit is 1.        
3140      =2                                                                                                 
3141      =2  #define SCON1_TBX__BMASK            0x08 ///< Extra Transmission Bit                           
3142      =2  #define SCON1_TBX__SHIFT            0x03 ///< Extra Transmission Bit                           
3143      =2  #define SCON1_TBX__LOW              0x00 ///< Set extra bit to 0 (low).                        
3144      =2  #define SCON1_TBX__HIGH             0x08 ///< Set extra bit to 1 (high).                       
3145      =2                                                                                                 
3146      =2  #define SCON1_REN__BMASK            0x10 ///< Receive Enable                                   
3147      =2  #define SCON1_REN__SHIFT            0x04 ///< Receive Enable                                   
3148      =2  #define SCON1_REN__RECEIVE_DISABLED 0x00 ///< UART1 reception disabled.                        
3149      =2  #define SCON1_REN__RECEIVE_ENABLED  0x10 ///< UART1 reception enabled.                         
3150      =2                                                                                                 
3151      =2  #define SCON1_PERR__BMASK           0x40 ///< Parity Error Flag                                
3152      =2  #define SCON1_PERR__SHIFT           0x06 ///< Parity Error Flag                                
3153      =2  #define SCON1_PERR__NOT_SET         0x00 ///< Parity error has not occurred.                   
3154      =2  #define SCON1_PERR__SET             0x40 ///< Parity error has occurred.                       
3155      =2                                                                                                 
3156      =2  #define SCON1_OVR__BMASK            0x80 ///< Receive FIFO Overrun Flag                        
3157      =2  #define SCON1_OVR__SHIFT            0x07 ///< Receive FIFO Overrun Flag                        
3158      =2  #define SCON1_OVR__NOT_SET          0x00 ///< Receive FIFO overrun has not occurred.           
3159      =2  #define SCON1_OVR__SET              0x80 ///< Receive FIFO overrun has occurred.               
3160      =2                                                                                                 
3161      =2  //------------------------------------------------------------------------------
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 71  

3162      =2  // SMOD1 Enums (UART1 Mode @ 0xE5)
3163      =2  //------------------------------------------------------------------------------
3164      =2  #define SMOD1_SBL__BMASK          0x01 ///< Stop Bit Length                                 
3165      =2  #define SMOD1_SBL__SHIFT          0x00 ///< Stop Bit Length                                 
3166      =2  #define SMOD1_SBL__SHORT          0x00 ///< Short: Stop bit is active for one bit time.     
3167      =2  #define SMOD1_SBL__LONG           0x01 ///< Long: Stop bit is active for two bit times (data
3168      =2                                         ///< length = 6, 7, or 8 bits) or 1.5 bit times (data
3169      =2                                         ///< length = 5 bits).                               
3170      =2                                                                                              
3171      =2  #define SMOD1_XBE__BMASK          0x02 ///< Extra Bit Enable                                
3172      =2  #define SMOD1_XBE__SHIFT          0x01 ///< Extra Bit Enable                                
3173      =2  #define SMOD1_XBE__DISABLED       0x00 ///< Disable the extra bit.                          
3174      =2  #define SMOD1_XBE__ENABLED        0x02 ///< Enable the extra bit.                           
3175      =2                                                                                              
3176      =2  #define SMOD1_SDL__FMASK          0x0C ///< Data Length                                     
3177      =2  #define SMOD1_SDL__SHIFT          0x02 ///< Data Length                                     
3178      =2  #define SMOD1_SDL__5_BITS         0x00 ///< 5 bits.                                         
3179      =2  #define SMOD1_SDL__6_BITS         0x04 ///< 6 bits.                                         
3180      =2  #define SMOD1_SDL__7_BITS         0x08 ///< 7 bits.                                         
3181      =2  #define SMOD1_SDL__8_BITS         0x0C ///< 8 bits.                                         
3182      =2                                                                                              
3183      =2  #define SMOD1_PE__BMASK           0x10 ///< Parity Enable                                   
3184      =2  #define SMOD1_PE__SHIFT           0x04 ///< Parity Enable                                   
3185      =2  #define SMOD1_PE__PARITY_DISABLED 0x00 ///< Disable hardware parity.                        
3186      =2  #define SMOD1_PE__PARITY_ENABLED  0x10 ///< Enable hardware parity.                         
3187      =2                                                                                              
3188      =2  #define SMOD1_SPT__FMASK          0x60 ///< Parity Type                                     
3189      =2  #define SMOD1_SPT__SHIFT          0x05 ///< Parity Type                                     
3190      =2  #define SMOD1_SPT__ODD_PARITY     0x00 ///< Odd.                                            
3191      =2  #define SMOD1_SPT__EVEN_PARITY    0x20 ///< Even.                                           
3192      =2  #define SMOD1_SPT__MARK_PARITY    0x40 ///< Mark.                                           
3193      =2  #define SMOD1_SPT__SPACE_PARITY   0x60 ///< Space.                                          
3194      =2                                                                                              
3195      =2  #define SMOD1_MCE__BMASK          0x80 ///< Multiprocessor Communication Enable             
3196      =2  #define SMOD1_MCE__SHIFT          0x07 ///< Multiprocessor Communication Enable             
3197      =2  #define SMOD1_MCE__MULTI_DISABLED 0x00 ///< RI will be activated if the stop bits are 1.    
3198      =2  #define SMOD1_MCE__MULTI_ENABLED  0x80 ///< RI will be activated if the stop bits and extra 
3199      =2                                         ///< bit are 1. The extra bit must be enabled using  
3200      =2                                         ///< XBE.                                            
3201      =2                                                                                              
3202      =2  //------------------------------------------------------------------------------
3203      =2  // SBUF0 Enums (UART0 Serial Port Data Buffer @ 0x99)
3204      =2  //------------------------------------------------------------------------------
3205      =2  #define SBUF0_SBUF0__FMASK 0xFF ///< Serial Data Buffer
3206      =2  #define SBUF0_SBUF0__SHIFT 0x00 ///< Serial Data Buffer
3207      =2                                                         
3208      =2  //------------------------------------------------------------------------------
3209      =2  // SCON0 Enums (UART0 Serial Port Control @ 0x98)
3210      =2  //------------------------------------------------------------------------------
3211      =2  #define SCON0_RI__BMASK             0x01 ///< Receive Interrupt Flag                           
3212      =2  #define SCON0_RI__SHIFT             0x00 ///< Receive Interrupt Flag                           
3213      =2  #define SCON0_RI__NOT_SET           0x00 ///< A byte of data has not been received by UART0.   
3214      =2  #define SCON0_RI__SET               0x01 ///< UART0 received a byte of data.                   
3215      =2                                                                                                 
3216      =2  #define SCON0_TI__BMASK             0x02 ///< Transmit Interrupt Flag                          
3217      =2  #define SCON0_TI__SHIFT             0x01 ///< Transmit Interrupt Flag                          
3218      =2  #define SCON0_TI__NOT_SET           0x00 ///< A byte of data has not been transmitted by UART0.
3219      =2  #define SCON0_TI__SET               0x02 ///< UART0 transmitted a byte of data.                
3220      =2                                                                                                 
3221      =2  #define SCON0_RB8__BMASK            0x04 ///< Ninth Receive Bit                                
3222      =2  #define SCON0_RB8__SHIFT            0x02 ///< Ninth Receive Bit                                
3223      =2  #define SCON0_RB8__CLEARED_TO_0     0x00 ///< In Mode 0, the STOP bit was 0. In Mode 1, the 9th
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 72  

3224      =2                                           ///< bit was 0.                                       
3225      =2  #define SCON0_RB8__SET_TO_1         0x04 ///< In Mode 0, the STOP bit was 1. In Mode 1, the 9th
3226      =2                                           ///< bit was 1.                                       
3227      =2                                                                                                 
3228      =2  #define SCON0_TB8__BMASK            0x08 ///< Ninth Transmission Bit                           
3229      =2  #define SCON0_TB8__SHIFT            0x03 ///< Ninth Transmission Bit                           
3230      =2  #define SCON0_TB8__CLEARED_TO_0     0x00 ///< In Mode 1, set the 9th transmission bit to 0.    
3231      =2  #define SCON0_TB8__SET_TO_1         0x08 ///< In Mode 1, set the 9th transmission bit to 1.    
3232      =2                                                                                                 
3233      =2  #define SCON0_REN__BMASK            0x10 ///< Receive Enable                                   
3234      =2  #define SCON0_REN__SHIFT            0x04 ///< Receive Enable                                   
3235      =2  #define SCON0_REN__RECEIVE_DISABLED 0x00 ///< UART0 reception disabled.                        
3236      =2  #define SCON0_REN__RECEIVE_ENABLED  0x10 ///< UART0 reception enabled.                         
3237      =2                                                                                                 
3238      =2  #define SCON0_MCE__BMASK            0x20 ///< Multiprocessor Communication Enable              
3239      =2  #define SCON0_MCE__SHIFT            0x05 ///< Multiprocessor Communication Enable              
3240      =2  #define SCON0_MCE__MULTI_DISABLED   0x00 ///< Ignore level of 9th bit / Stop bit.              
3241      =2  #define SCON0_MCE__MULTI_ENABLED    0x20 ///< RI is set and an interrupt is generated only when
3242      =2                                           ///< the stop bit is logic 1 (Mode 0) or when the 9th 
3243      =2                                           ///< bit is logic 1 (Mode 1).                         
3244      =2                                                                                                 
3245      =2  #define SCON0_SMODE__BMASK          0x80 ///< Serial Port 0 Operation Mode                     
3246      =2  #define SCON0_SMODE__SHIFT          0x07 ///< Serial Port 0 Operation Mode                     
3247      =2  #define SCON0_SMODE__8_BIT          0x00 ///< 8-bit UART with Variable Baud Rate (Mode 0).     
3248      =2  #define SCON0_SMODE__9_BIT          0x80 ///< 9-bit UART with Variable Baud Rate (Mode 1).     
3249      =2                                                                                                 
3250      =2  //------------------------------------------------------------------------------
3251      =2  // CLKREC Enums (USB0 Clock Recovery Control @ 0x0F)
3252      =2  //------------------------------------------------------------------------------
3253      =2  #define CLKREC_CRLOW__BMASK      0x20 ///< Low Speed Clock Recovery Mode               
3254      =2  #define CLKREC_CRLOW__SHIFT      0x05 ///< Low Speed Clock Recovery Mode               
3255      =2  #define CLKREC_CRLOW__FULL_SPEED 0x00 ///< Full Speed Mode.                            
3256      =2  #define CLKREC_CRLOW__LOW_SPEED  0x20 ///< Low Speed Mode.                             
3257      =2                                                                                         
3258      =2  #define CLKREC_CRSSEN__BMASK     0x40 ///< Clock Recovery Single Step                  
3259      =2  #define CLKREC_CRSSEN__SHIFT     0x06 ///< Clock Recovery Single Step                  
3260      =2  #define CLKREC_CRSSEN__DISABLED  0x00 ///< Disable single-step mode (normal calibration
3261      =2                                        ///< mode).                                      
3262      =2  #define CLKREC_CRSSEN__ENABLED   0x40 ///< Enable single-step mode.                    
3263      =2                                                                                         
3264      =2  #define CLKREC_CRE__BMASK        0x80 ///< Clock Recovery Enable                       
3265      =2  #define CLKREC_CRE__SHIFT        0x07 ///< Clock Recovery Enable                       
3266      =2  #define CLKREC_CRE__DISABLED     0x00 ///< Disable clock recovery.                     
3267      =2  #define CLKREC_CRE__ENABLED      0x80 ///< Enable clock recovery.                      
3268      =2                                                                                         
3269      =2  //------------------------------------------------------------------------------
3270      =2  // CMIE Enums (USB0 Common Interrupt Enable @ 0x0B)
3271      =2  //------------------------------------------------------------------------------
3272      =2  #define CMIE_SUSINTE__BMASK    0x01 ///< Suspend Interrupt Enable       
3273      =2  #define CMIE_SUSINTE__SHIFT    0x00 ///< Suspend Interrupt Enable       
3274      =2  #define CMIE_SUSINTE__DISABLED 0x00 ///< Disable suspend interrupts.    
3275      =2  #define CMIE_SUSINTE__ENABLED  0x01 ///< Enable suspend interrupts.     
3276      =2                                                                          
3277      =2  #define CMIE_RSUINTE__BMASK    0x02 ///< Resume Interrupt Enable        
3278      =2  #define CMIE_RSUINTE__SHIFT    0x01 ///< Resume Interrupt Enable        
3279      =2  #define CMIE_RSUINTE__DISABLED 0x00 ///< Disable resume interrupts.     
3280      =2  #define CMIE_RSUINTE__ENABLED  0x02 ///< Enable resume interrupts.      
3281      =2                                                                          
3282      =2  #define CMIE_RSTINTE__BMASK    0x04 ///< Reset Interrupt Enable         
3283      =2  #define CMIE_RSTINTE__SHIFT    0x02 ///< Reset Interrupt Enable         
3284      =2  #define CMIE_RSTINTE__DISABLED 0x00 ///< Disable reset interrupts.      
3285      =2  #define CMIE_RSTINTE__ENABLED  0x04 ///< Enable reset interrupts.       
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 73  

3286      =2                                                                          
3287      =2  #define CMIE_SOFE__BMASK       0x08 ///< Start of Frame Interrupt Enable
3288      =2  #define CMIE_SOFE__SHIFT       0x03 ///< Start of Frame Interrupt Enable
3289      =2  #define CMIE_SOFE__DISABLED    0x00 ///< Disable SOF interrupts.        
3290      =2  #define CMIE_SOFE__ENABLED     0x08 ///< Enable SOF interrupts.         
3291      =2                                                                          
3292      =2  //------------------------------------------------------------------------------
3293      =2  // CMINT Enums (USB0 Common Interrupt @ 0x06)
3294      =2  //------------------------------------------------------------------------------
3295      =2  #define CMINT_SUSINT__BMASK   0x01 ///< Suspend Interrupt Flag       
3296      =2  #define CMINT_SUSINT__SHIFT   0x00 ///< Suspend Interrupt Flag       
3297      =2  #define CMINT_SUSINT__NOT_SET 0x00 ///< Suspend interrupt inactive.  
3298      =2  #define CMINT_SUSINT__SET     0x01 ///< Suspend interrupt active.    
3299      =2                                                                       
3300      =2  #define CMINT_RSUINT__BMASK   0x02 ///< Resume Interrupt Flag        
3301      =2  #define CMINT_RSUINT__SHIFT   0x01 ///< Resume Interrupt Flag        
3302      =2  #define CMINT_RSUINT__NOT_SET 0x00 ///< Resume interrupt inactive.   
3303      =2  #define CMINT_RSUINT__SET     0x02 ///< Resume interrupt active.     
3304      =2                                                                       
3305      =2  #define CMINT_RSTINT__BMASK   0x04 ///< Reset Interrupt Flag         
3306      =2  #define CMINT_RSTINT__SHIFT   0x02 ///< Reset Interrupt Flag         
3307      =2  #define CMINT_RSTINT__NOT_SET 0x00 ///< Reset interrupt inactive.    
3308      =2  #define CMINT_RSTINT__SET     0x04 ///< Reset interrupt active.      
3309      =2                                                                       
3310      =2  #define CMINT_SOF__BMASK      0x08 ///< Start of Frame Interrupt Flag
3311      =2  #define CMINT_SOF__SHIFT      0x03 ///< Start of Frame Interrupt Flag
3312      =2  #define CMINT_SOF__NOT_SET    0x00 ///< SOF interrupt inactive.      
3313      =2  #define CMINT_SOF__SET        0x08 ///< SOF interrupt active.        
3314      =2                                                                       
3315      =2  //------------------------------------------------------------------------------
3316      =2  // E0CNT Enums (USB0 Endpoint0 Data Count @ 0x16)
3317      =2  //------------------------------------------------------------------------------
3318      =2  #define E0CNT_E0CNT__FMASK 0x7F ///< Endpoint 0 Data Count
3319      =2  #define E0CNT_E0CNT__SHIFT 0x00 ///< Endpoint 0 Data Count
3320      =2                                                            
3321      =2  //------------------------------------------------------------------------------
3322      =2  // E0CSR Enums (USB0 Endpoint0 Control @ 0x11)
3323      =2  //------------------------------------------------------------------------------
3324      =2  #define E0CSR_OPRDY__BMASK     0x01 ///< OUT Packet Ready                                  
3325      =2  #define E0CSR_OPRDY__SHIFT     0x00 ///< OUT Packet Ready                                  
3326      =2  #define E0CSR_OPRDY__NOT_SET   0x00 ///< A data packet has not been received.              
3327      =2  #define E0CSR_OPRDY__SET       0x01 ///< A data packet has been received.                  
3328      =2                                                                                             
3329      =2  #define E0CSR_INPRDY__BMASK    0x02 ///< IN Packet Ready                                   
3330      =2  #define E0CSR_INPRDY__SHIFT    0x01 ///< IN Packet Ready                                   
3331      =2  #define E0CSR_INPRDY__NOT_SET  0x00 ///< An IN packet is not ready to transmit.            
3332      =2  #define E0CSR_INPRDY__SET      0x02 ///< An IN packet is ready to transmit.                
3333      =2                                                                                             
3334      =2  #define E0CSR_STSTL__BMASK     0x04 ///< Sent Stall                                        
3335      =2  #define E0CSR_STSTL__SHIFT     0x02 ///< Sent Stall                                        
3336      =2  #define E0CSR_STSTL__NOT_SET   0x00 ///< A STALL handshake signal was not transmitted.     
3337      =2  #define E0CSR_STSTL__SET       0x04 ///< A STALL handshake signal was transmitted.         
3338      =2                                                                                             
3339      =2  #define E0CSR_DATAEND__BMASK   0x08 ///< Data End                                          
3340      =2  #define E0CSR_DATAEND__SHIFT   0x03 ///< Data End                                          
3341      =2  #define E0CSR_DATAEND__NOT_SET 0x00 ///< This is not the last data packet.                 
3342      =2  #define E0CSR_DATAEND__SET     0x08 ///< This is the last data packet.                     
3343      =2                                                                                             
3344      =2  #define E0CSR_SUEND__BMASK     0x10 ///< Setup End                                         
3345      =2  #define E0CSR_SUEND__SHIFT     0x04 ///< Setup End                                         
3346      =2  #define E0CSR_SUEND__NOT_SET   0x00 ///< A control transaction did not end before firmware 
3347      =2                                      ///< wrote a 1 to the DATAEND bit.                     
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 74  

3348      =2  #define E0CSR_SUEND__SET       0x10 ///< A control transaction ended before firmware wrote 
3349      =2                                      ///< a 1 to the DATAEND bit.                           
3350      =2                                                                                             
3351      =2  #define E0CSR_SDSTL__BMASK     0x20 ///< Send Stall                                        
3352      =2  #define E0CSR_SDSTL__SHIFT     0x05 ///< Send Stall                                        
3353      =2  #define E0CSR_SDSTL__NOT_SET   0x00 ///< Do not send a STALL.                              
3354      =2  #define E0CSR_SDSTL__SET       0x20 ///< Send a STALL.                                     
3355      =2                                                                                             
3356      =2  #define E0CSR_SOPRDY__BMASK    0x40 ///< Serviced OPRDY                                    
3357      =2  #define E0CSR_SOPRDY__SHIFT    0x06 ///< Serviced OPRDY                                    
3358      =2  #define E0CSR_SOPRDY__NOT_SET  0x00 ///< OUT packet has not been serviced.                 
3359      =2  #define E0CSR_SOPRDY__SET      0x40 ///< OUT packet has been serviced.                     
3360      =2                                                                                             
3361      =2  #define E0CSR_SSUEND__BMASK    0x80 ///< Serviced Setup End                                
3362      =2  #define E0CSR_SSUEND__SHIFT    0x07 ///< Serviced Setup End                                
3363      =2  #define E0CSR_SSUEND__NOT_SET  0x00 ///< The setup end (SUEND) event has not been serviced.
3364      =2  #define E0CSR_SSUEND__SET      0x80 ///< The setup end (SUEND) event has been serviced.    
3365      =2                                                                                             
3366      =2  //------------------------------------------------------------------------------
3367      =2  // EENABLE Enums (USB0 Endpoint Enable @ 0x1E)
3368      =2  //------------------------------------------------------------------------------
3369      =2  #define EENABLE_EEN1__BMASK    0x02 ///< Endpoint 1 Enable                                
3370      =2  #define EENABLE_EEN1__SHIFT    0x01 ///< Endpoint 1 Enable                                
3371      =2  #define EENABLE_EEN1__DISABLED 0x00 ///< Disable Endpoint 1 (no NACK, ACK, or STALL on the
3372      =2                                      ///< USB network).                                    
3373      =2  #define EENABLE_EEN1__ENABLED  0x02 ///< Enable Endpoint 1 (normal).                      
3374      =2                                                                                            
3375      =2  #define EENABLE_EEN2__BMASK    0x04 ///< Endpoint 2 Enable                                
3376      =2  #define EENABLE_EEN2__SHIFT    0x02 ///< Endpoint 2 Enable                                
3377      =2  #define EENABLE_EEN2__DISABLED 0x00 ///< Disable Endpoint 2 (no NACK, ACK, or STALL on the
3378      =2                                      ///< USB network).                                    
3379      =2  #define EENABLE_EEN2__ENABLED  0x04 ///< Enable Endpoint 2 (normal).                      
3380      =2                                                                                            
3381      =2  #define EENABLE_EEN3__BMASK    0x08 ///< Endpoint 3 Enable                                
3382      =2  #define EENABLE_EEN3__SHIFT    0x03 ///< Endpoint 3 Enable                                
3383      =2  #define EENABLE_EEN3__DISABLED 0x00 ///< Disable Endpoint 3 (no NACK, ACK, or STALL on the
3384      =2                                      ///< USB network).                                    
3385      =2  #define EENABLE_EEN3__ENABLED  0x08 ///< Enable Endpoint 3 (normal).                      
3386      =2                                                                                            
3387      =2  //------------------------------------------------------------------------------
3388      =2  // EINCSRH Enums (USB0 IN Endpoint Control High @ 0x12)
3389      =2  //------------------------------------------------------------------------------
3390      =2  #define EINCSRH_SPLIT__BMASK        0x04 ///< FIFO Split Enable                                
3391      =2  #define EINCSRH_SPLIT__SHIFT        0x02 ///< FIFO Split Enable                                
3392      =2  #define EINCSRH_SPLIT__DISABLED     0x00 ///< Disable split mode.                              
3393      =2  #define EINCSRH_SPLIT__ENABLED      0x04 ///< Enable split mode.                               
3394      =2                                                                                                 
3395      =2  #define EINCSRH_FCDT__BMASK         0x08 ///< Force Data Toggle                                
3396      =2  #define EINCSRH_FCDT__SHIFT         0x03 ///< Force Data Toggle                                
3397      =2  #define EINCSRH_FCDT__ACK_TOGGLE    0x00 ///< Endpoint data toggle switches only when an ACK is
3398      =2                                           ///< received following a data packet transmission.   
3399      =2  #define EINCSRH_FCDT__ALWAYS_TOGGLE 0x08 ///< Endpoint data toggle forced to switch after every
3400      =2                                           ///< data packet is transmitted, regardless of ACK    
3401      =2                                           ///< reception.                                       
3402      =2                                                                                                 
3403      =2  #define EINCSRH_DIRSEL__BMASK       0x20 ///< Endpoint Direction Select                        
3404      =2  #define EINCSRH_DIRSEL__SHIFT       0x05 ///< Endpoint Direction Select                        
3405      =2  #define EINCSRH_DIRSEL__OUT         0x00 ///< Endpoint direction selected as OUT.              
3406      =2  #define EINCSRH_DIRSEL__IN          0x20 ///< Endpoint direction selected as IN.               
3407      =2                                                                                                 
3408      =2  #define EINCSRH_ISO__BMASK          0x40 ///< Isochronous Transfer Enable                      
3409      =2  #define EINCSRH_ISO__SHIFT          0x06 ///< Isochronous Transfer Enable                      
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 75  

3410      =2  #define EINCSRH_ISO__DISABLED       0x00 ///< Endpoint configured for Bulk/Interrupt transfers.
3411      =2  #define EINCSRH_ISO__ENABLED        0x40 ///< Endpoint configured for Isochronous transfers.   
3412      =2                                                                                                 
3413      =2  #define EINCSRH_DBIEN__BMASK        0x80 ///< IN Endpoint Double-Buffer Enable                 
3414      =2  #define EINCSRH_DBIEN__SHIFT        0x07 ///< IN Endpoint Double-Buffer Enable                 
3415      =2  #define EINCSRH_DBIEN__DISABLED     0x00 ///< Disable double-buffering for the selected IN     
3416      =2                                           ///< endpoint.                                        
3417      =2  #define EINCSRH_DBIEN__ENABLED      0x80 ///< Enable double-buffering for the selected IN      
3418      =2                                           ///< endpoint.                                        
3419      =2                                                                                                 
3420      =2  //------------------------------------------------------------------------------
3421      =2  // EINCSRL Enums (USB0 IN Endpoint Control Low @ 0x11)
3422      =2  //------------------------------------------------------------------------------
3423      =2  #define EINCSRL_INPRDY__BMASK     0x01 ///< In Packet Ready                                   
3424      =2  #define EINCSRL_INPRDY__SHIFT     0x00 ///< In Packet Ready                                   
3425      =2  #define EINCSRL_INPRDY__NOT_SET   0x00 ///< A packet is not available in the Endpoint IN FIFO.
3426      =2  #define EINCSRL_INPRDY__SET       0x01 ///< A packet is available in the Endpoint IN FIFO.    
3427      =2                                                                                                
3428      =2  #define EINCSRL_FIFONE__BMASK     0x02 ///< FIFO Not Empty                                    
3429      =2  #define EINCSRL_FIFONE__SHIFT     0x01 ///< FIFO Not Empty                                    
3430      =2  #define EINCSRL_FIFONE__EMPTY     0x00 ///< The IN Endpoint FIFO is empty.                    
3431      =2  #define EINCSRL_FIFONE__NOT_EMPTY 0x02 ///< The IN Endpoint FIFO contains one or more packets.
3432      =2                                                                                                
3433      =2  #define EINCSRL_UNDRUN__BMASK     0x04 ///< Data Underrun Flag                                
3434      =2  #define EINCSRL_UNDRUN__SHIFT     0x02 ///< Data Underrun Flag                                
3435      =2  #define EINCSRL_UNDRUN__NOT_SET   0x00 ///< A data underrun did not occur.                    
3436      =2  #define EINCSRL_UNDRUN__SET       0x04 ///< A data underrun occurred.                         
3437      =2                                                                                                
3438      =2  #define EINCSRL_FLUSH__BMASK      0x08 ///< FIFO Flush                                        
3439      =2  #define EINCSRL_FLUSH__SHIFT      0x03 ///< FIFO Flush                                        
3440      =2  #define EINCSRL_FLUSH__NOT_SET    0x00 ///< Do not flush the next packet.                     
3441      =2  #define EINCSRL_FLUSH__SET        0x08 ///< Flush the next packet to be transmitted from the  
3442      =2                                         ///< IN Endpoint FIFO.                                 
3443      =2                                                                                                
3444      =2  #define EINCSRL_SDSTL__BMASK      0x10 ///< Send Stall                                        
3445      =2  #define EINCSRL_SDSTL__SHIFT      0x04 ///< Send Stall                                        
3446      =2  #define EINCSRL_SDSTL__NOT_SET    0x00 ///< Terminate the STALL.                              
3447      =2  #define EINCSRL_SDSTL__SET        0x10 ///< Generate a STALL in response to an IN token.      
3448      =2                                                                                                
3449      =2  #define EINCSRL_STSTL__BMASK      0x20 ///< Sent Stall Flag                                   
3450      =2  #define EINCSRL_STSTL__SHIFT      0x05 ///< Sent Stall Flag                                   
3451      =2  #define EINCSRL_STSTL__NOT_SET    0x00 ///< A STALL handshake was not transmitted.            
3452      =2  #define EINCSRL_STSTL__SET        0x20 ///< A STALL handshake was transmitted.                
3453      =2                                                                                                
3454      =2  #define EINCSRL_CLRDT__BMASK      0x40 ///< Clear Data Toggle                                 
3455      =2  #define EINCSRL_CLRDT__SHIFT      0x06 ///< Clear Data Toggle                                 
3456      =2  #define EINCSRL_CLRDT__CLEAR      0x00 ///< Clear the IN Endpoint data toggle.                
3457      =2                                                                                                
3458      =2  //------------------------------------------------------------------------------
3459      =2  // EOUTCNTH Enums (USB0 OUT Endpoint Count High @ 0x17)
3460      =2  //------------------------------------------------------------------------------
3461      =2  #define EOUTCNTH_EOCH__FMASK 0x03 ///< OUT Endpoint Count High
3462      =2  #define EOUTCNTH_EOCH__SHIFT 0x00 ///< OUT Endpoint Count High
3463      =2                                                                
3464      =2  //------------------------------------------------------------------------------
3465      =2  // EOUTCNTL Enums (USB0 OUT Endpoint Count Low @ 0x16)
3466      =2  //------------------------------------------------------------------------------
3467      =2  #define EOUTCNTL_EOCL__FMASK 0xFF ///< OUT Endpoint Count Low
3468      =2  #define EOUTCNTL_EOCL__SHIFT 0x00 ///< OUT Endpoint Count Low
3469      =2                                                               
3470      =2  //------------------------------------------------------------------------------
3471      =2  // EOUTCSRH Enums (USB0 OUT Endpoint Control High @ 0x15)
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 76  

3472      =2  //------------------------------------------------------------------------------
3473      =2  #define EOUTCSRH_ISO__BMASK      0x40 ///< Isochronous Transfer Enable                      
3474      =2  #define EOUTCSRH_ISO__SHIFT      0x06 ///< Isochronous Transfer Enable                      
3475      =2  #define EOUTCSRH_ISO__DISABLED   0x00 ///< Endpoint configured for Bulk/Interrupt transfers.
3476      =2  #define EOUTCSRH_ISO__ENABLED    0x40 ///< Endpoint configured for Isochronous transfers.   
3477      =2                                                                                              
3478      =2  #define EOUTCSRH_DBOEN__BMASK    0x80 ///< Double-Buffer Enable                             
3479      =2  #define EOUTCSRH_DBOEN__SHIFT    0x07 ///< Double-Buffer Enable                             
3480      =2  #define EOUTCSRH_DBOEN__DISABLED 0x00 ///< Disable double-buffering for the selected OUT    
3481      =2                                        ///< endpoint.                                        
3482      =2  #define EOUTCSRH_DBOEN__ENABLED  0x80 ///< Enable double-buffering for the selected OUT     
3483      =2                                        ///< endpoint.                                        
3484      =2                                                                                              
3485      =2  //------------------------------------------------------------------------------
3486      =2  // EOUTCSRL Enums (USB0 OUT Endpoint Control Low @ 0x14)
3487      =2  //------------------------------------------------------------------------------
3488      =2  #define EOUTCSRL_OPRDY__BMASK      0x01 ///< OUT Packet Ready                                  
3489      =2  #define EOUTCSRL_OPRDY__SHIFT      0x00 ///< OUT Packet Ready                                  
3490      =2  #define EOUTCSRL_OPRDY__NOT_SET    0x00 ///< A data packet is not available in the Endpoint OUT
3491      =2                                          ///< FIFO.                                             
3492      =2  #define EOUTCSRL_OPRDY__SET        0x01 ///< A data packet is available in the Endpoint OUT    
3493      =2                                          ///< FIFO.                                             
3494      =2                                                                                                 
3495      =2  #define EOUTCSRL_FIFOFUL__BMASK    0x02 ///< OUT FIFO Full                                     
3496      =2  #define EOUTCSRL_FIFOFUL__SHIFT    0x01 ///< OUT FIFO Full                                     
3497      =2  #define EOUTCSRL_FIFOFUL__NOT_FULL 0x00 ///< OUT endpoint FIFO is not full.                    
3498      =2  #define EOUTCSRL_FIFOFUL__FULL     0x02 ///< OUT endpoint FIFO is full.                        
3499      =2                                                                                                 
3500      =2  #define EOUTCSRL_OVRUN__BMASK      0x04 ///< Data Overrun Flag                                 
3501      =2  #define EOUTCSRL_OVRUN__SHIFT      0x02 ///< Data Overrun Flag                                 
3502      =2  #define EOUTCSRL_OVRUN__NOT_SET    0x00 ///< No data overrun.                                  
3503      =2  #define EOUTCSRL_OVRUN__SET        0x04 ///< A data packet was lost because of a full FIFO     
3504      =2                                          ///< since this flag was last cleared.                 
3505      =2                                                                                                 
3506      =2  #define EOUTCSRL_DATERR__BMASK     0x08 ///< Data Error Flag                                   
3507      =2  #define EOUTCSRL_DATERR__SHIFT     0x03 ///< Data Error Flag                                   
3508      =2  #define EOUTCSRL_DATERR__NOT_SET   0x00 ///< A received packet does not have a CRC or bit-     
3509      =2                                          ///< stuffing error.                                   
3510      =2  #define EOUTCSRL_DATERR__SET       0x08 ///< A received packet has a CRC or bit-stuffing error.
3511      =2                                                                                                 
3512      =2  #define EOUTCSRL_FLUSH__BMASK      0x10 ///< FIFO Flush                                        
3513      =2  #define EOUTCSRL_FLUSH__SHIFT      0x04 ///< FIFO Flush                                        
3514      =2  #define EOUTCSRL_FLUSH__NOT_SET    0x00 ///< Do not flush the next packet.                     
3515      =2  #define EOUTCSRL_FLUSH__SET        0x10 ///< Flush the next packet to be read from the OUT     
3516      =2                                          ///< endpoint FIFO.                                    
3517      =2                                                                                                 
3518      =2  #define EOUTCSRL_SDSTL__BMASK      0x20 ///< Send Stall                                        
3519      =2  #define EOUTCSRL_SDSTL__SHIFT      0x05 ///< Send Stall                                        
3520      =2  #define EOUTCSRL_SDSTL__NOT_SET    0x00 ///< Terminate the STALL.                              
3521      =2  #define EOUTCSRL_SDSTL__SET        0x20 ///< Generate a STALL handshake.                       
3522      =2                                                                                                 
3523      =2  #define EOUTCSRL_STSTL__BMASK      0x40 ///< Sent Stall Flag                                   
3524      =2  #define EOUTCSRL_STSTL__SHIFT      0x06 ///< Sent Stall Flag                                   
3525      =2  #define EOUTCSRL_STSTL__NOT_SET    0x00 ///< A STALL handshake was not transmitted.            
3526      =2  #define EOUTCSRL_STSTL__SET        0x40 ///< A STALL handshake was transmitted.                
3527      =2                                                                                                 
3528      =2  #define EOUTCSRL_CLRDT__BMASK      0x80 ///< Clear Data Toggle                                 
3529      =2  #define EOUTCSRL_CLRDT__SHIFT      0x07 ///< Clear Data Toggle                                 
3530      =2  #define EOUTCSRL_CLRDT__CLEAR      0x00 ///< Clear the OUT Endpoint data toggle.               
3531      =2                                                                                                 
3532      =2  //------------------------------------------------------------------------------
3533      =2  // FADDR Enums (USB0 Function Address @ 0x00)
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 77  

3534      =2  //------------------------------------------------------------------------------
3535      =2  #define FADDR_FADDR__FMASK    0x7F ///< Function Address                               
3536      =2  #define FADDR_FADDR__SHIFT    0x00 ///< Function Address                               
3537      =2                                                                                         
3538      =2  #define FADDR_UPDATE__BMASK   0x80 ///< Function Address Update                        
3539      =2  #define FADDR_UPDATE__SHIFT   0x07 ///< Function Address Update                        
3540      =2  #define FADDR_UPDATE__NOT_SET 0x00 ///< The last address written to FADDR is in effect.
3541      =2  #define FADDR_UPDATE__SET     0x80 ///< The last address written to FADDR is not yet in
3542      =2                                     ///< effect.                                        
3543      =2                                                                                         
3544      =2  //------------------------------------------------------------------------------
3545      =2  // FIFO0 Enums (USB0 Endpoint 0 FIFO Access @ 0x20)
3546      =2  //------------------------------------------------------------------------------
3547      =2  #define FIFO0_FIFODATA__FMASK 0xFF ///< Endpoint 0 FIFO Access
3548      =2  #define FIFO0_FIFODATA__SHIFT 0x00 ///< Endpoint 0 FIFO Access
3549      =2                                                                
3550      =2  //------------------------------------------------------------------------------
3551      =2  // FIFO1 Enums (USB0 Endpoint 1 FIFO Access @ 0x21)
3552      =2  //------------------------------------------------------------------------------
3553      =2  #define FIFO1_FIFODATA__FMASK 0xFF ///< Endpoint 1 FIFO Access
3554      =2  #define FIFO1_FIFODATA__SHIFT 0x00 ///< Endpoint 1 FIFO Access
3555      =2                                                                
3556      =2  //------------------------------------------------------------------------------
3557      =2  // FIFO2 Enums (USB0 Endpoint 2 FIFO Access @ 0x22)
3558      =2  //------------------------------------------------------------------------------
3559      =2  #define FIFO2_FIFODATA__FMASK 0xFF ///< Endpoint 2 FIFO Access
3560      =2  #define FIFO2_FIFODATA__SHIFT 0x00 ///< Endpoint 2 FIFO Access
3561      =2                                                                
3562      =2  //------------------------------------------------------------------------------
3563      =2  // FIFO3 Enums (USB0 Endpoint 3 FIFO Access @ 0x23)
3564      =2  //------------------------------------------------------------------------------
3565      =2  #define FIFO3_FIFODATA__FMASK 0xFF ///< Endpoint 3 FIFO Access
3566      =2  #define FIFO3_FIFODATA__SHIFT 0x00 ///< Endpoint 3 FIFO Access
3567      =2                                                                
3568      =2  //------------------------------------------------------------------------------
3569      =2  // FRAMEH Enums (USB0 Frame Number High @ 0x0D)
3570      =2  //------------------------------------------------------------------------------
3571      =2  #define FRAMEH_FRMEH__FMASK 0x07 ///< Frame Number High
3572      =2  #define FRAMEH_FRMEH__SHIFT 0x00 ///< Frame Number High
3573      =2                                                         
3574      =2  //------------------------------------------------------------------------------
3575      =2  // FRAMEL Enums (USB0 Frame Number Low @ 0x0C)
3576      =2  //------------------------------------------------------------------------------
3577      =2  #define FRAMEL_FRMEL__FMASK 0xFF ///< Frame Number Low
3578      =2  #define FRAMEL_FRMEL__SHIFT 0x00 ///< Frame Number Low
3579      =2                                                        
3580      =2  //------------------------------------------------------------------------------
3581      =2  // IN1IE Enums (USB0 IN Endpoint Interrupt Enable @ 0x07)
3582      =2  //------------------------------------------------------------------------------
3583      =2  #define IN1IE_EP0E__BMASK    0x01 ///< Endpoint 0 Interrupt Enable      
3584      =2  #define IN1IE_EP0E__SHIFT    0x00 ///< Endpoint 0 Interrupt Enable      
3585      =2  #define IN1IE_EP0E__DISABLED 0x00 ///< Disable Endpoint 0 interrupts.   
3586      =2  #define IN1IE_EP0E__ENABLED  0x01 ///< Enable Endpoint 0 interrupts.    
3587      =2                                                                          
3588      =2  #define IN1IE_IN1E__BMASK    0x02 ///< IN Endpoint 1 Interrupt Enable   
3589      =2  #define IN1IE_IN1E__SHIFT    0x01 ///< IN Endpoint 1 Interrupt Enable   
3590      =2  #define IN1IE_IN1E__DISABLED 0x00 ///< Disable Endpoint 1 IN interrupts.
3591      =2  #define IN1IE_IN1E__ENABLED  0x02 ///< Enable Endpoint 1 IN interrupts. 
3592      =2                                                                          
3593      =2  #define IN1IE_IN2E__BMASK    0x04 ///< IN Endpoint 2 Interrupt Enable   
3594      =2  #define IN1IE_IN2E__SHIFT    0x02 ///< IN Endpoint 2 Interrupt Enable   
3595      =2  #define IN1IE_IN2E__DISABLED 0x00 ///< Disable Endpoint 2 IN interrupts.
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 78  

3596      =2  #define IN1IE_IN2E__ENABLED  0x04 ///< Enable Endpoint 2 IN interrupts. 
3597      =2                                                                          
3598      =2  #define IN1IE_IN3E__BMASK    0x08 ///< IN Endpoint 3 Interrupt Enable   
3599      =2  #define IN1IE_IN3E__SHIFT    0x03 ///< IN Endpoint 3 Interrupt Enable   
3600      =2  #define IN1IE_IN3E__DISABLED 0x00 ///< Disable Endpoint 3 IN interrupts.
3601      =2  #define IN1IE_IN3E__ENABLED  0x08 ///< Enable Endpoint 3 IN interrupts. 
3602      =2                                                                          
3603      =2  //------------------------------------------------------------------------------
3604      =2  // IN1INT Enums (USB0 IN Endpoint Interrupt @ 0x02)
3605      =2  //------------------------------------------------------------------------------
3606      =2  #define IN1INT_EP0__BMASK   0x01 ///< Endpoint 0 Interrupt Flag        
3607      =2  #define IN1INT_EP0__SHIFT   0x00 ///< Endpoint 0 Interrupt Flag        
3608      =2  #define IN1INT_EP0__NOT_SET 0x00 ///< Endpoint 0 interrupt inactive.   
3609      =2  #define IN1INT_EP0__SET     0x01 ///< Endpoint 0 interrupt active.     
3610      =2                                                                         
3611      =2  #define IN1INT_IN1__BMASK   0x02 ///< IN Endpoint 1 Interrupt Flag     
3612      =2  #define IN1INT_IN1__SHIFT   0x01 ///< IN Endpoint 1 Interrupt Flag     
3613      =2  #define IN1INT_IN1__NOT_SET 0x00 ///< IN Endpoint 1 interrupt inactive.
3614      =2  #define IN1INT_IN1__SET     0x02 ///< IN Endpoint 1 interrupt active.  
3615      =2                                                                         
3616      =2  #define IN1INT_IN2__BMASK   0x04 ///< IN Endpoint 2 Interrupt Flag     
3617      =2  #define IN1INT_IN2__SHIFT   0x02 ///< IN Endpoint 2 Interrupt Flag     
3618      =2  #define IN1INT_IN2__NOT_SET 0x00 ///< IN Endpoint 2 interrupt inactive.
3619      =2  #define IN1INT_IN2__SET     0x04 ///< IN Endpoint 2 interrupt active.  
3620      =2                                                                         
3621      =2  #define IN1INT_IN3__BMASK   0x08 ///< IN Endpoint 3 Interrupt Flag     
3622      =2  #define IN1INT_IN3__SHIFT   0x03 ///< IN Endpoint 3 Interrupt Flag     
3623      =2  #define IN1INT_IN3__NOT_SET 0x00 ///< IN Endpoint 3 interrupt inactive.
3624      =2  #define IN1INT_IN3__SET     0x08 ///< IN Endpoint 3 interrupt active.  
3625      =2                                                                         
3626      =2  //------------------------------------------------------------------------------
3627      =2  // INDEX Enums (USB0 Endpoint Index @ 0x0E)
3628      =2  //------------------------------------------------------------------------------
3629      =2  #define INDEX_EPSEL__FMASK      0x0F ///< Endpoint Select Bits
3630      =2  #define INDEX_EPSEL__SHIFT      0x00 ///< Endpoint Select Bits
3631      =2  #define INDEX_EPSEL__ENDPOINT_0 0x00 ///< Endpoint 0.         
3632      =2  #define INDEX_EPSEL__ENDPOINT_1 0x01 ///< Endpoint 1.         
3633      =2  #define INDEX_EPSEL__ENDPOINT_2 0x02 ///< Endpoint 2.         
3634      =2  #define INDEX_EPSEL__ENDPOINT_3 0x03 ///< Endpoint 3.         
3635      =2                                                                
3636      =2  //------------------------------------------------------------------------------
3637      =2  // OUT1IE Enums (USB0 OUT Endpoint Interrupt Enable @ 0x09)
3638      =2  //------------------------------------------------------------------------------
3639      =2  #define OUT1IE_OUT1E__BMASK    0x02 ///< OUT Endpoint 1 Interrupt Enable   
3640      =2  #define OUT1IE_OUT1E__SHIFT    0x01 ///< OUT Endpoint 1 Interrupt Enable   
3641      =2  #define OUT1IE_OUT1E__DISABLED 0x00 ///< Disable Endpoint 1 OUT interrupts.
3642      =2  #define OUT1IE_OUT1E__ENABLED  0x02 ///< Enable Endpoint 1 OUT interrupts. 
3643      =2                                                                             
3644      =2  #define OUT1IE_OUT2E__BMASK    0x04 ///< OUT Endpoint 2 Interrupt Enable   
3645      =2  #define OUT1IE_OUT2E__SHIFT    0x02 ///< OUT Endpoint 2 Interrupt Enable   
3646      =2  #define OUT1IE_OUT2E__DISABLED 0x00 ///< Disable Endpoint 2 OUT interrupts.
3647      =2  #define OUT1IE_OUT2E__ENABLED  0x04 ///< Enable Endpoint 2 OUT interrupts. 
3648      =2                                                                             
3649      =2  #define OUT1IE_OUT3E__BMASK    0x08 ///< OUT Endpoint 3 Interrupt Enable   
3650      =2  #define OUT1IE_OUT3E__SHIFT    0x03 ///< OUT Endpoint 3 Interrupt Enable   
3651      =2  #define OUT1IE_OUT3E__DISABLED 0x00 ///< Disable Endpoint 3 OUT interrupts.
3652      =2  #define OUT1IE_OUT3E__ENABLED  0x08 ///< Enable Endpoint 3 OUT interrupts. 
3653      =2                                                                             
3654      =2  //------------------------------------------------------------------------------
3655      =2  // OUT1INT Enums (USB0 OUT Endpoint Interrupt @ 0x04)
3656      =2  //------------------------------------------------------------------------------
3657      =2  #define OUT1INT_OUT1__BMASK   0x02 ///< OUT Endpoint 1 Interrupt Flag     
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 79  

3658      =2  #define OUT1INT_OUT1__SHIFT   0x01 ///< OUT Endpoint 1 Interrupt Flag     
3659      =2  #define OUT1INT_OUT1__NOT_SET 0x00 ///< OUT Endpoint 1 interrupt inactive.
3660      =2  #define OUT1INT_OUT1__SET     0x02 ///< OUT Endpoint 1 interrupt active.  
3661      =2                                                                            
3662      =2  #define OUT1INT_OUT2__BMASK   0x04 ///< OUT Endpoint 2 Interrupt Flag     
3663      =2  #define OUT1INT_OUT2__SHIFT   0x02 ///< OUT Endpoint 2 Interrupt Flag     
3664      =2  #define OUT1INT_OUT2__NOT_SET 0x00 ///< OUT Endpoint 2 interrupt inactive.
3665      =2  #define OUT1INT_OUT2__SET     0x04 ///< OUT Endpoint 2 interrupt active.  
3666      =2                                                                            
3667      =2  #define OUT1INT_OUT3__BMASK   0x08 ///< OUT Endpoint 3 Interrupt Flag     
3668      =2  #define OUT1INT_OUT3__SHIFT   0x03 ///< OUT Endpoint 3 Interrupt Flag     
3669      =2  #define OUT1INT_OUT3__NOT_SET 0x00 ///< OUT Endpoint 3 interrupt inactive.
3670      =2  #define OUT1INT_OUT3__SET     0x08 ///< OUT Endpoint 3 interrupt active.  
3671      =2                                                                            
3672      =2  //------------------------------------------------------------------------------
3673      =2  // POWER Enums (USB0 Power @ 0x01)
3674      =2  //------------------------------------------------------------------------------
3675      =2  #define POWER_SUSEN__BMASK         0x01 ///< Suspend Detection Enable                          
3676      =2  #define POWER_SUSEN__SHIFT         0x00 ///< Suspend Detection Enable                          
3677      =2  #define POWER_SUSEN__DISABLED      0x00 ///< Disable suspend detection. USB0 will ignore       
3678      =2                                          ///< suspend signaling on the bus.                     
3679      =2  #define POWER_SUSEN__ENABLED       0x01 ///< Enable suspend detection. USB0 will enter suspend 
3680      =2                                          ///< mode if it detects suspend signaling on the bus.  
3681      =2                                                                                                 
3682      =2  #define POWER_SUSMD__BMASK         0x02 ///< Suspend Mode                                      
3683      =2  #define POWER_SUSMD__SHIFT         0x01 ///< Suspend Mode                                      
3684      =2  #define POWER_SUSMD__NOT_SUSPENDED 0x00 ///< USB0 not in suspend mode.                         
3685      =2  #define POWER_SUSMD__SUSPENDED     0x02 ///< USB0 in suspend mode.                             
3686      =2                                                                                                 
3687      =2  #define POWER_RESUME__BMASK        0x04 ///< Force Resume                                      
3688      =2  #define POWER_RESUME__SHIFT        0x02 ///< Force Resume                                      
3689      =2  #define POWER_RESUME__START        0x04 ///< Generate resume signalling to create a remote     
3690      =2                                          ///< wakeup event.                                     
3691      =2                                                                                                 
3692      =2  #define POWER_USBRST__BMASK        0x08 ///< Reset Detect                                      
3693      =2  #define POWER_USBRST__SHIFT        0x03 ///< Reset Detect                                      
3694      =2  #define POWER_USBRST__NOT_SET      0x00 ///< USB reset signalling not detected.                
3695      =2  #define POWER_USBRST__SET          0x08 ///< USB reset signalling detected.                    
3696      =2                                                                                                 
3697      =2  #define POWER_USBINH__BMASK        0x10 ///< USB0 Inhibit                                      
3698      =2  #define POWER_USBINH__SHIFT        0x04 ///< USB0 Inhibit                                      
3699      =2  #define POWER_USBINH__ENABLED      0x00 ///< USB0 enabled.                                     
3700      =2  #define POWER_USBINH__DISABLED     0x10 ///< USB0 inhibited. All USB traffic is ignored.       
3701      =2                                                                                                 
3702      =2  #define POWER_ISOUD__BMASK         0x80 ///< Isochronous Update Mode                           
3703      =2  #define POWER_ISOUD__SHIFT         0x07 ///< Isochronous Update Mode                           
3704      =2  #define POWER_ISOUD__IN_TOKEN      0x00 ///< When firmware writes INPRDY = 1, USB0 will send   
3705      =2                                          ///< the packet when the next IN token is received.    
3706      =2  #define POWER_ISOUD__SOF_TOKEN     0x80 ///< When firmware writes INPRDY = 1, USB0 will wait   
3707      =2                                          ///< for a SOF token before sending the packet. If an  
3708      =2                                          ///< IN token is received before a SOF token, USB0 will
3709      =2                                          ///< send a zero-length data packet.                   
3710      =2                                                                                                 
3711      =2  //------------------------------------------------------------------------------
3712      =2  // USB0ADR Enums (USB0 Indirect Address @ 0x96)
3713      =2  //------------------------------------------------------------------------------
3714      =2  #define USB0ADR_USB0ADR__FMASK          0x3F ///< USB0 Indirect Register Address                    
3715      =2  #define USB0ADR_USB0ADR__SHIFT          0x00 ///< USB0 Indirect Register Address                    
3716      =2  #define USB0ADR_USB0ADR__FADDR          0x00 ///< Function Address.                                 
3717      =2  #define USB0ADR_USB0ADR__POWER          0x01 ///< Power Management.                                 
3718      =2  #define USB0ADR_USB0ADR__IN1INT         0x02 ///< Endpoint 0 and Endpoints 1-3 IN Interrupt Flags.  
3719      =2  #define USB0ADR_USB0ADR__OUT1INT        0x04 ///< Endpoints 1-3 OUT Interrupt Flags.                
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 80  

3720      =2  #define USB0ADR_USB0ADR__CMINT          0x06 ///< Common USB Interrupt Flags.                       
3721      =2  #define USB0ADR_USB0ADR__IN1IE          0x07 ///< Endpoint 0 and Endpoints 1-3 IN Interrupt Enables.
3722      =2  #define USB0ADR_USB0ADR__OUT1IE         0x09 ///< Endpoints 1-3 OUT Interrupt Enables.              
3723      =2  #define USB0ADR_USB0ADR__CMIE           0x0B ///< Common USB Interrupt Enables.                     
3724      =2  #define USB0ADR_USB0ADR__FRAMEL         0x0C ///< Frame Number Low Byte.                            
3725      =2  #define USB0ADR_USB0ADR__FRAMEH         0x0D ///< Frame Number High Byte.                           
3726      =2  #define USB0ADR_USB0ADR__INDEX          0x0E ///< Endpoint Index Selection.                         
3727      =2  #define USB0ADR_USB0ADR__CLKREC         0x0F ///< Clock Recovery Control.                           
3728      =2  #define USB0ADR_USB0ADR__E0CSR_EINCSRL  0x11 ///< Endpoint 0 Control / Status, Endpoint IN Control /
3729      =2                                               ///< Status Low Byte.                                  
3730      =2  #define USB0ADR_USB0ADR__EINCSRH        0x12 ///< Endpoint IN Control / Status High Byte.           
3731      =2  #define USB0ADR_USB0ADR__EOUTCSRL       0x14 ///< Endpoint OUT Control / Status Low Byte.           
3732      =2  #define USB0ADR_USB0ADR__EOUTCSRH       0x15 ///< Endpoint OUT Control / Status High Byte.          
3733      =2  #define USB0ADR_USB0ADR__E0CNT_EOUTCNTL 0x16 ///< Number of Received Bytes in Endpoint 0 FIFO,      
3734      =2                                               ///< Endpoint OUT Packet Count Low Byte.               
3735      =2  #define USB0ADR_USB0ADR__EOUTCNTH       0x17 ///< Endpoint OUT Packet Count High Byte.              
3736      =2  #define USB0ADR_USB0ADR__EENABLE        0x1E ///< Endpoint Enable.                                  
3737      =2  #define USB0ADR_USB0ADR__FIFO0          0x20 ///< Endpoint 0 FIFO.                                  
3738      =2  #define USB0ADR_USB0ADR__FIFO1          0x21 ///< Endpoint 1 FIFO.                                  
3739      =2  #define USB0ADR_USB0ADR__FIFO2          0x22 ///< Endpoint 2 FIFO.                                  
3740      =2  #define USB0ADR_USB0ADR__FIFO3          0x23 ///< Endpoint 3 FIFO.                                  
3741      =2                                                                                                      
3742      =2  #define USB0ADR_AUTORD__BMASK           0x40 ///< USB0 Register Auto-Read Flag                      
3743      =2  #define USB0ADR_AUTORD__SHIFT           0x06 ///< USB0 Register Auto-Read Flag                      
3744      =2  #define USB0ADR_AUTORD__DISABLED        0x00 ///< BUSY must be written manually for each USB0       
3745      =2                                               ///< indirect register read.                           
3746      =2  #define USB0ADR_AUTORD__ENABLED         0x40 ///< The next indirect register read will automatically
3747      =2                                               ///< be initiated when firmware reads USB0DAT (USBADDR 
3748      =2                                               ///< bits will not be changed).                        
3749      =2                                                                                                      
3750      =2  #define USB0ADR_BUSY__BMASK             0x80 ///< USB0 Register Read Busy Flag                      
3751      =2  #define USB0ADR_BUSY__SHIFT             0x07 ///< USB0 Register Read Busy Flag                      
3752      =2  #define USB0ADR_BUSY__NOT_SET           0x00 ///< A read is not in progress.                        
3753      =2  #define USB0ADR_BUSY__SET               0x80 ///< Initiate a read or a read is in progress.         
3754      =2                                                                                                      
3755      =2  //------------------------------------------------------------------------------
3756      =2  // USB0DAT Enums (USB0 Data @ 0x97)
3757      =2  //------------------------------------------------------------------------------
3758      =2  #define USB0DAT_USB0DAT__FMASK 0xFF ///< USB0 Data
3759      =2  #define USB0DAT_USB0DAT__SHIFT 0x00 ///< USB0 Data
3760      =2                                                    
3761      =2  //------------------------------------------------------------------------------
3762      =2  // USB0XCN Enums (USB0 Transceiver Control @ 0xD7)
3763      =2  //------------------------------------------------------------------------------
3764      =2  #define USB0XCN_Dn__BMASK                0x01 ///< D- Signal Status                                 
3765      =2  #define USB0XCN_Dn__SHIFT                0x00 ///< D- Signal Status                                 
3766      =2  #define USB0XCN_Dn__LOW                  0x00 ///< D- signal currently at logic 0.                  
3767      =2  #define USB0XCN_Dn__HIGH                 0x01 ///< D- signal currently at logic 1.                  
3768      =2                                                                                                      
3769      =2  #define USB0XCN_Dp__BMASK                0x02 ///< D+ Signal Status                                 
3770      =2  #define USB0XCN_Dp__SHIFT                0x01 ///< D+ Signal Status                                 
3771      =2  #define USB0XCN_Dp__LOW                  0x00 ///< D+ signal currently at logic 0.                  
3772      =2  #define USB0XCN_Dp__HIGH                 0x02 ///< D+ signal currently at logic 1.                  
3773      =2                                                                                                      
3774      =2  #define USB0XCN_DFREC__BMASK             0x04 ///< Differential Receiver                            
3775      =2  #define USB0XCN_DFREC__SHIFT             0x02 ///< Differential Receiver                            
3776      =2  #define USB0XCN_DFREC__DIFFERENTIAL_ZERO 0x00 ///< Differential 0 signalling on the bus.            
3777      =2  #define USB0XCN_DFREC__DIFFERENTIAL_ONE  0x04 ///< Differential 1 signalling on the bus.            
3778      =2                                                                                                      
3779      =2  #define USB0XCN_PHYTST__FMASK            0x18 ///< Physical Layer Test                              
3780      =2  #define USB0XCN_PHYTST__SHIFT            0x03 ///< Physical Layer Test                              
3781      =2  #define USB0XCN_PHYTST__MODE0            0x00 ///< Mode 0: Normal (non-test mode) (D+ = X, D- = X). 
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 81  

3782      =2  #define USB0XCN_PHYTST__MODE1            0x08 ///< Mode 1: Differential 1 forced (D+ = 1, D- = 0).  
3783      =2  #define USB0XCN_PHYTST__MODE2            0x10 ///< Mode 2: Differential 0 forced (D+ = 0, D- = 1).  
3784      =2  #define USB0XCN_PHYTST__MODE3            0x18 ///< Mode 3: Single-Ended 0 forced (D+ = 0, D- = 0).  
3785      =2                                                                                                      
3786      =2  #define USB0XCN_SPEED__BMASK             0x20 ///< USB0 Speed Select                                
3787      =2  #define USB0XCN_SPEED__SHIFT             0x05 ///< USB0 Speed Select                                
3788      =2  #define USB0XCN_SPEED__LOW_SPEED         0x00 ///< USB0 operates as a Low Speed device. If enabled, 
3789      =2                                                ///< the internal pull-up resistor appears on the D-  
3790      =2                                                ///< line.                                            
3791      =2  #define USB0XCN_SPEED__FULL_SPEED        0x20 ///< USB0 operates as a Full Speed device. If enabled,
3792      =2                                                ///< the internal pull-up resistor appears on the D+  
3793      =2                                                ///< line.                                            
3794      =2                                                                                                      
3795      =2  #define USB0XCN_PHYEN__BMASK             0x40 ///< Physical Layer Enable                            
3796      =2  #define USB0XCN_PHYEN__SHIFT             0x06 ///< Physical Layer Enable                            
3797      =2  #define USB0XCN_PHYEN__DISABLED          0x00 ///< Disable the USB0 physical layer transceiver      
3798      =2                                                ///< (suspend).                                       
3799      =2  #define USB0XCN_PHYEN__ENABLED           0x40 ///< Enable the USB0 physical layer transceiver       
3800      =2                                                ///< (normal).                                        
3801      =2                                                                                                      
3802      =2  #define USB0XCN_PREN__BMASK              0x80 ///< Internal Pull-up Resistor Enable                 
3803      =2  #define USB0XCN_PREN__SHIFT              0x07 ///< Internal Pull-up Resistor Enable                 
3804      =2  #define USB0XCN_PREN__PULL_UP_DISABLED   0x00 ///< Internal pull-up resistor disabled (device       
3805      =2                                                ///< effectively detached from USB network).          
3806      =2  #define USB0XCN_PREN__PULL_UP_ENABLED    0x80 ///< Internal pull-up resistor enabled when VBUS is   
3807      =2                                                ///< present (device attached to the USB network).    
3808      =2                                                                                                      
3809      =2  //------------------------------------------------------------------------------
3810      =2  // VDM0CN Enums (Supply Monitor Control @ 0xFF)
3811      =2  //------------------------------------------------------------------------------
3812      =2  #define VDM0CN_VDDSTAT__BMASK  0x40 ///< Supply Status                                   
3813      =2  #define VDM0CN_VDDSTAT__SHIFT  0x06 ///< Supply Status                                   
3814      =2  #define VDM0CN_VDDSTAT__BELOW  0x00 ///< VDD is at or below the supply monitor threshold.
3815      =2  #define VDM0CN_VDDSTAT__ABOVE  0x40 ///< VDD is above the supply monitor threshold.      
3816      =2                                                                                           
3817      =2  #define VDM0CN_VDMEN__BMASK    0x80 ///< Supply Monitor Enable                           
3818      =2  #define VDM0CN_VDMEN__SHIFT    0x07 ///< Supply Monitor Enable                           
3819      =2  #define VDM0CN_VDMEN__DISABLED 0x00 ///< Supply Monitor Disabled.                        
3820      =2  #define VDM0CN_VDMEN__ENABLED  0x80 ///< Supply Monitor Enabled.                         
3821      =2                                                                                           
3822      =2  //------------------------------------------------------------------------------
3823      =2  // REF0CN Enums (Voltage Reference Control @ 0xD1)
3824      =2  //------------------------------------------------------------------------------
3825      =2  #define REF0CN_REFBE__BMASK    0x01 ///< Internal Reference Buffer Enable                  
3826      =2  #define REF0CN_REFBE__SHIFT    0x00 ///< Internal Reference Buffer Enable                  
3827      =2  #define REF0CN_REFBE__DISABLED 0x00 ///< Disable the internal reference buffer.            
3828      =2  #define REF0CN_REFBE__ENABLED  0x01 ///< Enable the internal reference buffer. The internal
3829      =2                                      ///< voltage reference is driven on the VREF pin.      
3830      =2                                                                                             
3831      =2  #define REF0CN_TEMPE__BMASK    0x04 ///< Temperature Sensor Enable                         
3832      =2  #define REF0CN_TEMPE__SHIFT    0x02 ///< Temperature Sensor Enable                         
3833      =2  #define REF0CN_TEMPE__DISABLED 0x00 ///< Disable the internal Temperature Sensor.          
3834      =2  #define REF0CN_TEMPE__ENABLED  0x04 ///< Enable the internal Temperature Sensor.           
3835      =2                                                                                             
3836      =2  #define REF0CN_REFSL__BMASK    0x08 ///< Voltage Reference Select                          
3837      =2  #define REF0CN_REFSL__SHIFT    0x03 ///< Voltage Reference Select                          
3838      =2  #define REF0CN_REFSL__VREF     0x00 ///< Use the VREF pin as the voltage reference.        
3839      =2  #define REF0CN_REFSL__VDD      0x08 ///< Use VDD as the voltage reference.                 
3840      =2                                                                                             
3841      =2  #define REF0CN_REGOVR__BMASK   0x10 ///< Regulator Reference Override                      
3842      =2  #define REF0CN_REGOVR__SHIFT   0x04 ///< Regulator Reference Override                      
3843      =2  #define REF0CN_REGOVR__REFSL   0x00 ///< The REFSL bit selects the voltage reference       
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 82  

3844      =2                                      ///< source.                                           
3845      =2  #define REF0CN_REGOVR__VREG    0x10 ///< Use the output of the internal regulator as the   
3846      =2                                      ///< voltage reference source.                         
3847      =2                                                                                             
3848      =2  #define REF0CN_REFBGS__BMASK   0x80 ///< Reference Buffer Gain Select                      
3849      =2  #define REF0CN_REFBGS__SHIFT   0x07 ///< Reference Buffer Gain Select                      
3850      =2  #define REF0CN_REFBGS__GAIN_2  0x00 ///< The on-chip voltage reference buffer gain is 2.   
3851      =2  #define REF0CN_REFBGS__GAIN_1  0x80 ///< The on-chip voltage reference buffer gain is 1.   
3852      =2                                                                                             
3853      =2  //------------------------------------------------------------------------------
3854      =2  // REG01CN Enums (Voltage Regulator Control @ 0xC9)
3855      =2  //------------------------------------------------------------------------------
3856      =2  #define REG01CN_REG1MD__BMASK     0x02 ///< VREG1 Voltage Regulator Mode                     
3857      =2  #define REG01CN_REG1MD__SHIFT     0x01 ///< VREG1 Voltage Regulator Mode                     
3858      =2  #define REG01CN_REG1MD__NORMAL    0x00 ///< VREG1 Voltage Regulator in normal mode.          
3859      =2  #define REG01CN_REG1MD__LOW_POWER 0x02 ///< VREG1 Voltage Regulator in low power mode.       
3860      =2                                                                                               
3861      =2  #define REG01CN_STOPCF__BMASK     0x08 ///< VREG1 Stop and Shutdown Mode Configuration       
3862      =2  #define REG01CN_STOPCF__SHIFT     0x03 ///< VREG1 Stop and Shutdown Mode Configuration       
3863      =2  #define REG01CN_STOPCF__ACTIVE    0x00 ///< VREG1 Regulator is still active in stop mode. Any
3864      =2                                         ///< enabled reset source will reset the device.      
3865      =2  #define REG01CN_STOPCF__SHUTDOWN  0x08 ///< VREG1 Regulator is shut down in stop mode (device
3866      =2                                         ///< enters Shutdown mode). Only the RSTb pin or power
3867      =2                                         ///< cycle can reset the device.                      
3868      =2                                                                                               
3869      =2  #define REG01CN_REG0MD__BMASK     0x10 ///< VREG0 Voltage Regulator Mode                     
3870      =2  #define REG01CN_REG0MD__SHIFT     0x04 ///< VREG0 Voltage Regulator Mode                     
3871      =2  #define REG01CN_REG0MD__NORMAL    0x00 ///< VREG0 Voltage Regulator in normal mode.          
3872      =2  #define REG01CN_REG0MD__LOW_POWER 0x10 ///< VREG0 Voltage Regulator in low power mode.       
3873      =2                                                                                               
3874      =2  #define REG01CN_VBSTAT__BMASK     0x40 ///< VBUS Signal Status                               
3875      =2  #define REG01CN_VBSTAT__SHIFT     0x06 ///< VBUS Signal Status                               
3876      =2  #define REG01CN_VBSTAT__NOT_SET   0x00 ///< VBUS signal currently absent (device not attached
3877      =2                                         ///< to USB network).                                 
3878      =2  #define REG01CN_VBSTAT__SET       0x40 ///< VBUS signal currently present (device attached to
3879      =2                                         ///< USB network).                                    
3880      =2                                                                                               
3881      =2  #define REG01CN_REG0DIS__BMASK    0x80 ///< Voltage Regulator (REG0) Disable                 
3882      =2  #define REG01CN_REG0DIS__SHIFT    0x07 ///< Voltage Regulator (REG0) Disable                 
3883      =2  #define REG01CN_REG0DIS__ENABLED  0x00 ///< Enable the VREG0 Voltage Regulator.              
3884      =2  #define REG01CN_REG0DIS__DISABLED 0x80 ///< Disable the VREG0 Voltage Regulator.             
3885      =2                                                                                               
3886      =2  //------------------------------------------------------------------------------
3887      =2  // EMI0CF Enums (External Memory Configuration @ 0x85)
3888      =2  //------------------------------------------------------------------------------
3889      =2  #define EMI0CF_EALE__FMASK                    0x03 ///< ALE Pulse-Width Select                            
3890      =2  #define EMI0CF_EALE__SHIFT                    0x00 ///< ALE Pulse-Width Select                            
3891      =2  #define EMI0CF_EALE__1_CLOCK                  0x00 ///< ALE high and ALE low pulse width = 1 SYSCLK cycle.
3892      =2  #define EMI0CF_EALE__2_CLOCKS                 0x01 ///< ALE high and ALE low pulse width = 2 SYSCLK       
3893      =2                                                     ///< cycles.                                           
3894      =2  #define EMI0CF_EALE__3_CLOCKS                 0x02 ///< ALE high and ALE low pulse width = 3 SYSCLK       
3895      =2                                                     ///< cycles.                                           
3896      =2  #define EMI0CF_EALE__4_CLOCKS                 0x03 ///< ALE high and ALE low pulse width = 4 SYSCLK       
3897      =2                                                     ///< cycles.                                           
3898      =2                                                                                                            
3899      =2  #define EMI0CF_EMD__FMASK                     0x0C ///< EMIF Operating Mode Select                        
3900      =2  #define EMI0CF_EMD__SHIFT                     0x02 ///< EMIF Operating Mode Select                        
3901      =2  #define EMI0CF_EMD__INTERNAL_ONLY             0x00 ///< Internal Only: MOVX accesses on-chip XRAM only.   
3902      =2                                                     ///< All effective addresses alias to on-chip memory   
3903      =2                                                     ///< space.                                            
3904      =2  #define EMI0CF_EMD__SPLIT_WITHOUT_BANK_SELECT 0x04 ///< Split Mode without Bank Select: Accesses below the
3905      =2                                                     ///< internal XRAM boundary are directed on-chip.      
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 83  

3906      =2                                                     ///< Accesses above the internal XRAM boundary are     
3907      =2                                                     ///< directed off-chip. 8-bit off-chip MOVX operations 
3908      =2                                                     ///< use the current contents of the Address high port 
3909      =2                                                     ///< latches to resolve the upper address byte. To     
3910      =2                                                     ///< access off chip space, EMI0CN must be set to a    
3911      =2                                                     ///< page that is not contained in the on-chip address 
3912      =2                                                     ///< space.                                            
3913      =2  #define EMI0CF_EMD__SPLIT_WITH_BANK_SELECT    0x08 ///< Split Mode with Bank Select: Accesses below the   
3914      =2                                                     ///< internal XRAM boundary are directed on-chip.      
3915      =2                                                     ///< Accesses above the internal XRAM boundary are     
3916      =2                                                     ///< directed off-chip. 8-bit off-chip MOVX operations 
3917      =2                                                     ///< uses the contents of EMI0CN to determine the high-
3918      =2                                                     ///< byte of the address.                              
3919      =2  #define EMI0CF_EMD__EXTERNAL_ONLY             0x0C ///< External Only: MOVX accesses off-chip XRAM only.  
3920      =2                                                     ///< On-chip XRAM is not visible to the core.          
3921      =2                                                                                                            
3922      =2  #define EMI0CF_MUXMD__BMASK                   0x10 ///< EMIF Multiplex Mode Select                        
3923      =2  #define EMI0CF_MUXMD__SHIFT                   0x04 ///< EMIF Multiplex Mode Select                        
3924      =2  #define EMI0CF_MUXMD__MULTIPLEXED             0x00 ///< EMIF operates in multiplexed address/data mode.   
3925      =2  #define EMI0CF_MUXMD__NON_MULTIPLEXED         0x10 ///< EMIF operates in non-multiplexed mode (separate   
3926      =2                                                     ///< address and data pins).                           
3927      =2                                                                                                            
3928      =2  #define EMI0CF_USBFAE__BMASK                  0x40 ///< USB FIFO Access Enable                            
3929      =2  #define EMI0CF_USBFAE__SHIFT                  0x06 ///< USB FIFO Access Enable                            
3930      =2  #define EMI0CF_USBFAE__FIFO_ACCESS_DISABLED   0x00 ///< USB FIFO RAM not available through MOVX           
3931      =2                                                     ///< instructions.                                     
3932      =2  #define EMI0CF_USBFAE__FIFO_ACCESS_ENABLED    0x40 ///< USB FIFO RAM available using MOVX instructions.   
3933      =2                                                     ///< The 1 KB of USB RAM will be mapped in XRAM space  
3934      =2                                                     ///< at addresses 0x0400 to 0x07FF. The USB clock must 
3935      =2                                                     ///< be active and greater than or equal to twice the  
3936      =2                                                     ///< SYSCLK (USBCLK > 2 x SYSCLK) to access this area  
3937      =2                                                     ///< with MOVX instructions.                           
3938      =2                                                                                                            
3939      =2  //------------------------------------------------------------------------------
3940      =2  // EMI0CN Enums (External Memory Interface Control @ 0xAA)
3941      =2  //------------------------------------------------------------------------------
3942      =2  #define EMI0CN_PGSEL__FMASK 0xFF ///< XRAM Page Select
3943      =2  #define EMI0CN_PGSEL__SHIFT 0x00 ///< XRAM Page Select
3944      =2                                                        
3945      =2  //------------------------------------------------------------------------------
3946      =2  // EMI0TC Enums (External Memory Timing Control @ 0x84)
3947      =2  //------------------------------------------------------------------------------
3948      =2  #define EMI0TC_AHOLD__FMASK      0x03 ///< EMIF Address Hold Time                      
3949      =2  #define EMI0TC_AHOLD__SHIFT      0x00 ///< EMIF Address Hold Time                      
3950      =2  #define EMI0TC_AHOLD__0_CLOCKS   0x00 ///< Address hold time = 0 SYSCLK cycles.        
3951      =2  #define EMI0TC_AHOLD__1_CLOCK    0x01 ///< Address hold time = 1 SYSCLK cycle.         
3952      =2  #define EMI0TC_AHOLD__2_CLOCKS   0x02 ///< Address hold time = 2 SYSCLK cycles.        
3953      =2  #define EMI0TC_AHOLD__3_CLOCKS   0x03 ///< Address hold time = 3 SYSCLK cycles.        
3954      =2                                                                                         
3955      =2  #define EMI0TC_PWIDTH__FMASK     0x3C ///< EMIF /WR and /RD Pulse-Width Control        
3956      =2  #define EMI0TC_PWIDTH__SHIFT     0x02 ///< EMIF /WR and /RD Pulse-Width Control        
3957      =2  #define EMI0TC_PWIDTH__1_CLOCK   0x00 ///< /WR and /RD pulse width is 1 SYSCLK cycle.  
3958      =2  #define EMI0TC_PWIDTH__2_CLOCKS  0x04 ///< /WR and /RD pulse width is 2 SYSCLK cycles. 
3959      =2  #define EMI0TC_PWIDTH__3_CLOCKS  0x08 ///< /WR and /RD pulse width is 3 SYSCLK cycles. 
3960      =2  #define EMI0TC_PWIDTH__4_CLOCKS  0x0C ///< /WR and /RD pulse width is 4 SYSCLK cycles. 
3961      =2  #define EMI0TC_PWIDTH__5_CLOCKS  0x10 ///< /WR and /RD pulse width is 5 SYSCLK cycles. 
3962      =2  #define EMI0TC_PWIDTH__6_CLOCKS  0x14 ///< /WR and /RD pulse width is 6 SYSCLK cycles. 
3963      =2  #define EMI0TC_PWIDTH__7_CLOCKS  0x18 ///< /WR and /RD pulse width is 7 SYSCLK cycles. 
3964      =2  #define EMI0TC_PWIDTH__8_CLOCKS  0x1C ///< /WR and /RD pulse width is 8 SYSCLK cycles. 
3965      =2  #define EMI0TC_PWIDTH__9_CLOCKS  0x20 ///< /WR and /RD pulse width is 9 SYSCLK cycles. 
3966      =2  #define EMI0TC_PWIDTH__10_CLOCKS 0x24 ///< /WR and /RD pulse width is 10 SYSCLK cycles.
3967      =2  #define EMI0TC_PWIDTH__11_CLOCKS 0x28 ///< /WR and /RD pulse width is 11 SYSCLK cycles.
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 84  

3968      =2  #define EMI0TC_PWIDTH__12_CLOCKS 0x2C ///< /WR and /RD pulse width is 12 SYSCLK cycles.
3969      =2  #define EMI0TC_PWIDTH__13_CLOCKS 0x30 ///< /WR and /RD pulse width is 13 SYSCLK cycles.
3970      =2  #define EMI0TC_PWIDTH__14_CLOCKS 0x34 ///< /WR and /RD pulse width is 14 SYSCLK cycles.
3971      =2  #define EMI0TC_PWIDTH__15_CLOCKS 0x38 ///< /WR and /RD pulse width is 15 SYSCLK cycles.
3972      =2  #define EMI0TC_PWIDTH__16_CLOCKS 0x3C ///< /WR and /RD pulse width is 16 SYSCLK cycles.
3973      =2                                                                                         
3974      =2  #define EMI0TC_ASETUP__FMASK     0xC0 ///< EMIF Address Setup Time                     
3975      =2  #define EMI0TC_ASETUP__SHIFT     0x06 ///< EMIF Address Setup Time                     
3976      =2  #define EMI0TC_ASETUP__0_CLOCKS  0x00 ///< Address setup time = 0 SYSCLK cycles.       
3977      =2  #define EMI0TC_ASETUP__1_CLOCK   0x40 ///< Address setup time = 1 SYSCLK cycle.        
3978      =2  #define EMI0TC_ASETUP__2_CLOCKS  0x80 ///< Address setup time = 2 SYSCLK cycles.       
3979      =2  #define EMI0TC_ASETUP__3_CLOCKS  0xC0 ///< Address setup time = 3 SYSCLK cycles.       
3980      =2                                                                                         
3981      =2  #endif // SI_EFM8UB2_REGISTER_ENUMS_H
3982      =2  //-eof--------------------------------------------------------------------------
3983      =2  
  11      =1  #include <stdint.h>
   1      =2  /**************************************************************************//**
   2      =2   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =2   *
   4      =2   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =2   *****************************************************************************/
   6      =2  
   7      =2  #ifndef STDINT_H
           =2 #define STDINT_H
           =2 
           =2 #if defined __C51__
           =2 
           =2 typedef unsigned char     uint8_t;
           =2 typedef unsigned short    uint16_t;
           =2 typedef unsigned long     uint32_t;
           =2 typedef uint32_t          uint64_t[2];
           =2 
           =2 typedef signed char       int8_t;
           =2 typedef short             int16_t;
           =2 typedef long              int32_t;
           =2 typedef int32_t           int64_t[2];
           =2 
           =2 #endif
           =2 
           =2 #endif
  12      =1  #include <stdbool.h>
   1      =2  /**************************************************************************//**
   2      =2   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =2   *
   4      =2   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =2   *****************************************************************************/
   6      =2  
   7      =2  #ifndef STDBOOL_H
           =2 #define STDBOOL_H
           =2 
           =2 #if defined __C51__
           =2 
           =2 typedef bit bool;
           =2 enum{
           =2   false = 0,
           =2   true = 1,
           =2 };
           =2 
           =2 #endif //__C51__
           =2 #endif //STDBOOL_H
  20      =2  
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 85  

  13      =1  
  14      =1  /******************************************************************************/
  15      =1  
  16      =1  /**
  17      =1   *
  18      =1   * @addtogroup usb_0_group USB0 Driver
  19      =1   * @{
  20      =1   *
  21      =1   * @brief Peripheral driver for USB 0
  22      =1   *
  23      =1   * # Introduction #
  24      =1   *
  25      =1   * This module provides an API for using the USB0 peripheral.
  26      =1   * The API provides access to the USB hardware. A full-featured
  27      =1   * USB stack (EFM8 USB Library) is available in the SDK at "\lib\efm8_usb."
  28      =1   * The primary purpose of this USB peripheral driver is to abstract hardware
  29      =1   * accesses so that the EFM8 USB Library can run on multiple EFM8 devices
  30      =1   * (e.g. EFM8UB1, EFM8UB2). However, this driver can also be used to build
  31      =1   * custom USB stacks and applications in cases where greater optimization or
  32      =1   * performance than what the EFM8 USB Library provides is required.
  33      =1   *
  34      =1   ******************************************************************************/
  35      =1  
  36      =1  /***************************************************************************//**
  37      =1   * @addtogroup usb_0_runtime USB0 Runtime API
  38      =1   * @brief
  39      =1   * Functions and macros to access the USB hardware.
  40      =1   * @{
  41      =1   ******************************************************************************/
  42      =1  
  43      =1  // -------------------------------
  44      =1  // Macros
  45      =1  
  46      =1  /***************************************************************************//**
  47      =1   * @brief       Reads an indirect USB register
  48      =1   * @details     Sets USB0ADR and polls on the busy bit.
  49      =1   *              When the macro completes, the value can be read from USB0DAT.
  50      =1   * @param       addr
  51      =1   *              The address of the USB indirect register to read
  52      =1   * @return      The value of the USB indirect register is held in USB0DAT.
  53      =1   * @note        This function is implemented as a macro.
  54      =1   ******************************************************************************/
  55      =1  #ifdef IS_DOXYGEN
           =1 extern uint8_t USB_READ_BYTE(uint8_t addr);
           =1 #else
  58      =1  #define USB_READ_BYTE(addr) \
  59      =1    do \
  60      =1    { \
  61      =1      USB0ADR = (USB0ADR_BUSY__SET | (addr)); \
  62      =1      while (USB0ADR & USB0ADR_BUSY__SET) {} \
  63      =1    } while (0)
  64      =1  #endif
  65      =1  
  66      =1  /***************************************************************************//**
  67      =1   * @brief       Writes an indirect USB register
  68      =1   * @details     Sets USB0ADR, writes a value to USB0DAT, and waits for the busy
  69      =1   *              bit to clear.
  70      =1   * @param       addr
  71      =1   *              The address of the USB indirect register to read
  72      =1   * @param       dat
  73      =1   *              The value to write to the USB indirect register
  74      =1   * @note        This function is implemented as a macro.
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 86  

  75      =1   ******************************************************************************/
  76      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_WRITE_BYTE(uint8_t addr, uint8_t dat);
           =1 #else
  79      =1  #define USB_WRITE_BYTE(addr, dat) \
  80      =1    do \
  81      =1    { \
  82      =1      USB0ADR = (addr); \
  83      =1      USB0DAT = (dat); \
  84      =1      while (USB0ADR & USB0ADR_BUSY__SET) {} \
  85      =1    } while (0)
  86      =1  #endif
  87      =1  
  88      =1  /***************************************************************************//**
  89      =1   * @brief       Sets bits in an indirect USB register
  90      =1   * @details     Sets the bits in the bitmask of the indirect USB register
  91      =1   *              without disturbing the value of other bits in the indirect
  92      =1   *              register.
  93      =1   * @param       addr
  94      =1   *              The address of the USB indirect register to write
  95      =1   * @param       bitmask
  96      =1   *              The bits to set
  97      =1   * @note        This function is implemented as a macro.
  98      =1   ******************************************************************************/
  99      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SET_BITS(uint8_t addr, uint8_t bitmask);
           =1 #else
 102      =1  #define USB_SET_BITS(addr, bitmask) \
 103      =1    do \
 104      =1    { \
 105      =1      USB0ADR = (USB0ADR_BUSY__SET | (addr)); \
 106      =1      while (USB0ADR & USB0ADR_BUSY__SET) {} \
 107      =1      USB0DAT = (USB0DAT | (bitmask)); \
 108      =1      while (USB0ADR & USB0ADR_BUSY__SET) {} \
 109      =1    } while (0)
 110      =1  #endif
 111      =1  
 112      =1  /***************************************************************************//**
 113      =1   * @brief       Clears bits in an indirect USB register
 114      =1   * @details     Clears the bits in the bitmask of an indirect USB register
 115      =1   *              without disturbing the value of other bits in the indirect
 116      =1   *              register.
 117      =1   * @param       addr
 118      =1   *              The address of the USB indirect register to write
 119      =1   * @param       bitmask
 120      =1   *              The bits to clear
 121      =1   * @note        This function is implemented as a macro.
 122      =1   ******************************************************************************/
 123      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_CLEAR_BITS(uint8_t addr, uint8_t bitmask);
           =1 #else
 126      =1  #define USB_CLEAR_BITS(addr, bitmask) \
 127      =1    do \
 128      =1    { \
 129      =1      USB0ADR = (USB0ADR_BUSY__SET | (addr)); \
 130      =1      while (USB0ADR & USB0ADR_BUSY__SET) {} \
 131      =1      USB0DAT = (USB0DAT & ~(bitmask)); \
 132      =1      while (USB0ADR & USB0ADR_BUSY__SET) {} \
 133      =1    } while (0)
 134      =1  #endif
 135      =1  
 136      =1  /***************************************************************************//**
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 87  

 137      =1   * @brief       Enables USB interrupts
 138      =1   * @note        This function is implemented as a macro.
 139      =1   ******************************************************************************/
 140      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableInts(void);
           =1 #else
 143      =1  #define USB_EnableInts() EIE1 |= EIE1_EUSB0__ENABLED;
 144      =1  #endif
 145      =1  
 146      =1  /***************************************************************************//**
 147      =1   * @brief       Disables USB interrupts
 148      =1   * @note        This function is implemented as a macro.
 149      =1   ******************************************************************************/
 150      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableInts(void);
           =1 #else
 153      =1  #define USB_DisableInts() EIE1 &= ~EIE1_EUSB0__ENABLED;
 154      =1  #endif
 155      =1  
 156      =1  /***************************************************************************//**
 157      =1   * @brief       Returns state of USB interrupt enabler
 158      =1   * @return      TRUE if USB interrupts are enabled, FALSE otherwise.
 159      =1   * @note        This function is implemented as a macro.
 160      =1   ******************************************************************************/
 161      =1  #ifdef IS_DOXYGEN
           =1 extern bool USB_GetIntsEnabled(void);
           =1 #else
 164      =1  #define USB_GetIntsEnabled() (EIE1 & EIE1_EUSB0__ENABLED);
 165      =1  #endif
 166      =1  
 167      =1  /***************************************************************************//**
 168      =1   * @brief       Enables VBUS detection
 169      =1   * @note        This function is implemented as a macro.
 170      =1   ******************************************************************************/
 171      =1  #ifdef IS_DOXYGEN
           =1 extern bool USB_VbusDetectEnable(void);
           =1 #else
 174      =1  #define USB_VbusDetectEnable()
 175      =1  #endif
 176      =1  
 177      =1  /***************************************************************************//**
 178      =1   * @brief       Disables VBUS detection
 179      =1   * @note        This function is implemented as a macro.
 180      =1   ******************************************************************************/
 181      =1  #ifdef IS_DOXYGEN
           =1 extern bool USB_VbusDetectDisable(void);
           =1 #else
 184      =1  #define USB_VbusDetectDisable()
 185      =1  #endif
 186      =1  
 187      =1  /***************************************************************************//**
 188      =1   * @brief       Check status of VBUS signal
 189      =1   * @return      TRUE if VBUS signal is present, FALSE otherwise.
 190      =1   * @note        This function is implemented as a macro.
 191      =1   ******************************************************************************/
 192      =1  #ifdef IS_DOXYGEN
           =1 extern bool USB_IsVbusOn(void);
           =1 #else
 195      =1  #define USB_IsVbusOn() ((bool)(REG01CN & REG01CN_VBSTAT__SET))
 196      =1  #endif
 197      =1  
 198      =1  /***************************************************************************//**
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 88  

 199      =1   * @brief       Enables the USB pull-up resistor
 200      =1   * @details     Enables either the D+ or the D- pull-up resistor, depending on
 201      =1   *              whether @ref USB_SelectFullSpeed() or @ref USB_SelectLowSpeed()
 202      =1   *              was previously called.
 203      =1   * @note        This function is implemented as a macro.
 204      =1   ******************************************************************************/
 205      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnablePullUpResistor(void);
           =1 #else
 208      =1  #define USB_EnablePullUpResistor() USB0XCN |= USB0XCN_PREN__PULL_UP_ENABLED;
 209      =1  #endif
 210      =1  
 211      =1  /***************************************************************************//**
 212      =1   * @brief       Disables the USB pull-up resistor
 213      =1   * @details     Disables either the D+ or the D- pull-up resistor, depending on
 214      =1   *              whether @ref USB_SelectFullSpeed() or @ref USB_SelectLowSpeed()
 215      =1   *              was previously called.
 216      =1   * @note        This function is implemented as a macro.
 217      =1   ******************************************************************************/
 218      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisablePullUpResistor(void);
           =1 #else
 221      =1  #define USB_DisablePullUpResistor() USB0XCN &= ~USB0XCN_PREN__PULL_UP_ENABLED;
 222      =1  #endif
 223      =1  
 224      =1  /***************************************************************************//**
 225      =1   * @brief       Enables the USB transceiver
 226      =1   * @note        This function is implemented as a macro.
 227      =1   ******************************************************************************/
 228      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableTransceiver(void);
           =1 #else
 231      =1  #define USB_EnableTransceiver() USB0XCN |= USB0XCN_PHYEN__ENABLED;
 232      =1  #endif
 233      =1  
 234      =1  /***************************************************************************//**
 235      =1   * @brief       Disables the USB transceiver
 236      =1   * @note        This function is implemented as a macro.
 237      =1   ******************************************************************************/
 238      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableTransceiver(void);
           =1 #else
 241      =1  #define USB_DisableTransceiver() USB0XCN &= ~USB0XCN_PHYEN__ENABLED;
 242      =1  #endif
 243      =1  
 244      =1  /***************************************************************************//**
 245      =1   * @brief       Puts the USB in full-speed mode.
 246      =1   * @details     Configures the USB to operate as a full-speed device by
 247      =1   *              enabling the D+ pull-up resistor. After calling this
 248      =1   *              function, the user must call @ref USB_EnablePullUpResistor().
 249      =1   * @note        This function is implemented as a macro.
 250      =1   ******************************************************************************/
 251      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SelectFullSpeed(void);
           =1 #else
 254      =1  #define USB_SelectFullSpeed() USB0XCN |= USB0XCN_SPEED__FULL_SPEED;
 255      =1  #endif
 256      =1  
 257      =1  /***************************************************************************//**
 258      =1   * @brief       Puts the USB in low-speed mode.
 259      =1   * @details     Configures the USB to operate as a low-speed device by
 260      =1   *              enabling the D- pull-up resistor. After calling this
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 89  

 261      =1   *              function, the user must call @ref USB_EnablePullUpResistor().
 262      =1   * @note        This function is implemented as a macro.
 263      =1   ******************************************************************************/
 264      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SelectLowSpeed(void);
           =1 #else
 267      =1  #define USB_SelectLowSpeed() USB0XCN &= ~USB0XCN_SPEED__FULL_SPEED;
 268      =1  #endif
 269      =1  
 270      =1  /***************************************************************************//**
 271      =1   * @brief       Suspends the transceiver
 272      =1   * @details     Puts the USB transceiver in suspend mode.
 273      =1   * @note        This function is implemented as a macro.
 274      =1   ******************************************************************************/
 275      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SuspendTransceiver(void);
           =1 #else
 278      =1  #define USB_SuspendTransceiver() \
 279      =1      USB0XCN &= ~(USB0XCN_PHYEN__ENABLED | USB0XCN_Dp__HIGH | USB0XCN_Dn__HIGH);
 280      =1  #endif
 281      =1  
 282      =1  /***************************************************************************//**
 283      =1   * @brief       Selects the internal oscillator as the USB clock
 284      =1   * @note        This function is implemented as a macro.
 285      =1   ******************************************************************************/
 286      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SetClockIntOsc(void);
           =1 #else
 289      =1  #define USB_SetClockIntOsc() CLKSEL &= ~CLKSEL_USBCLK__FMASK;
 290      =1  #endif
 291      =1  
 292      =1  /***************************************************************************//**
 293      =1   * @brief       Selects the internal oscillator / 8 as the USB clock
 294      =1   * @note        This function is implemented as a macro.
 295      =1   ******************************************************************************/
 296      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SetClockIntOscDiv8(void);
           =1 #else
 299      =1  #define USB_SetClockIntOscDiv8() \
 300      =1    do \
 301      =1    { \
 302      =1      CLKSEL &= ~CLKSEL_USBCLK__FMASK; \
 303      =1      CLKSEL |= CLKSEL_USBCLK__HFOSC_DIV_8; \
 304      =1    } while (0)
 305      =1  #endif
 306      =1  
 307      =1  /***************************************************************************//**
 308      =1   * @brief       Selects the external oscillator as the USB clock
 309      =1   * @note        This function is implemented as a macro.
 310      =1   ******************************************************************************/
 311      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SetClockExtOsc(void);
           =1 #else
 314      =1  #define USB_SetClockExtOsc() \
 315      =1    do \
 316      =1    { \
 317      =1      CLKSEL &= ~CLKSEL_USBCLK__FMASK; \
 318      =1      CLKSEL |= CLKSEL_USBCLK__EXTOSC; \
 319      =1    } while (0)
 320      =1  #endif
 321      =1  
 322      =1  /***************************************************************************//**
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 90  

 323      =1   * @brief       Selects the external oscillator / 2 as the USB clock
 324      =1   * @note        This function is implemented as a macro.
 325      =1   ******************************************************************************/
 326      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SetClockExtOscDiv2(void);
           =1 #else
 329      =1  #define USB_SetClockExtOscDiv2() \
 330      =1    do \
 331      =1    { \
 332      =1      CLKSEL &= ~CLKSEL_USBCLK__FMASK; \
 333      =1      CLKSEL |= CLKSEL_USBCLK__EXTOSC_DIV_2; \
 334      =1    } while (0)
 335      =1  #endif
 336      =1  
 337      =1  /***************************************************************************//**
 338      =1   * @brief       Selects the external oscillator / 3 as the USB clock
 339      =1   * @note        This function is implemented as a macro.
 340      =1   ******************************************************************************/
 341      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SetClockExtOscDiv3(void);
           =1 #else
 344      =1  #define USB_SetClockExtOscDiv3() \
 345      =1    do \
 346      =1    { \
 347      =1      CLKSEL &= ~CLKSEL_USBCLK__FMASK; \
 348      =1      CLKSEL |= CLKSEL_USBCLK__EXTOSC_DIV_3; \
 349      =1    } while (0)
 350      =1  #endif
 351      =1  
 352      =1  /***************************************************************************//**
 353      =1   * @brief       Selects the external oscillator / 4 as the USB clock
 354      =1   * @note        This function is implemented as a macro.
 355      =1   ******************************************************************************/
 356      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SetClockExtOscDiv4(void);
           =1 #else
 359      =1  #define USB_SetClockExtOscDiv4() \
 360      =1    do \
 361      =1    { \
 362      =1      CLKSEL &= ~CLKSEL_USBCLK__FMASK; \
 363      =1      CLKSEL |= CLKSEL_USBCLK__EXTOSC_DIV_4; \
 364      =1    } while (0)
 365      =1  #endif
 366      =1  
 367      =1  /***************************************************************************//**
 368      =1   * @brief       Selects the low-frequency oscillator as the USB clock
 369      =1   * @note        This function is implemented as a macro.
 370      =1   ******************************************************************************/
 371      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SetClockLfo(void);
           =1 #else
 374      =1  #define USB_SetClockLfo() \
 375      =1    do \
 376      =1    { \
 377      =1      CLKSEL &= ~CLKSEL_USBCLK__FMASK; \
 378      =1      CLKSEL |= CLKSEL_USBCLK__LFOSC; \
 379      =1    } while (0)
 380      =1  #endif
 381      =1  
 382      =1  /***************************************************************************//**
 383      =1   * @brief       Selects the normal setting for the USB clock
 384      =1   * @note        This function is implemented as a macro.
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 91  

 385      =1   ******************************************************************************/
 386      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SetNormalClock(void);
           =1 #else
 389      =1  #define USB_SetNormalClock() USB_SetClockIntOsc()
 390      =1  #endif
 391      =1  
 392      =1  /***************************************************************************//**
 393      =1   * @brief       Selects the low-power setting for the USB clock
 394      =1   * @note        This function is implemented as a macro.
 395      =1   ******************************************************************************/
 396      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SetSuspendClock(void);
           =1 #else
 399      =1  #define USB_SetSuspendClock() USB_SetClockIntOscDiv8()
 400      =1  #endif
 401      =1  
 402      =1  /***************************************************************************//**
 403      =1   * @brief       Suspends REG0 and REG1
 404      =1   * @note        This function is implemented as a macro.
 405      =1   ******************************************************************************/
 406      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SuspendRegulator(void);
           =1 #else
 409      =1  #define USB_SuspendRegulator() \
 410      =1    REG01CN |= (REG01CN_REG1MD__LOW_POWER | REG01CN_REG0MD__LOW_POWER)
 411      =1  #endif
 412      =1  
 413      =1  /***************************************************************************//**
 414      =1   * @brief       Does not use regulator low-power modes
 415      =1   * @note        This function is implemented as a macro.
 416      =1   ******************************************************************************/
 417      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SuspendRegulatorFastWake(void);
           =1 #else
 420      =1  #define USB_SuspendRegulatorFastWake()
 421      =1  #endif
 422      =1  
 423      =1  /***************************************************************************//**
 424      =1   * @brief       Takes REG0 and REG1 out of suspend
 425      =1   * @note        This function is implemented as a macro.
 426      =1   ******************************************************************************/
 427      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_UnsuspendRegulator(void);
           =1 #else
 430      =1  #define USB_UnsuspendRegulator() \
 431      =1    REG01CN &= ~(REG01CN_REG1MD__LOW_POWER | REG01CN_REG0MD__LOW_POWER)
 432      =1  #endif
 433      =1  
 434      =1  /***************************************************************************//**
 435      =1   * @brief       Determine if the internal regulator is enabled
 436      =1   * @return      TRUE if the internal regulator is enabled, FALSE otherwise
 437      =1   * @note        This function is implemented as a macro.
 438      =1   ******************************************************************************/
 439      =1  #ifdef IS_DOXYGEN
           =1 extern bool USB_IsRegulatorEnabled(void);
           =1 #else
 442      =1  #define USB_IsRegulatorEnabled() (!(REG01CN & REG01CN_REG0DIS__DISABLED))
 443      =1  #endif
 444      =1  
 445      =1  /***************************************************************************//**
 446      =1   * @brief       Disable the prefetch engine
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 92  

 447      =1   * @note        This function is implemented as a macro.
 448      =1   ******************************************************************************/
 449      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisablePrefetch(void);
           =1 #else
 452      =1  #define USB_DisablePrefetch() (PFE0CN &= ~PFE0CN_PFEN__ENABLED)
 453      =1  #endif
 454      =1  
 455      =1  /***************************************************************************//**
 456      =1   * @brief       Enable the prefetch engine
 457      =1   * @note        This function is implemented as a macro.
 458      =1   ******************************************************************************/
 459      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnablePrefetch(void);
           =1 #else
 462      =1  #define USB_EnablePrefetch() (PFE0CN |= PFE0CN_PFEN__ENABLED)
 463      =1  #endif
 464      =1  
 465      =1  /***************************************************************************//**
 466      =1   * @brief       Determine if the prefetch engine is enabled
 467      =1   * @return      TRUE if prefetch engine is enabled, FALSE otherwise.
 468      =1   ******************************************************************************/
 469      =1  #ifdef IS_DOXYGEN
           =1 extern bool USB_IsPrefetchEnabled(void);
           =1 #else
 472      =1  #define USB_IsPrefetchEnabled() ((bool)(PFE0CN & PFE0CN_PFEN__ENABLED))
 473      =1  #endif
 474      =1  
 475      =1  /***************************************************************************//**
 476      =1   * @brief       Suspends internal oscillator
 477      =1   * @note        This function is implemented as a macro.
 478      =1   ******************************************************************************/
 479      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SuspendOscillator(void);
           =1 #else
 482      =1  #define USB_SuspendOscillator() HFO0CN |= HFO0CN_SUSPEND__ENABLED;
 483      =1  #endif
 484      =1  
 485      =1  /***************************************************************************//**
 486      =1   * @brief       Enables clock recovery in full speed mode
 487      =1   * @note        This function is implemented as a macro.
 488      =1   ******************************************************************************/
 489      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableFullSpeedClockRecovery(void);
           =1 #else
 492      =1  #define USB_EnableFullSpeedClockRecovery() \
 493      =1      USB_WRITE_BYTE(CLKREC, (CLKREC_CRE__ENABLED | 0x0F))
 494      =1  #endif
 495      =1  
 496      =1  /***************************************************************************//**
 497      =1   * @brief       Enables clock recovery in low speed mode
 498      =1   * @note        This function is implemented as a macro.
 499      =1   ******************************************************************************/
 500      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableLowSpeedClockRecovery(void);
           =1 #else
 503      =1  #define USB_EnableLowSpeedClockRecovery() \
 504      =1    USB_WRITE_BYTE(CLKREC, \
 505      =1                    (CLKREC_CRE__ENABLED \
 506      =1                     | CLKREC_CRLOW__LOW_SPEED \
 507      =1                     | 0x0F))
 508      =1  #endif
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 93  

 509      =1  
 510      =1  /***************************************************************************//**
 511      =1   * @brief       Disables clock recovery
 512      =1   * @note        This function is implemented as a macro.
 513      =1   ******************************************************************************/
 514      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableClockRecovery(void);
           =1 #else
 517      =1  #define USB_DisableClockRecovery() USB_WRITE_BYTE(CLKREC, 0x0F)
 518      =1  #endif
 519      =1  
 520      =1  /***************************************************************************//**
 521      =1   * @brief       Sets the USB function address
 522      =1   * @param       addr
 523      =1   *   USB Function Address value
 524      =1   * @note        This function is implemented as a macro.
 525      =1   ******************************************************************************/
 526      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SetAddress(uint8_t addr);
           =1 #else
 529      =1  #define USB_SetAddress(addr) \
 530      =1    USB_WRITE_BYTE(FADDR, (FADDR_UPDATE__SET | (addr)))
 531      =1  #endif
 532      =1  
 533      =1  /***************************************************************************//**
 534      =1   * @brief       Disable the USB Inhibit feature
 535      =1   * @details     The USB block is inhibited after a power-on-reset or an
 536      =1   *              asynchronous reset. Software should disable the inhibit bit
 537      =1   *              after all USB and transceiver initialization is complete.
 538      =1   * @note        This function is implemented as a macro.
 539      =1   ******************************************************************************/
 540      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableInhibit(void);
           =1 #else
 543      =1  #define USB_DisableInhibit() \
 544      =1    USB_WRITE_BYTE(POWER, (POWER_USBINH__ENABLED | POWER_SUSEN__ENABLED))
 545      =1  #endif
 546      =1  
 547      =1  /***************************************************************************//**
 548      =1   * @brief       Forces a USB reset
 549      =1   * @note        This function is implemented as a macro.
 550      =1   ******************************************************************************/
 551      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_ForceReset(void);
           =1 #else
 554      =1  #define USB_ForceReset() USB_WRITE_BYTE(POWER, POWER_USBRST__SET)
 555      =1  #endif
 556      =1  
 557      =1  /***************************************************************************//**
 558      =1   * @brief       Forces USB resume signaling
 559      =1   * @note        This function is implemented as a macro.
 560      =1   ******************************************************************************/
 561      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_ForceResume(void);
           =1 #else
 564      =1  #define USB_ForceResume() \
 565      =1    USB_WRITE_BYTE(POWER, (POWER_RESUME__START | POWER_SUSEN__ENABLED))
 566      =1  #endif
 567      =1  
 568      =1  /***************************************************************************//**
 569      =1   * @brief       Clears USB resume signaling
 570      =1   * @note        This function is implemented as a macro.
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 94  

 571      =1   ******************************************************************************/
 572      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_ClearResume(void);
           =1 #else
 575      =1  #define USB_ClearResume() USB_WRITE_BYTE(POWER, POWER_SUSEN__ENABLED)
 576      =1  #endif
 577      =1  
 578      =1  /***************************************************************************//**
 579      =1   * @brief       Enables USB suspend detection
 580      =1   * @note        This function is implemented as a macro.
 581      =1   ******************************************************************************/
 582      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableSuspendDetection(void);
           =1 #else
 585      =1  #define USB_EnableSuspendDetection() USB_WRITE_BYTE(POWER, POWER_SUSEN__ENABLED)
 586      =1  #endif
 587      =1  
 588      =1  /***************************************************************************//**
 589      =1   * @brief       Disables USB suspend detection
 590      =1   * @note        This function is implemented as a macro.
 591      =1   ******************************************************************************/
 592      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableSuspendDetection(void);
           =1 #else
 595      =1  #define USB_DisableSuspendDetection() USB_WRITE_BYTE(POWER, 0)
 596      =1  #endif
 597      =1  
 598      =1  /***************************************************************************//**
 599      =1   * @brief       Setup End Serviced
 600      =1   * @details     Software should call this function after servicing a Setup End
 601      =1   *              event. Setup End is detected by calling usbGetSetupEnd
 602      =1   * @note        This function is implemented as a macro.
 603      =1   ******************************************************************************/
 604      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_ServicedSetupEnd(void);
           =1 #else
 607      =1  #define USB_ServicedSetupEnd() \
 608      =1    USB_WRITE_BYTE(E0CSR, E0CSR_SSUEND__SET)
 609      =1  #endif
 610      =1  
 611      =1  /***************************************************************************//**
 612      =1   * @brief       Out Packet Ready Serviced
 613      =1   * @details     Software should call this function after servicing a received
 614      =1   *              Endpoint 0 packet.
 615      =1   * @note        This function is implemented as a macro.
 616      =1   ******************************************************************************/
 617      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_Ep0ServicedOutPacketReady(void);
           =1 #else
 620      =1  #define USB_Ep0ServicedOutPacketReady() \
 621      =1    USB_WRITE_BYTE(E0CSR, E0CSR_SOPRDY__SET)
 622      =1  #endif
 623      =1  
 624      =1  /***************************************************************************//**
 625      =1   * @brief       Sets In Packet Ready and Data End on Endpoint 0
 626      =1   * @details     This should be called instead of @ref USB_Ep0SetInPacketReady()
 627      =1   *              when sending the last packet of a setup data phase.
 628      =1   * @note        This function is implemented as a macro.
 629      =1   ******************************************************************************/
 630      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_Ep0SetLastInPacketReady(void);
           =1 #else
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 95  

 633      =1  #define USB_Ep0SetLastInPacketReady() \
 634      =1    USB_WRITE_BYTE(E0CSR, (E0CSR_INPRDY__SET | E0CSR_DATAEND__SET))
 635      =1  #endif
 636      =1  
 637      =1  /***************************************************************************//**
 638      =1   * @brief       Sets In Packet Ready and Data End on Endpoint 0
 639      =1   * @details     This should be called instead of @ref USB_Ep0SetInPacketReady()
 640      =1   *              when sending a zero-length packet.
 641      =1   * @note        This function is implemented as a macro.
 642      =1   ******************************************************************************/
 643      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_Ep0SetZLPInPacketReady(void);
           =1 #else
 646      =1  #define USB_Ep0SetZLPInPacketReady() \
 647      =1    USB_WRITE_BYTE(E0CSR, (E0CSR_INPRDY__SET | E0CSR_DATAEND__SET))
 648      =1  #endif
 649      =1  
 650      =1  /***************************************************************************//**
 651      =1   * @brief       Serviced Out Packet Ready and Data End on Endpoint 0
 652      =1   * @details     This should be called instead of @ref USB_ServicedSetupEnd()
 653      =1   *              after servicing the last incoming data packet.
 654      =1   * @note        This function is implemented as a macro.
 655      =1   ******************************************************************************/
 656      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_Ep0SetLastOutPacketReady(void);
           =1 #else
 659      =1  #define USB_Ep0SetLastOutPacketReady() \
 660      =1    USB_WRITE_BYTE(E0CSR, (E0CSR_SOPRDY__SET | E0CSR_DATAEND__SET))
 661      =1  #endif
 662      =1  
 663      =1  /***************************************************************************//**
 664      =1   * @brief       Sends a stall on Endpoint 0
 665      =1   * @note        This function is implemented as a macro.
 666      =1   ******************************************************************************/
 667      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_Ep0SendStall(void);
           =1 #else
 670      =1  #define USB_Ep0SendStall() \
 671      =1    USB_WRITE_BYTE(E0CSR, (E0CSR_SOPRDY__SET | E0CSR_SDSTL__SET))
 672      =1  #endif
 673      =1  
 674      =1  /***************************************************************************//**
 675      =1   * @brief       Clears sent stall condition on Endpoint 0
 676      =1   * @note        This function is implemented as a macro.
 677      =1   ******************************************************************************/
 678      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_Ep0ClearSentStall(void);
           =1 #else
 681      =1  #define USB_Ep0ClearSentStall() USB_WRITE_BYTE(E0CSR, 0)
 682      =1  #endif
 683      =1  
 684      =1  /***************************************************************************//**
 685      =1   * @brief       Sets InPacketReady on Endpoint 0
 686      =1   * @note        This function is implemented as a macro.
 687      =1   ******************************************************************************/
 688      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_Ep0SetInPacketReady(void);
           =1 #else
 691      =1  #define USB_Ep0SetInPacketReady() USB_WRITE_BYTE(E0CSR, E0CSR_INPRDY__SET)
 692      =1  #endif
 693      =1  
 694      =1  /***************************************************************************//**
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 96  

 695      =1   * @brief       Returns state of USB Start-of-Frame Interrupt
 696      =1   * @param       CMINT_snapshot
 697      =1   *              Snapshot of the CMINT register taken previously with the
 698      =1   *              @ref USB_GetCommonInts() function.
 699      =1   * @return      TRUE if Start-of-Frame Interrupt is active, FALSE otherwise.
 700      =1   * @note        This function is implemented as a macro.
 701      =1   ******************************************************************************/
 702      =1  #ifdef IS_DOXYGEN
           =1 extern bool USB_IsSofIntActive(uint8_t CMINT_snapshot);
           =1 #else
 705      =1  #define USB_IsSofIntActive(CMINT_snapshot) ((CMINT_snapshot) & CMINT_SOF__SET)
 706      =1  #endif
 707      =1  
 708      =1  /***************************************************************************//**
 709      =1   * @brief       Returns state of USB Reset Interrupt
 710      =1   * @param       CMINT_snapshot
 711      =1   *              Snapshot of the CMINT register taken previously with the
 712      =1   *              @ref USB_GetCommonInts() function.
 713      =1   * @return      TRUE if USB Reset Interrupt is active, FALSE otherwise.
 714      =1   * @note        This function is implemented as a macro.
 715      =1   ******************************************************************************/
 716      =1  #ifdef IS_DOXYGEN
           =1 extern bool USB_IsResetIntActive(uint8_t CMINT_snapshot);
           =1 #else
 719      =1  #define USB_IsResetIntActive(CMINT_snapshot) \
 720      =1    ((CMINT_snapshot) & CMINT_RSTINT__SET)
 721      =1  #endif
 722      =1  
 723      =1  /***************************************************************************//**
 724      =1   * @brief       Returns state of USB Resume Interrupt
 725      =1   * @param       CMINT_snapshot
 726      =1   *              Snapshot of the CMINT register taken previously with the
 727      =1   *              @ref USB_GetCommonInts() function.
 728      =1   * @return      TRUE if USB Resume Interrupt is active, FALSE otherwise.
 729      =1   * @note        This function is implemented as a macro.
 730      =1   ******************************************************************************/
 731      =1  #ifdef IS_DOXYGEN
           =1 extern bool USB_IsResumeIntActive(uint8_t CMINT_snapshot);
           =1 #else
 734      =1  #define USB_IsResumeIntActive(CMINT_snapshot) \
 735      =1    ((CMINT_snapshot) & CMINT_RSUINT__SET)
 736      =1  #endif
 737      =1  
 738      =1  /***************************************************************************//**
 739      =1   * @brief       Returns state of USB Suspend Interrupt
 740      =1   * @param       CMINT_snapshot
 741      =1   *              Snapshot of the CMINT register taken previously with the
 742      =1   *              @ref USB_GetCommonInts() function.
 743      =1   * @return      TRUE if USB Suspend Interrupt is active, FALSE otherwise.
 744      =1   * @note        This function is implemented as a macro.
 745      =1   ******************************************************************************/
 746      =1  #ifdef IS_DOXYGEN
           =1 extern bool USB_IsSuspendIntActive(uint8_t CMINT_snapshot);
           =1 #else
 749      =1  #define USB_IsSuspendIntActive(CMINT_snapshot) \
 750      =1    ((CMINT_snapshot) & CMINT_SUSINT__SET)
 751      =1  #endif
 752      =1  
 753      =1  /***************************************************************************//**
 754      =1   * @brief       Returns state of USB Endpoint 0 Interrupt
 755      =1   * @param       IN1INT_snapshot
 756      =1   *              Snapshot of the IN1INT register taken previously with the
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 97  

 757      =1   *              @ref USB_GetInInts() function.
 758      =1   * @return      TRUE if USB Endpoint 0 Interrupt is active, FALSE otherwise.
 759      =1   * @note        This function is implemented as a macro.
 760      =1   ******************************************************************************/
 761      =1  #ifdef IS_DOXYGEN
           =1 extern bool USB_IsEp0IntActive(uint8_t IN1INT_snapshot);
           =1 #else
 764      =1  #define USB_IsEp0IntActive(IN1INT_snapshot) \
 765      =1    ((IN1INT_snapshot) & IN1INT_EP0__SET)
 766      =1  #endif
 767      =1  
 768      =1  /***************************************************************************//**
 769      =1   * @brief       Returns 1 if any USB IN Interrupt is active
 770      =1   * @param       IN1INT_snapshot
 771      =1   *              Snapshot of the IN1INT register taken previously with the
 772      =1   *              @ref USB_GetInInts() function.
 773      =1   * @return      TRUE if any USB IN Interrupt is active, FALSE otherwise.
 774      =1   * @note        This function is implemented as a macro.
 775      =1   ******************************************************************************/
 776      =1  #ifdef IS_DOXYGEN
           =1 extern bool USB_IsInIntActive(uint8_t IN1INT_snapshot);
           =1 #else
 779      =1  #define USB_IsInIntActive(IN1INT_snapshot) \
 780      =1    ((IN1INT_snapshot) & (IN1INT_IN1__SET | IN1INT_IN2__SET | IN1INT_IN3__SET))
 781      =1  #endif
 782      =1  
 783      =1  /***************************************************************************//**
 784      =1   * @brief       Returns state of USB Endpoint 1 IN Interrupt
 785      =1   * @param       IN1INT_snapshot
 786      =1   *              Snapshot of the IN1INT register taken previously with the
 787      =1   *              @ref USB_GetInInts() function.
 788      =1   * @return      TRUE if USB Endpoint 1 IN Interrupt is active, FALSE otherwise.
 789      =1   * @note        This function is implemented as a macro.
 790      =1   ******************************************************************************/
 791      =1  #ifdef IS_DOXYGEN
           =1 extern bool USB_IsIn1IntActive(uint8_t IN1INT_snapshot);
           =1 #else
 794      =1  #define USB_IsIn1IntActive(IN1INT_snapshot) \
 795      =1    ((IN1INT_snapshot) & IN1INT_IN1__SET)
 796      =1  #endif
 797      =1  
 798      =1  /***************************************************************************//**
 799      =1   * @brief       Returns state of USB Endpoint 2 IN Interrupt
 800      =1   * @param       IN1INT_snapshot
 801      =1   *              Snapshot of the IN1INT register taken previously with the
 802      =1   *              @ref USB_GetInInts() function.
 803      =1   * @return      TRUE if USB Endpoint 2 IN Interrupt is active, FALSE otherwise.
 804      =1   * @note        This function is implemented as a macro.
 805      =1   ******************************************************************************/
 806      =1  #ifdef IS_DOXYGEN
           =1 extern bool USB_IsIn2IntActive(uint8_t IN1INT_snapshot);
           =1 #else
 809      =1  #define USB_IsIn2IntActive(IN1INT_snapshot) \
 810      =1    ((IN1INT_snapshot) & IN1INT_IN2__SET)
 811      =1  #endif
 812      =1  
 813      =1  /***************************************************************************//**
 814      =1   * @brief       Returns state of USB Endpoint 3 IN Interrupt
 815      =1   * @param       IN1INT_snapshot
 816      =1   *              Snapshot of the IN1INT register taken previously with the
 817      =1   *              @ref USB_GetInInts() function.
 818      =1   * @return      TRUE if USB Endpoint 3 IN Interrupt is active, FALSE otherwise.
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 98  

 819      =1   * @note        This function is implemented as a macro.
 820      =1   ******************************************************************************/
 821      =1  #ifdef IS_DOXYGEN
           =1 extern bool USB_IsIn3IntActive(uint8_t IN1INT_snapshot);
           =1 #else
 824      =1  #define USB_IsIn3IntActive(IN1INT_snapshot) \
 825      =1    ((IN1INT_snapshot) & IN1INT_IN3__SET)
 826      =1  #endif
 827      =1  
 828      =1  /***************************************************************************//**
 829      =1   * @brief       Returns 1 if any USB Endpoint OUT Interrupt is active
 830      =1   * @param       OUT1INT_snapshot
 831      =1   *              Snapshot of the OUT1INT register taken previously with the
 832      =1   *              @ref USB_GetOutInts() function.
 833      =1   * @return      TRUE if any USB OUT Interrupt is active, FALSE otherwise.
 834      =1   * @note        This function is implemented as a macro.
 835      =1   ******************************************************************************/
 836      =1  #ifdef IS_DOXYGEN
           =1 extern bool USB_IsOutIntActive(uint8_t OUT1INT_snapshot);
           =1 #else
 839      =1  #define USB_IsOutIntActive(OUT1INT_snapshot) \
 840      =1    ((OUT1INT_snapshot) \
 841      =1       & (OUT1INT_OUT1__SET | OUT1INT_OUT2__SET | OUT1INT_OUT3__SET))
 842      =1  #endif
 843      =1  
 844      =1  /***************************************************************************//**
 845      =1   * @brief       Returns state of USB Endpoint 1 OUT Interrupt
 846      =1   * @param       OUT1INT_snapshot
 847      =1   *              Snapshot of the OUT1INT register taken previously with the
 848      =1   *              @ref USB_GetOutInts() function.
 849      =1   * @return      TRUE if USB Endpoint 1 OUT Interrupt is active,
 850      =1   *              FALSE otherwise.
 851      =1   * @note        This function is implemented as a macro.
 852      =1   ******************************************************************************/
 853      =1  #ifdef IS_DOXYGEN
           =1 extern bool USB_IsOut1IntActive(uint8_t OUT1INT_snapshot);
           =1 #else
 856      =1  #define USB_IsOut1IntActive(OUT1INT_snapshot) \
 857      =1    ((OUT1INT_snapshot) & OUT1INT_OUT1__SET)
 858      =1  #endif
 859      =1  
 860      =1  /***************************************************************************//**
 861      =1   * @brief       Returns state of USB Endpoint 2 OUT Interrupt
 862      =1   * @param       OUT1INT_snapshot
 863      =1   *              Snapshot of the OUT1INT register taken previously with the
 864      =1   *              @ref USB_GetOutInts() function.
 865      =1   * @return      TRUE if USB Endpoint 2 OUT Interrupt is active,
 866      =1   *              FALSE otherwise.
 867      =1   * @note        This function is implemented as a macro.
 868      =1   ******************************************************************************/
 869      =1  #ifdef IS_DOXYGEN
           =1 extern bool USB_IsOut2IntActive(uint8_t OUT1INT_snapshot);
           =1 #else
 872      =1  #define USB_IsOut2IntActive(OUT1INT_snapshot) \
 873      =1    ((OUT1INT_snapshot) & OUT1INT_OUT2__SET)
 874      =1  #endif
 875      =1  
 876      =1  /***************************************************************************//**
 877      =1   * @brief       Returns state of USB Endpoint 3 OUT Interrupt
 878      =1   * @param       OUT1INT_snapshot
 879      =1   *              Snapshot of the OUT1INT register taken previously with the
 880      =1   *              @ref USB_GetOutInts() function.
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 99  

 881      =1   * @return      TRUE if USB Endpoint 3 OUT Interrupt is active,
 882      =1   *              FALSE otherwise.
 883      =1   * @note        This function is implemented as a macro.
 884      =1   ******************************************************************************/
 885      =1  #ifdef IS_DOXYGEN
           =1 extern bool USB_IsOut3IntActive(uint8_t OUT1INT_snapshot);
           =1 #else
 888      =1  #define USB_IsOut3IntActive(OUT1INT_snapshot) \
 889      =1    ((OUT1INT_snapshot) & OUT1INT_OUT3__SET)
 890      =1  #endif
 891      =1  
 892      =1  /***************************************************************************//**
 893      =1   * @brief       Sets the suspend interrupt flag to active
 894      =1   * @param       CMINT_snapshot
 895      =1   *              Snapshot of the CMINT register taken previously with the
 896      =1   *              @ref USB_GetCommonInts() function.
 897      =1   * @note        This function is implemented as a macro.
 898      =1   ******************************************************************************/
 899      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SetSuspendIntActive(uint8_t CMINT_snapshot);
           =1 #else
 902      =1  #define USB_SetSuspendIntActive(CMINT_snapshot) \
 903      =1    (CMINT_snapshot |= CMINT_SUSINT__SET)
 904      =1  #endif
 905      =1  
 906      =1  /***************************************************************************//**
 907      =1   * @brief       Sets the EP0 interrupt flag to active
 908      =1   * @param       IN1INT_snapshot
 909      =1   *              Snapshot of the IN1INT register taken previously with the
 910      =1   *              @ref USB_GetInInts() function.
 911      =1   * @note        This function is implemented as a macro.
 912      =1   ******************************************************************************/
 913      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SetEp0IntActive(uint8_t IN1INT_snapshot);
           =1 #else
 916      =1  #define USB_SetEp0IntActive(IN1INT_snapshot) \
 917      =1    (IN1INT_snapshot |= IN1INT_EP0__SET)
 918      =1  #endif
 919      =1  
 920      =1  /***************************************************************************//**
 921      =1   * @brief       Sets the IN 1 interrupt flag to active
 922      =1   * @param       IN1INT_snapshot
 923      =1   *              Snapshot of the IN1INT register taken previously with the
 924      =1   *              @ref USB_GetInInts() function.
 925      =1   * @note        This function is implemented as a macro.
 926      =1   ******************************************************************************/
 927      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SetIn1IntActive(uint8_t IN1INT_snapshot);
           =1 #else
 930      =1  #define USB_SetIn1IntActive(IN1INT_snapshot) \
 931      =1    (IN1INT_snapshot |= IN1INT_IN1__SET)
 932      =1  #endif
 933      =1  
 934      =1  /***************************************************************************//**
 935      =1   * @brief       Sets the IN 12interrupt flag to active
 936      =1   * @param       IN1INT_snapshot
 937      =1   *              Snapshot of the IN1INT register taken previously with the
 938      =1   *              @ref USB_GetInInts() function.
 939      =1   * @note        This function is implemented as a macro.
 940      =1   ******************************************************************************/
 941      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SetIn2IntActive(uint8_t IN1INT_snapshot);
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 100 

           =1 #else
 944      =1  #define USB_SetIn2IntActive(IN1INT_snapshot) \
 945      =1    (IN1INT_snapshot |= IN1INT_IN2__SET)
 946      =1  #endif
 947      =1  
 948      =1  /***************************************************************************//**
 949      =1   * @brief       Sets the IN 3 interrupt flag to active
 950      =1   * @param       IN1INT_snapshot
 951      =1   *              Snapshot of the IN1INT register taken previously with the
 952      =1   *              @ref USB_GetInInts() function.
 953      =1   * @note        This function is implemented as a macro.
 954      =1   ******************************************************************************/
 955      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SetIn3IntActive(uint8_t IN1INT_snapshot);
           =1 #else
 958      =1  #define USB_SetIn3IntActive(IN1INT_snapshot) \
 959      =1    (IN1INT_snapshot |= IN1INT_IN3__SET)
 960      =1  #endif
 961      =1  
 962      =1  /***************************************************************************//**
 963      =1   * @brief       Sets the OUT 1 interrupt flag to active
 964      =1   * @param       OUT1INT_snapshot
 965      =1   *              Snapshot of the OUT1INT register taken previously with the
 966      =1   *              @ref USB_GetOutInts() function.
 967      =1   * @note        This function is implemented as a macro.
 968      =1   ******************************************************************************/
 969      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SetOut1IntActive(uint8_t OUT1INT_snapshot);
           =1 #else
 972      =1  #define USB_SetOut1IntActive(OUT1INT_snapshot) \
 973      =1    (OUT1INT_snapshot |= OUT1INT_OUT1__SET)
 974      =1  #endif
 975      =1  
 976      =1  /***************************************************************************//**
 977      =1   * @brief       Sets the OUT 2 interrupt flag to active
 978      =1   * @param       OUT1INT_snapshot
 979      =1   *              Snapshot of the OUT1INT register taken previously with the
 980      =1   *              @ref USB_GetOutInts() function.
 981      =1   * @note        This function is implemented as a macro.
 982      =1   ******************************************************************************/
 983      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SetOut2IntActive(uint8_t OUT1INT_snapshot);
           =1 #else
 986      =1  #define USB_SetOut2IntActive(OUT1INT_snapshot) \
 987      =1    (OUT1INT_snapshot |= OUT1INT_OUT2__SET)
 988      =1  #endif
 989      =1  
 990      =1  /***************************************************************************//**
 991      =1   * @brief       Sets the OUT 3 interrupt flag to active
 992      =1   * @param       OUT1INT_snapshot
 993      =1   *              Snapshot of the OUT1INT register taken previously with the
 994      =1   *              @ref USB_GetOutInts() function.
 995      =1   * @note        This function is implemented as a macro.
 996      =1   ******************************************************************************/
 997      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SetOut3IntActive(uint8_t OUT1INT_snapshot);
           =1 #else
1000      =1  #define USB_SetOut3IntActive(OUT1INT_snapshot) \
1001      =1    (OUT1INT_snapshot |= OUT1INT_OUT3__SET)
1002      =1  #endif
1003      =1  
1004      =1  /***************************************************************************//**
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 101 

1005      =1   * @brief       Enables USB Start-of-Frame, Reset, Resume, and
1006      =1   *              Suspend Interrupts
1007      =1   * @note        This function is implemented as a macro.
1008      =1   ******************************************************************************/
1009      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableDeviceInts(void);
           =1 #else
1012      =1  #define USB_EnableDeviceInts() \
1013      =1    USB_WRITE_BYTE(CMIE, \
1014      =1                    (CMIE_SOFE__ENABLED \
1015      =1                     | CMIE_RSTINTE__ENABLED \
1016      =1                     | CMIE_RSUINTE__ENABLED \
1017      =1                     | CMIE_SUSINTE__ENABLED));
1018      =1  #endif
1019      =1  
1020      =1  /***************************************************************************//**
1021      =1   * @brief       Enables USB Start-of-Frame Interrupts
1022      =1   * @note        This function is implemented as a macro.
1023      =1   ******************************************************************************/
1024      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableSofInt(void);
           =1 #else
1027      =1  #define USB_EnableSofInt() USB_SET_BITS(CMIE, CMIE_SOFE__ENABLED);
1028      =1  #endif
1029      =1  
1030      =1  /***************************************************************************//**
1031      =1   * @brief       Disables USB Start-of-Frame Interrupts
1032      =1   * @note        This function is implemented as a macro.
1033      =1   ******************************************************************************/
1034      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableSofInt(void);
           =1 #else
1037      =1  #define USB_DisableSofInt() USB_CLEAR_BITS(CMIE, CMIE_SOFE__ENABLED);
1038      =1  #endif
1039      =1  
1040      =1  /***************************************************************************//**
1041      =1   * @brief       Enables USB Reset Interrupts
1042      =1   * @note        This function is implemented as a macro.
1043      =1   ******************************************************************************/
1044      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableResetInt(void);
           =1 #else
1047      =1  #define USB_EnableResetInt() USB_SET_BITS(CMIE, CMIE_RSTINTE__ENABLED);
1048      =1  #endif
1049      =1  
1050      =1  /***************************************************************************//**
1051      =1   * @brief       Disables USB Reset Interrupts
1052      =1   * @note        This function is implemented as a macro.
1053      =1   ******************************************************************************/
1054      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableResetInt(void);
           =1 #else
1057      =1  #define USB_DisableResetInt() USB_CLEAR_BITS(CMIE, CMIE_RSTINTE__ENABLED);
1058      =1  #endif
1059      =1  
1060      =1  /***************************************************************************//**
1061      =1   * @brief       Enables USB Resume Interrupts
1062      =1   * @note        This function is implemented as a macro.
1063      =1   ******************************************************************************/
1064      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableResumeInt(void);
           =1 #else
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 102 

1067      =1  #define USB_EnableResumeInt() USB_SET_BITS(CMIE, CMIE_RSUINTE__ENABLED);
1068      =1  #endif
1069      =1  
1070      =1  /***************************************************************************//**
1071      =1   * @brief       Disables USB Resume Interrupts
1072      =1   * @note        This function is implemented as a macro.
1073      =1   ******************************************************************************/
1074      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableResumeInt(void);
           =1 #else
1077      =1  #define USB_DisableResumeInt() USB_CLEAR_BITS(CMIE, CMIE_RSUINTE__ENABLED);
1078      =1  #endif
1079      =1  
1080      =1  /***************************************************************************//**
1081      =1   * @brief       Enables USB Suspend Interrupts
1082      =1   * @note        This function is implemented as a macro.
1083      =1   ******************************************************************************/
1084      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableSuspendInt(void);
           =1 #else
1087      =1  #define USB_EnableSuspendInt() USB_SET_BITS(CMIE, CMIE_SUSINTE__ENABLED);
1088      =1  #endif
1089      =1  
1090      =1  /***************************************************************************//**
1091      =1   * @brief       Disables USB Suspend Interrupts
1092      =1   * @note        This function is implemented as a macro.
1093      =1   ******************************************************************************/
1094      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableSuspendInt(void);
           =1 #else
1097      =1  #define USB_DisableSuspendInt() USB_CLEAR_BITS(CMIE, CMIE_SUSINTE__ENABLED);
1098      =1  #endif
1099      =1  
1100      =1  /***************************************************************************//**
1101      =1   * @brief       Enables USB Endpoint 0 Interrupts
1102      =1   * @note        This function is implemented as a macro.
1103      =1   ******************************************************************************/
1104      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableEp0Int(void);
           =1 #else
1107      =1  #define USB_EnableEp0Int() USB_SET_BITS(IN1IE, IN1IE_EP0E__ENABLED);
1108      =1  #endif
1109      =1  
1110      =1  /***************************************************************************//**
1111      =1   * @brief       Disables USB Endpoint 0 Interrupts
1112      =1   * @note        This function is implemented as a macro.
1113      =1   ******************************************************************************/
1114      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableEp0Int(void);
           =1 #else
1117      =1  #define USB_DisableEp0Int() USB_CLEAR_BITS(IN1IE, IN1IE_EP0E__ENABLED);
1118      =1  #endif
1119      =1  
1120      =1  /***************************************************************************//**
1121      =1   * @brief       Enables USB Endpoint 1 IN Interrupts
1122      =1   * @note        This function is implemented as a macro.
1123      =1   ******************************************************************************/
1124      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableIn1Int(void);
           =1 #else
1127      =1  #define USB_EnableIn1Int() USB_SET_BITS(IN1IE, IN1IE_IN1E__ENABLED);
1128      =1  #endif
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 103 

1129      =1  
1130      =1  /***************************************************************************//**
1131      =1   * @brief       Disables USB Endpoint 1 IN Interrupts
1132      =1   * @note        This function is implemented as a macro.
1133      =1   ******************************************************************************/
1134      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableIn1Int(void);
           =1 #else
1137      =1  #define USB_DisableIn1Int() USB_CLEAR_BITS(IN1IE, IN1IE_IN1E__ENABLED);
1138      =1  #endif
1139      =1  
1140      =1  /***************************************************************************//**
1141      =1   * @brief       Enables USB Endpoint 2 IN Interrupts
1142      =1   * @note        This function is implemented as a macro.
1143      =1   ******************************************************************************/
1144      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableIn2Int(void);
           =1 #else
1147      =1  #define USB_EnableIn2Int() USB_SET_BITS(IN1IE, IN1IE_IN2E__ENABLED);
1148      =1  #endif
1149      =1  
1150      =1  /***************************************************************************//**
1151      =1   * @brief       Disables USB Endpoint 2 IN Interrupts
1152      =1   * @note        This function is implemented as a macro.
1153      =1   ******************************************************************************/
1154      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableIn2Int(void);
           =1 #else
1157      =1  #define USB_DisableIn2Int() USB_CLEAR_BITS(IN1IE, IN1IE_IN2E__ENABLED);
1158      =1  #endif
1159      =1  
1160      =1  /***************************************************************************//**
1161      =1   * @brief       Enables USB Endpoint 3 IN Interrupts
1162      =1   * @note        This function is implemented as a macro.
1163      =1   ******************************************************************************/
1164      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableIn3Int(void);
           =1 #else
1167      =1  #define USB_EnableIn3Int() USB_SET_BITS(IN1IE, IN1IE_IN3E__ENABLED);
1168      =1  #endif
1169      =1  
1170      =1  /***************************************************************************//**
1171      =1   * @brief       Disables USB Endpoint 3 IN Interrupts
1172      =1   * @note        This function is implemented as a macro.
1173      =1   ******************************************************************************/
1174      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableIn3Int(void);
           =1 #else
1177      =1  #define USB_DisableIn3Int() USB_CLEAR_BITS(IN1IE, IN1IE_IN3E__ENABLED);
1178      =1  #endif
1179      =1  
1180      =1  /***************************************************************************//**
1181      =1   * @brief       Enables USB Endpoint 1 OUT Interrupts
1182      =1   * @note        This function is implemented as a macro.
1183      =1   ******************************************************************************/
1184      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableOut1Int(void);
           =1 #else
1187      =1  #define USB_EnableOut1Int() USB_SET_BITS(OUT1IE, OUT1IE_OUT1E__ENABLED);
1188      =1  #endif
1189      =1  
1190      =1  /***************************************************************************//**
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 104 

1191      =1   * @brief       Disables USB Endpoint 1 OUT Interrupts
1192      =1   * @note        This function is implemented as a macro.
1193      =1   ******************************************************************************/
1194      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableOut1Int(void);
           =1 #else
1197      =1  #define USB_DisableOut1Int() USB_CLEAR_BITS(OUT1IE, OUT1IE_OUT1E__ENABLED);
1198      =1  #endif
1199      =1  
1200      =1  /***************************************************************************//**
1201      =1   * @brief       Enables USB Endpoint 2 OUT Interrupts
1202      =1   * @note        This function is implemented as a macro.
1203      =1   ******************************************************************************/
1204      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableOut2Int(void);
           =1 #else
1207      =1  #define USB_EnableOut2Int() USB_SET_BITS(OUT1IE, OUT1IE_OUT2E__ENABLED);
1208      =1  #endif
1209      =1  
1210      =1  /***************************************************************************//**
1211      =1   * @brief       Disables USB Endpoint 2 OUT Interrupts
1212      =1   * @note        This function is implemented as a macro.
1213      =1   ******************************************************************************/
1214      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableOut2Int(void);
           =1 #else
1217      =1  #define USB_DisableOut2Int() USB_CLEAR_BITS(OUT1IE, OUT1IE_OUT2E__ENABLED);
1218      =1  #endif
1219      =1  
1220      =1  /***************************************************************************//**
1221      =1   * @brief       Enables USB Endpoint 3 OUT Interrupts
1222      =1   * @note        This function is implemented as a macro.
1223      =1   ******************************************************************************/
1224      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableOut3Int(void);
           =1 #else
1227      =1  #define USB_EnableOut3Int() USB_SET_BITS(OUT1IE, OUT1IE_OUT3E__ENABLED);
1228      =1  #endif
1229      =1  
1230      =1  /***************************************************************************//**
1231      =1   * @brief       Disables USB Endpoint 3 OUT Interrupts
1232      =1   * @note        This function is implemented as a macro.
1233      =1   ******************************************************************************/
1234      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableOut3Int(void);
           =1 #else
1237      =1  #define USB_DisableOut3Int() USB_CLEAR_BITS(OUT1IE, OUT1IE_OUT3E__ENABLED);
1238      =1  #endif
1239      =1  
1240      =1  /***************************************************************************//**
1241      =1   * @brief       Enables USB Endpoint 1
1242      =1   * @note        This function is implemented as a macro.
1243      =1   ******************************************************************************/
1244      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableEp1(void);
           =1 #else
1247      =1  #define USB_EnableEp1() USB_SET_BITS(EENABLE, EENABLE_EEN1__ENABLED);
1248      =1  #endif
1249      =1  
1250      =1  /***************************************************************************//**
1251      =1   * @brief       Disables USB Endpoint 1
1252      =1   * @note        This function is implemented as a macro.
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 105 

1253      =1   ******************************************************************************/
1254      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableEp1(void);
           =1 #else
1257      =1  #define USB_DisableEp1() USB_CLEAR_BITS(EENABLE, EENABLE_EEN1__ENABLED);
1258      =1  #endif
1259      =1  
1260      =1  /***************************************************************************//**
1261      =1   * @brief       Enables USB Endpoint 2
1262      =1   * @note        This function is implemented as a macro.
1263      =1   ******************************************************************************/
1264      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableEp2(void);
           =1 #else
1267      =1  #define USB_EnableEp2() USB_SET_BITS(EENABLE, EENABLE_EEN2__ENABLED);
1268      =1  #endif
1269      =1  
1270      =1  /***************************************************************************//**
1271      =1   * @brief       Disables USB Endpoint 2
1272      =1   * @note        This function is implemented as a macro.
1273      =1   ******************************************************************************/
1274      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableEp2(void);
           =1 #else
1277      =1  #define USB_DisableEp2() USB_CLEAR_BITS(EENABLE, EENABLE_EEN2__ENABLED);
1278      =1  #endif
1279      =1  
1280      =1  /***************************************************************************//**
1281      =1   * @brief       Enables USB Endpoint 3
1282      =1   * @note        This function is implemented as a macro.
1283      =1   ******************************************************************************/
1284      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableEp3(void);
           =1 #else
1287      =1  #define USB_EnableEp3() USB_SET_BITS(EENABLE, EENABLE_EEN3__ENABLED);
1288      =1  #endif
1289      =1  
1290      =1  /***************************************************************************//**
1291      =1   * @brief       Disables USB Endpoint 3
1292      =1   * @note        This function is implemented as a macro.
1293      =1   ******************************************************************************/
1294      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableEp3(void);
           =1 #else
1297      =1  #define USB_DisableEp3() USB_CLEAR_BITS(EENABLE, EENABLE_EEN3__ENABLED);
1298      =1  #endif
1299      =1  
1300      =1  /***************************************************************************//**
1301      =1   * @brief       Configures Endpoint N for OUT
1302      =1   * @note        This function is implemented as a macro.
1303      =1   ******************************************************************************/
1304      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnDirectionOut(void);
           =1 #else
1307      =1  #define USB_EpnDirectionOut() USB_CLEAR_BITS(EINCSRH, EINCSRH_DIRSEL__IN);
1308      =1  #endif
1309      =1  
1310      =1  /***************************************************************************//**
1311      =1   * @brief       Configures Endpoint N for IN
1312      =1   * @note        This function is implemented as a macro.
1313      =1   ******************************************************************************/
1314      =1  #ifdef IS_DOXYGEN
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 106 

           =1 extern void USB_EpnDirectionIn(void);
           =1 #else
1317      =1  #define USB_EpnDirectionIn() USB_SET_BITS(EINCSRH, EINCSRH_DIRSEL__IN);
1318      =1  #endif
1319      =1  
1320      =1  /***************************************************************************//**
1321      =1   * @brief       Enables split mode on Endpoint N
1322      =1   * @note        This function is implemented as a macro.
1323      =1   ******************************************************************************/
1324      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnEnableSplitMode(void);
           =1 #else
1327      =1  #define USB_EpnEnableSplitMode() \
1328      =1      USB_SET_BITS(EINCSRH, EINCSRH_SPLIT__ENABLED);
1329      =1  #endif
1330      =1  
1331      =1  /***************************************************************************//**
1332      =1   * @brief       Disables split mode Endpoint N
1333      =1   * @note        This function is implemented as a macro.
1334      =1   ******************************************************************************/
1335      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnDisableSplitMode(void);
           =1 #else
1338      =1  #define USB_EpnDisableSplitMode() \
1339      =1      USB_CLEAR_BITS(EINCSRH, EINCSRH_SPLIT__ENABLED);
1340      =1  #endif
1341      =1  
1342      =1  /***************************************************************************//**
1343      =1   * @brief       Resets the IN endpoint data toggle to '0'
1344      =1   * @note        This function is implemented as a macro.
1345      =1   ******************************************************************************/
1346      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnInClearDataToggle(void);
           =1 #else
1349      =1  #define USB_EpnInClearDataToggle() USB_SET_BITS(EINCSRL, EINCSRL_CLRDT__BMASK);
1350      =1  #endif
1351      =1  
1352      =1  /***************************************************************************//**
1353      =1   * @brief       Clears sent stall condition on Endpoint N IN
1354      =1   * @note        This function is implemented as a macro.
1355      =1   ******************************************************************************/
1356      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnInClearSentStall(void);
           =1 #else
1359      =1  #define USB_EpnInClearSentStall() USB_WRITE_BYTE(EINCSRL, 0);
1360      =1  #endif
1361      =1  
1362      =1  /***************************************************************************//**
1363      =1   * @brief       Sends a stall for each IN token on Endpoint N
1364      =1   * @note        This function is implemented as a macro.
1365      =1   ******************************************************************************/
1366      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnInStall(void);
           =1 #else
1369      =1  #define USB_EpnInStall() USB_WRITE_BYTE(EINCSRL, EINCSRL_SDSTL__SET);
1370      =1  #endif
1371      =1  
1372      =1  /***************************************************************************//**
1373      =1   * @brief       Stops stalling for each IN token on Endpoint N
1374      =1   * @note        This function is implemented as a macro.
1375      =1   ******************************************************************************/
1376      =1  #ifdef IS_DOXYGEN
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 107 

           =1 extern void USB_EpnInEndStall(void);
           =1 #else
1379      =1  #define USB_EpnInEndStall() USB_WRITE_BYTE(EINCSRL, 0);
1380      =1  #endif
1381      =1  
1382      =1  /***************************************************************************//**
1383      =1   * @brief       Stops stalling for each IN token on Endpoint N and clears
1384      =1   *              the data toggle
1385      =1   * @note        This function is implemented as a macro.
1386      =1   ******************************************************************************/
1387      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnInEndStallAndClearDataToggle(void);
           =1 #else
1390      =1  #define USB_EpnInEndStallAndClearDataToggle() \
1391      =1      USB_WRITE_BYTE(EINCSRL, EINCSRL_CLRDT__BMASK);
1392      =1  #endif
1393      =1  
1394      =1  /***************************************************************************//**
1395      =1   * @brief       Flushes In Endpoint N
1396      =1   * @note        This function is implemented as a macro.
1397      =1   ******************************************************************************/
1398      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnInFlush(void);
           =1 #else
1401      =1  #define USB_EpnInFlush() \
1402      =1    do \
1403      =1    { \
1404      =1      USB_WRITE_BYTE(EINCSRL, EINCSRL_FLUSH__SET); \
1405      =1      do \
1406      =1      { \
1407      =1        USB_READ_BYTE(EINCSRL); \
1408      =1      } while (USB0DAT & EINCSRL_FLUSH__SET); \
1409      =1    } while (0);
1410      =1  #endif
1411      =1  
1412      =1  /***************************************************************************//**
1413      =1   * @brief       Clears underrun condition on In Endpoint N
1414      =1   * @note        This function is implemented as a macro.
1415      =1   ******************************************************************************/
1416      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnInClearUnderrun(void);
           =1 #else
1419      =1  #define USB_EpnInClearUnderrun() USB_CLEAR_BITS(EINCSRL, EINCSRL_UNDRUN__SET);
1420      =1  #endif
1421      =1  
1422      =1  /***************************************************************************//**
1423      =1   * @brief       Sets InPacketReady on In Endpoint N
1424      =1   * @note        This function is implemented as a macro.
1425      =1   ******************************************************************************/
1426      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnSetInPacketReady(void);
           =1 #else
1429      =1  #define USB_EpnSetInPacketReady() USB_SET_BITS(EINCSRL, EINCSRL_INPRDY__SET);
1430      =1  #endif
1431      =1  
1432      =1  /***************************************************************************//**
1433      =1   * @brief       Enables double buffering on In Endpoint N
1434      =1   * @note        This function is implemented as a macro.
1435      =1   ******************************************************************************/
1436      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnInEnableDoubleBuffer(void);
           =1 #else
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 108 

1439      =1  #define USB_EpnInEnableDoubleBuffer() \
1440      =1      USB_SET_BITS(EINCSRH, EINCSRH_DBIEN__ENABLED);
1441      =1  #endif
1442      =1  
1443      =1  /***************************************************************************//**
1444      =1   * @brief       Disables double buffering on In Endpoint N
1445      =1   * @note        This function is implemented as a macro.
1446      =1   ******************************************************************************/
1447      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnInDisableDoubleBuffer(void);
           =1 #else
1450      =1  #define USB_EpnInDisableDoubleBuffer() \
1451      =1      USB_CLEAR_BITS(EINCSRH, EINCSRH_DBIEN__ENABLED);
1452      =1  #endif
1453      =1  
1454      =1  /***************************************************************************//**
1455      =1   * @brief       Configures In Endpoint N for Interrupt/Bulk Mode
1456      =1   * @note        This function is implemented as a macro.
1457      =1   ******************************************************************************/
1458      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnInEnableInterruptBulkMode(void);
           =1 #else
1461      =1  #define USB_EpnInEnableInterruptBulkMode() \
1462      =1      USB_CLEAR_BITS(EINCSRH, EINCSRH_ISO__ENABLED);
1463      =1  #endif
1464      =1  
1465      =1  /***************************************************************************//**
1466      =1   * @brief       Configures In Endpoint N for Isochronous Mode
1467      =1   * @note        This function is implemented as a macro.
1468      =1   ******************************************************************************/
1469      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnInEnableIsochronousMode(void);
           =1 #else
1472      =1  #define USB_EpnInEnableIsochronousMode() \
1473      =1      USB_SET_BITS(EINCSRH, EINCSRH_ISO__ENABLED);
1474      =1  #endif
1475      =1  
1476      =1  /***************************************************************************//**
1477      =1   * @brief       Enables forced data toggle on In Endpoint N
1478      =1   * @note        This function is implemented as a macro.
1479      =1   ******************************************************************************/
1480      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnInEnableForcedDataToggle(void);
           =1 #else
1483      =1  #define USB_EpnInEnableForcedDataToggle() \
1484      =1      USB_SET_BITS(EINCSRH, EINCSRH_FCDT__ALWAYS_TOGGLE);
1485      =1  #endif
1486      =1  
1487      =1  /***************************************************************************//**
1488      =1   * @brief       Disables forced data toggle on In Endpoint N
1489      =1   * @note        This function is implemented as a macro.
1490      =1   ******************************************************************************/
1491      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnInDisableForcedDataToggle(void);
           =1 #else
1494      =1  #define USB_EpnInDisableForcedDataToggle() \
1495      =1      USB_CLEAR_BITS(EINCSRH, EINCSRH_FCDT__ALWAYS_TOGGLE);
1496      =1  #endif
1497      =1  
1498      =1  /***************************************************************************//**
1499      =1   * @brief       Resets the OUT endpoint data toggle to '0'
1500      =1   * @note        This function is implemented as a macro.
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 109 

1501      =1   ******************************************************************************/
1502      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnOutClearDataToggle(void);
           =1 #else
1505      =1  #define USB_EpnOutClearDataToggle() \
1506      =1      USB_SET_BITS(EOUTCSRL, EOUTCSRL_CLRDT__BMASK);
1507      =1  #endif
1508      =1  
1509      =1  /***************************************************************************//**
1510      =1   * @brief       Clears sent stall condition on Endpoint N OUT
1511      =1   * @note        This function is implemented as a macro.
1512      =1   ******************************************************************************/
1513      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnOutClearSentStall(void);
           =1 #else
1516      =1  #define USB_EpnOutClearSentStall() \
1517      =1      USB_CLEAR_BITS(EOUTCSRL, EOUTCSRL_STSTL__BMASK);
1518      =1  #endif
1519      =1  
1520      =1  /***************************************************************************//**
1521      =1   * @brief       Sends a stall for each OUT token on Endpoint N
1522      =1   * @note        This function is implemented as a macro.
1523      =1   ******************************************************************************/
1524      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnOutStall(void);
           =1 #else
1527      =1  #define USB_EpnOutStall() \
1528      =1      USB_SET_BITS(EOUTCSRL, EOUTCSRL_SDSTL__SET);
1529      =1  #endif
1530      =1  
1531      =1  /***************************************************************************//**
1532      =1   * @brief       Stops stalling for each OUT token on Endpoint N
1533      =1   * @note        This function is implemented as a macro.
1534      =1   ******************************************************************************/
1535      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnOutEndStall(void);
           =1 #else
1538      =1  #define USB_EpnOutEndStall() USB_CLEAR_BITS(EOUTCSRL, EOUTCSRL_SDSTL__SET);
1539      =1  #endif
1540      =1  
1541      =1  /***************************************************************************//**
1542      =1   * @brief       Stops stalling for each OUT token on Endpoint N and clears
1543      =1   *              the data toggle
1544      =1   * @note        This function is implemented as a macro.
1545      =1   ******************************************************************************/
1546      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnOutEndStallAndClearDataToggle(void);
           =1 #else
1549      =1  #define USB_EpnOutEndStallAndClearDataToggle() \
1550      =1    do \
1551      =1    { \
1552      =1      USB_READ_BYTE(EOUTCSRL); \
1553      =1      USB0DAT &= ~EOUTCSRL_SDSTL__SET; \
1554      =1      while (USB0ADR & USB0ADR_BUSY__SET) {} \
1555      =1      USB0DAT |= EOUTCSRL_CLRDT__BMASK; \
1556      =1      while (USB0ADR & USB0ADR_BUSY__SET) {} \
1557      =1    } while (0);
1558      =1  #endif
1559      =1  
1560      =1  /***************************************************************************//**
1561      =1   * @brief       Flushes OUT Endpoint N
1562      =1   * @note        This function is implemented as a macro.
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 110 

1563      =1   ******************************************************************************/
1564      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnOutFlush(void);
           =1 #else
1567      =1  #define USB_EpnOutFlush() \
1568      =1    do \
1569      =1    { \
1570      =1      USB_WRITE_BYTE(EOUTCSRL, EOUTCSRL_FLUSH__SET); \
1571      =1      do \
1572      =1      { \
1573      =1        USB_READ_BYTE(EOUTCSRL); \
1574      =1      } while (USB0DAT & EOUTCSRL_FLUSH__SET); \
1575      =1    } while (0);
1576      =1  #endif
1577      =1  
1578      =1  /***************************************************************************//**
1579      =1   * @brief       Clears overrun condition on OUT Endpoint N
1580      =1   * @note        This function is implemented as a macro.
1581      =1   ******************************************************************************/
1582      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnOutClearOverrun(void);
           =1 #else
1585      =1  #define USB_EpnOutClearOverrun() USB_CLEAR_BITS(EOUTCSRL, EOUTCSRL_OVRUN__SET);
1586      =1  #endif
1587      =1  
1588      =1  /***************************************************************************//**
1589      =1   * @brief       Clears OutPacketReady on  Endpoint N
1590      =1   * @note        This function is implemented as a macro.
1591      =1   ******************************************************************************/
1592      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnClearOutPacketReady(void);
           =1 #else
1595      =1  #define USB_EpnClearOutPacketReady() \
1596      =1      USB_CLEAR_BITS(EOUTCSRL, EOUTCSRL_OPRDY__SET);
1597      =1  #endif
1598      =1  
1599      =1  /***************************************************************************//**
1600      =1   * @brief       Enables double buffering on OUT Endpoint N
1601      =1   * @note        This function is implemented as a macro.
1602      =1   ******************************************************************************/
1603      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnOutEnableDoubleBuffer(void);
           =1 #else
1606      =1  #define USB_EpnOutEnableDoubleBuffer() \
1607      =1      USB_SET_BITS(EOUTCSRH, EOUTCSRH_DBIEN__ENABLED);
1608      =1  #endif
1609      =1  
1610      =1  /***************************************************************************//**
1611      =1   * @brief       Disables double buffering on OUT Endpoint N
1612      =1   * @note        This function is implemented as a macro.
1613      =1   ******************************************************************************/
1614      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnOutDisableDoubleBuffer(void);
           =1 #else
1617      =1  #define USB_EpnOutDisableDoubleBuffer() \
1618      =1      USB_CLEAR_BITS(EOUTCSRH, EOUTCSRH_DBIEN__ENABLED);
1619      =1  #endif
1620      =1  
1621      =1  /***************************************************************************//**
1622      =1   * @brief       Configures OUT Endpoint N for Interrupt/Bulk Mode
1623      =1   * @note        This function is implemented as a macro.
1624      =1   ******************************************************************************/
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 111 

1625      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnOutEnableInterruptBulkMode(void);
           =1 #else
1628      =1  #define USB_EpnOutEnableInterruptBulkMode() \
1629      =1      USB_CLEAR_BITS(EOUTCSRH, EOUTCSRH_ISO__ENABLED);
1630      =1  #endif
1631      =1  
1632      =1  /***************************************************************************//**
1633      =1   * @brief       Configures OUT Endpoint N for Isochronous Mode
1634      =1   * @note        This function is implemented as a macro.
1635      =1   ******************************************************************************/
1636      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EpnOutEnableIsochronousMode(void);
           =1 #else
1639      =1  #define USB_EpnOutEnableIsochronousMode() \
1640      =1      USB_SET_BITS(EOUTCSRH, EOUTCSRH_ISO__ENABLED);
1641      =1  #endif
1642      =1  
1643      =1  /***************************************************************************//**
1644      =1   * @brief       Enables FIFO read
1645      =1   * @param       fifoNum
1646      =1   *              FIFO to read
1647      =1   * @note        This function is implemented as a macro.
1648      =1   ******************************************************************************/
1649      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableReadFIFO(uint8_t fifoNum);
           =1 #else
1652      =1  #define USB_EnableReadFIFO(fifoNum) \
1653      =1    do \
1654      =1    { \
1655      =1      while (USB0ADR & USB0ADR_BUSY__SET) {} \
1656      =1      USB0ADR = (USB0ADR_BUSY__SET \
1657      =1                 | USB0ADR_AUTORD__ENABLED \
1658      =1                 | (FIFO0 | fifoNum)); \
1659      =1    } while (0)
1660      =1  #endif
1661      =1  
1662      =1  /***************************************************************************//**
1663      =1   * @brief       Disables FIFO read
1664      =1   * @param       fifoNum
1665      =1   *              FIFO that was read from
1666      =1   * @note        This function is implemented as a macro.
1667      =1   ******************************************************************************/
1668      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableReadFIFO(uint8_t fifoNum);
           =1 #else
1671      =1  #define USB_DisableReadFIFO(fifoNum)
1672      =1  #endif
1673      =1  
1674      =1  /***************************************************************************//**
1675      =1   * @brief       Reads a byte from the FIFO
1676      =1   * @param       readDat
1677      =1   *              Memory location to write the byte read from the FIFO
1678      =1   * @note        This function is implemented as a macro.
1679      =1   ******************************************************************************/
1680      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_GetFIFOByte(uint8_t * readDat);
           =1 #else
1683      =1  #define USB_GetFIFOByte(readDat) \
1684      =1    do \
1685      =1    { \
1686      =1      while (USB0ADR & USB0ADR_BUSY__SET) {} \
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 112 

1687      =1      readDat = USB0DAT; \
1688      =1    } while (0)
1689      =1  #endif
1690      =1  
1691      =1  /***************************************************************************//**
1692      =1   * @brief       Reads the last byte from the FIFO
1693      =1   * @details     The last read must be done with the AUTORD bit cleared.
1694      =1   *              This prevents the read from triggering another read
1695      =1   *              immediately thereafter.
1696      =1   * @param       readDat
1697      =1   *              Memory location to write the byte read from the FIFO
1698      =1   * @param       fifoNum
1699      =1   *              FIFO to read
1700      =1   * @note        This function is implemented as a macro.
1701      =1   ******************************************************************************/
1702      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_GetLastFIFOByte(uint8_t * readDat, uint8_t fifoNum);
           =1 #else
1705      =1  #define USB_GetLastFIFOByte(readDat, fifoNum) \
1706      =1    do \
1707      =1    { \
1708      =1      while (USB0ADR & USB0ADR_BUSY__SET) {} \
1709      =1      USB0ADR = (FIFO0 | fifoNum);\
1710      =1      readDat = USB0DAT; \
1711      =1    } while (0)
1712      =1  #endif
1713      =1  
1714      =1  /***************************************************************************//**
1715      =1   * @brief       Enables FIFO write
1716      =1   * @param       fifoNum
1717      =1   *              FIFO to write
1718      =1   * @note        This function is implemented as a macro.
1719      =1   ******************************************************************************/
1720      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_EnableWriteFIFO(uint8_t fifoNum);
           =1 #else
1723      =1  #define USB_EnableWriteFIFO(fifoNum) \
1724      =1    do \
1725      =1    { \
1726      =1      while (USB0ADR & USB0ADR_BUSY__SET) {} \
1727      =1      USB0ADR = (FIFO0 | fifoNum); \
1728      =1    } while (0)
1729      =1  #endif
1730      =1  
1731      =1  /***************************************************************************//**
1732      =1   * @brief       Disables FIFO write
1733      =1   * @param       fifoNum
1734      =1   *              FIFO that was written to
1735      =1   * @note        This function is implemented as a macro.
1736      =1   ******************************************************************************/
1737      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_DisableWriteFIFO(uint8_t fifoNum);
           =1 #else
1740      =1  #define USB_DisableWriteFIFO(fifoNum)
1741      =1  #endif
1742      =1  
1743      =1  /***************************************************************************//**
1744      =1   * @brief       Writes a byte to the FIFO
1745      =1   * @param       writeDat
1746      =1   *              Data to write to the FIFO
1747      =1   * @note        This function is implemented as a macro.
1748      =1   ******************************************************************************/
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 113 

1749      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SetFIFOByte(uint8_t writeDat);
           =1 #else
1752      =1  #define USB_SetFIFOByte(writeDat) \
1753      =1    do \
1754      =1    { \
1755      =1      while (USB0ADR & USB0ADR_BUSY__SET) {} \
1756      =1      USB0DAT = writeDat; \
1757      =1    } while (0)
1758      =1  #endif
1759      =1  
1760      =1  /***************************************************************************//**
1761      =1   * @brief       Saves the current SFR page
1762      =1   * @note        This function is implemented as a macro.
1763      =1   ******************************************************************************/
1764      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_SaveSfrPage();
           =1 #else
1767      =1  #define USB_SaveSfrPage()
1768      =1  #endif
1769      =1  
1770      =1  /***************************************************************************//**
1771      =1   * @brief       Restores the SFR page
1772      =1   * @note        @ref USB_SaveSfrPage() must be called before calling this macro
1773      =1   * @note        This function is implemented as a macro.
1774      =1   ******************************************************************************/
1775      =1  #ifdef IS_DOXYGEN
           =1 extern void USB_RestoreSfrPage();
           =1 #else
1778      =1  #define USB_RestoreSfrPage()
1779      =1  #endif
1780      =1  
1781      =1  // -------------------------------
1782      =1  // Function Prototypes
1783      =1  
1784      =1  /***************************************************************************//**
1785      =1   * @brief       Writes a value to INDEX
1786      =1   * @param       epsel
1787      =1   *              Endpoint index to target
1788      =1   ******************************************************************************/
1789      =1  void USB_SetIndex(uint8_t epsel);
1790      =1  
1791      =1  /***************************************************************************//**
1792      =1   * @brief       Reads the USB common interrupt register
1793      =1   * @return      Value of CMINT
1794      =1   ******************************************************************************/
1795      =1  uint8_t USB_GetCommonInts(void);
1796      =1  
1797      =1  /***************************************************************************//**
1798      =1   * @brief       Reads the USB in interrupt register
1799      =1   * @return      Value of IN1INT
1800      =1   ******************************************************************************/
1801      =1  uint8_t USB_GetInInts(void);
1802      =1  
1803      =1  /***************************************************************************//**
1804      =1   * @brief       Reads the out interrupt register
1805      =1   * @return      Value of OUT1INT
1806      =1   ******************************************************************************/
1807      =1  uint8_t USB_GetOutInts(void);
1808      =1  
1809      =1  /***************************************************************************//**
1810      =1   * @brief       Reads the value in INDEX
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 114 

1811      =1   * @return      Value of INDEX
1812      =1   ******************************************************************************/
1813      =1  uint8_t USB_GetIndex(void);
1814      =1  
1815      =1  /***************************************************************************//**
1816      =1   * @brief       Determines if the USB is currently suspended
1817      =1   * @return      TRUE if USB is in suspend mode
1818      =1   ******************************************************************************/
1819      =1  bool USB_IsSuspended(void);
1820      =1  
1821      =1  /***************************************************************************//**
1822      =1   * @brief       Gets Setup End state
1823      =1   * @return      TRUE when a control transaction end before software has
1824      =1   *              set the DATAEND bit.
1825      =1   ******************************************************************************/
1826      =1  bool USB_GetSetupEnd(void);
1827      =1  
1828      =1  /***************************************************************************//**
1829      =1   * @brief       Determines if STALL was send on Endpoint 0
1830      =1   * @return      TRUE after a STALL was sent on Endpoint 0
1831      =1   ******************************************************************************/
1832      =1  bool USB_Ep0SentStall(void);
1833      =1  
1834      =1  /***************************************************************************//**
1835      =1   * @brief       Determines if Out Packet Ready is set on Endpoint 0
1836      =1   * @return      TRUE if Out Packet Ready is set on Endpoint 0
1837      =1   ******************************************************************************/
1838      =1  bool USB_Ep0InPacketReady(void);
1839      =1  
1840      =1  /***************************************************************************//**
1841      =1   * @brief       Determines if In Packet Ready is set on Endpoint 0
1842      =1   * @return      TRUE if In Packet Ready is set on Endpoint 0
1843      =1   ******************************************************************************/
1844      =1  bool USB_Ep0OutPacketReady(void);
1845      =1  
1846      =1  /***************************************************************************//**
1847      =1   * @brief       Gets Endpoint 0 data count
1848      =1   * @return      Number of received data bytes in the Endpoint 0 FIFO
1849      =1   ******************************************************************************/
1850      =1  uint8_t USB_Ep0GetCount(void);
1851      =1  
1852      =1  /***************************************************************************//**
1853      =1   * @brief       Checks if stall was sent on IN Endpoint N
1854      =1   * @return      TRUE if stall was sent on IN Endpoint N, FALSE otherwise
1855      =1   ******************************************************************************/
1856      =1  bool USB_EpnInGetSentStall(void);
1857      =1  
1858      =1  /***************************************************************************//**
1859      =1   * @brief       Checks if stall was sent on OUT Endpoint N
1860      =1   * @return      TRUE if stall was sent on OUT Endpoint N, FALSE otherwise
1861      =1   ******************************************************************************/
1862      =1  bool USB_EpnGetInPacketReady(void);
1863      =1  
1864      =1  /***************************************************************************//**
1865      =1   * @brief       Checks if stall was sent on OUT Endpoint N
1866      =1   * @return      TRUE if stall was sent on OUT Endpoint N, FALSE otherwise
1867      =1   ******************************************************************************/
1868      =1  bool USB_EpnOutGetSentStall(void);
1869      =1  
1870      =1  /***************************************************************************//**
1871      =1   * @brief       Gets OutPacketReady on OUT Endpoint N
1872      =1   * @return      TRUE if OUTPacketReady is set, FALSE otherwise
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 115 

1873      =1   ******************************************************************************/
1874      =1  bool USB_EpnGetOutPacketReady(void);
1875      =1  
1876      =1  /***************************************************************************//**
1877      =1   * @brief       Gets number of bytes in the OUT FIFO
1878      =1   *              OUT packet
1879      =1   * @return      Number of bytes in the FIFO from the last received
1880      =1   *              packet
1881      =1   ******************************************************************************/
1882      =1  uint16_t USB_EpOutGetCount(void);
1883      =1  
1884      =1  /***************************************************************************//**
1885      =1   * @brief       Reads the USB frame number
1886      =1   * @return      The frame number on the most recent SOF packet
1887      =1   ******************************************************************************/
1888      =1  uint16_t USB_GetSofNumber(void);
1889      =1  
1890      =1  /***************************************************************************//**
1891      =1   * @brief       Aborts pending IN transactions on the selected endpoint
1892      =1   * @param       fifoNum
1893      =1   *              Endpoint to abort
1894      =1   ******************************************************************************/
1895      =1  void USB_AbortInEp(uint8_t fifoNum);
1896      =1  
1897      =1  /***************************************************************************//**
1898      =1   * @brief       Aborts pending OUT transactions on the selected endpoint
1899      =1   * @param       fifoNum
1900      =1   *              Endpoint to abort
1901      =1   ******************************************************************************/
1902      =1  void USB_AbortOutEp(uint8_t fifoNum);
1903      =1  
1904      =1  /***************************************************************************//**
1905      =1   * @brief       Activates the selected endpoint
1906      =1   * @param       ep
1907      =1   *              Endpoint to access
1908      =1   * @param       packetSize
1909      =1   *              Maximum packet size for endpoint
1910      =1   * @param       inDir
1911      =1   *              Set to 1 if endpoint is IN, 0 if it is OUT
1912      =1   * @param       splitMode
1913      =1   *              Set to 1 if endpoint is in split mode, 0 if it is not
1914      =1   * @param       isoMode
1915      =1   *              Set to 1 if endpoint is in isochronous mode, 0 if it is not
1916      =1   ******************************************************************************/
1917      =1  void USB_ActivateEp(uint8_t ep,
1918      =1                      uint16_t packetSize,
1919      =1                      bool inDir,
1920      =1                      bool splitMode,
1921      =1                      bool isoMode);
1922      =1  
1923      =1  /**  @} (end addtogroup usb_0_runtime USB0 Runtime API) */
1924      =1  /**  @} (end addtogroup usb_0_group USB0 Driver) */
1925      =1  
1926      =1  // -----------------------------------------------------------------------------
1927      =1  // Error Checking
1928      =1  
1929      =1  // -------------------------------
1930      =1  // Verify that the maximum packet size specified for an endpoint is not too
1931      =1  // large for that endpoint
1932      =1  
1933      =1  #ifdef SLAB_USB_EP1IN_USED
           =1   #if SLAB_USB_EP1IN_USED
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 116 

           =1     #if SLAB_USB_EP1IN_TRANSFER_TYPE == USB_EPTYPE_ISOC
           =1       #error Isochronous transfers are not supported on Endpoint 1.
           =1     #else           // #if SLAB_USB_EP1IN_TRANSFER_TYPE == USB_EPTYPE_ISOC
           =1       #if SLAB_USB_EP1IN_MAX_PACKET_SIZE > 64
           =1         #error EP1IN packet size too large. Interrupt/Bulk packet size must be 64 bytes or less.
           =1       #endif        // #if SLAB_USB_EP1IN_MAX_PACKET_SIZE > 64
           =1     #endif          // #if SLAB_USB_EP1IN_TRANSFER_TYPE == USB_EPTYPE_ISOC
           =1   #endif            // #if SLAB_USB_EP1IN_USED
           =1 #endif              // #ifdef SLAB_USB_EP1IN_USED
1944      =1  
1945      =1  #ifdef SLAB_USB_EP1OUT_USED
           =1   #if SLAB_USB_EP1OUT_USED
           =1     #if SLAB_USB_EP1OUT_TRANSFER_TYPE == USB_EPTYPE_ISOC
           =1       #error Isochronous transfers are not supported on Endpoint 1.
           =1     #else           // #if SLAB_USB_EP1OUT_TRANSFER_TYPE == USB_EPTYPE_ISOC
           =1       #if SLAB_USB_EP1OUT_MAX_PACKET_SIZE > 64
           =1         #error EP1OUT packet size too large. Interrupt/Bulk packet size must be 64 bytes or less.
           =1       #endif        // #if SLAB_USB_EP1OUT_MAX_PACKET_SIZE > 64
           =1     #endif          // #if SLAB_USB_EP1OUT_TRANSFER_TYPE == USB_EPTYPE_ISOC
           =1   #endif            // #if SLAB_USB_EP1OUT_USED
           =1 #endif              // #ifdef SLAB_USB_EP1OUT_USED
1956      =1  
1957      =1  #ifdef SLAB_USB_EP2IN_USED
           =1   #if SLAB_USB_EP2IN_USED
           =1     #if SLAB_USB_EP2IN_TRANSFER_TYPE == USB_EPTYPE_ISOC
           =1       #error Isochronous transfers are not supported on Endpoint 2.
           =1     #else           // #if SLAB_USB_EP2IN_TRANSFER_TYPE == USB_EPTYPE_ISOC
           =1       #if SLAB_USB_EP2IN_MAX_PACKET_SIZE > 64
           =1         #error EP2IN packet size too large. Interrupt/Bulk packet size must be 64 bytes or less.
           =1       #endif        // #if SLAB_USB_EP2IN_MAX_PACKET_SIZE > 64
           =1     #endif          // #if SLAB_USB_EP2IN_TRANSFER_TYPE == USB_EPTYPE_ISOC
           =1   #endif            // #if SLAB_USB_EP2IN_USED
           =1 #endif              // #ifdef SLAB_USB_EP2IN_USED
1968      =1  
1969      =1  #ifdef SLAB_USB_EP2OUT_USED
           =1   #if SLAB_USB_EP2OUT_USED
           =1     #if SLAB_USB_EP2OUT_TRANSFER_TYPE == USB_EPTYPE_ISOC
           =1       #error Isochronous transfers are not supported on Endpoint 2.
           =1     #else           // #if SLAB_USB_EP2OUT_TRANSFER_TYPE == USB_EPTYPE_ISOC
           =1       #if SLAB_USB_EP2OUT_MAX_PACKET_SIZE > 64
           =1         #error EP2OUT packet size too large. Interrupt/Bulk packet size must be 64 bytes or less.
           =1       #endif        // #if SLAB_USB_EP2OUT_MAX_PACKET_SIZE > 64
           =1     #endif          // #if SLAB_USB_EP2OUT_TRANSFER_TYPE == USB_EPTYPE_ISOC
           =1   #endif            // #if SLAB_USB_EP2OUT_USED
           =1 #endif              // #ifdef SLAB_USB_EP2OUT_USED
1980      =1  
1981      =1  #ifdef SLAB_USB_EP3IN_USED
           =1   #if SLAB_USB_EP3IN_USED
           =1     #if SLAB_USB_EP3IN_TRANSFER_TYPE == USB_EPTYPE_ISOC
           =1       #if SLAB_USB_EP3OUT_USED
           =1         #if SLAB_USB_EP3IN_MAX_PACKET_SIZE > 256
           =1           #error EP3IN packet size too large. FIFO 3 split mode packet size must be 256 bytes or less.
           =1         #endif      // #if SLAB_USB_EP3IN_MAX_PACKET_SIZE > 256
           =1       #else         // #if SLAB_USB_EP3OUT_USED
           =1         #if SLAB_USB_EP3IN_MAX_PACKET_SIZE > 512
           =1           #error EP3IN packet size too large. FIFO 3 packet size must be 512 bytes or less.
           =1         #endif      // #if SLAB_USB_EP3IN_MAX_PACKET_SIZE > 512
           =1       #endif        // #if SLAB_USB_EP3OUT_USED
           =1     #else           // #if SLAB_USB_EP3IN_TRANSFER_TYPE == USB_EPTYPE_ISOC
           =1       #if SLAB_USB_EP3IN_MAX_PACKET_SIZE > 64
           =1         #error EP3IN packet size too large. Interrupt/Bulk packet size must be 64 bytes or less.
           =1       #endif        // #if SLAB_USB_EP3IN_MAX_PACKET_SIZE > 64
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 117 

           =1     #endif          // #if SLAB_USB_EP3IN_TRANSFER_TYPE == USB_EPTYPE_ISOC
           =1   #endif            // #if SLAB_USB_EP3IN_USED
           =1 #endif              // #ifdef SLAB_USB_EP3IN_USED
2000      =1  
2001      =1  #ifdef SLAB_USB_EP3OUT_USED
           =1   #if SLAB_USB_EP3OUT_USED
           =1     #if SLAB_USB_EP3OUT_TRANSFER_TYPE == USB_EPTYPE_ISOC
           =1       #if SLAB_USB_EP3IN_USED
           =1         #if SLAB_USB_EP3OUT_MAX_PACKET_SIZE > 256
           =1           #error EP3OUT packet size too large. FIFO 3 split mode packet size must be 256 bytes or less.
           =1         #endif      // #if SLAB_USB_EP3OUT_MAX_PACKET_SIZE > 256
           =1       #else         // #if SLAB_USB_EP3IN_USED
           =1         #if SLAB_USB_EP3OUT_MAX_PACKET_SIZE > 512
           =1           #error EP3OUT packet size too large. FIFO 3 packet size must be 512 bytes or less.
           =1         #endif      // #if SLAB_USB_EP3OUT_MAX_PACKET_SIZE > 512
           =1       #endif        // #if SLAB_USB_EP3IN_USED
           =1     #else           // #if SLAB_USB_EP3OUT_TRANSFER_TYPE == USB_EPTYPE_ISOC
           =1       #if SLAB_USB_EP3OUT_MAX_PACKET_SIZE > 64
           =1         #error EP3OUT packet size too large. Interrupt/Bulk packet size must be 64 bytes or less.
           =1       #endif        // #if SLAB_USB_EP3OUT_MAX_PACKET_SIZE > 64
           =1     #endif          // #if SLAB_USB_EP3OUT_TRANSFER_TYPE == USB_EPTYPE_ISOC
           =1   #endif            // #if SLAB_USB_EP3OUT_USED
           =1 #endif              // #ifdef SLAB_USB_EP3OUT_USED
2020      =1  
2021      =1  #endif  // __SILICON_LABS_EFM8_USB_0_H__
   8          #include <stdbool.h>
   1      =1  /**************************************************************************//**
   2      =1   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =1   *
   4      =1   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =1   *****************************************************************************/
   6      =1  
   7      =1  #ifndef STDBOOL_H
           =1 #define STDBOOL_H
           =1 
           =1 #if defined __C51__
           =1 
           =1 typedef bit bool;
           =1 enum{
           =1   false = 0,
           =1   true = 1,
           =1 };
           =1 
           =1 #endif //__C51__
           =1 #endif //STDBOOL_H
  20      =1  
   9          #include <stdint.h>
   1      =1  /**************************************************************************//**
   2      =1   * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3      =1   *
   4      =1   * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5      =1   *****************************************************************************/
   6      =1  
   7      =1  #ifndef STDINT_H
           =1 #define STDINT_H
           =1 
           =1 #if defined __C51__
           =1 
           =1 typedef unsigned char     uint8_t;
           =1 typedef unsigned short    uint16_t;
           =1 typedef unsigned long     uint32_t;
           =1 typedef uint32_t          uint64_t[2];
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 118 

           =1 
           =1 typedef signed char       int8_t;
           =1 typedef short             int16_t;
           =1 typedef long              int32_t;
           =1 typedef int32_t           int64_t[2];
           =1 
           =1 #endif
           =1 
           =1 #endif
  10          
  11          /** @addtogroup usb_0_runtime USB0 Runtime API */
  12          
  13          // -----------------------------------------------------------------------------
  14          // Functions
  15          
  16          // -------------------------------
  17          // Utility Functions
  18          
  19          /**************************************************************************//**
  20           * @brief       Reads a 16-bit indirect USB register value
  21           * @param [in]  regAddr
  22           *   Address of high byte of 16-bit USB indirect register to read
  23           * @return      16-bit register value
  24           *****************************************************************************/
  25          static uint16_t USB_GetShortRegister(uint8_t regAddr)
  26          {
  27   1        uint16_t retVal;
  28   1      
  29   1        USB_READ_BYTE(regAddr);
  30   1        retVal = (USB0DAT << 8);
  31   1        USB_READ_BYTE((regAddr - 1));
  32   1        retVal |= USB0DAT;
  33   1      
  34   1        return retVal;
  35   1      }
  36          
  37          // -------------------------------
  38          // USB0 Peripheral Driver Functions
  39          
  40          void USB_SetIndex(uint8_t epsel)
  41          {
  42   1        USB_WRITE_BYTE(INDEX, epsel);
  43   1      }
  44          
  45          uint8_t USB_GetCommonInts(void)
  46          {
  47   1        USB_READ_BYTE(CMINT);
  48   1        return USB0DAT;
  49   1      }
  50          
  51          uint8_t USB_GetInInts(void)
  52          {
  53   1        USB_READ_BYTE(IN1INT);
  54   1        return USB0DAT;
  55   1      }
  56          
  57          uint8_t USB_GetOutInts(void)
  58          {
  59   1        USB_READ_BYTE(OUT1INT);
  60   1        return USB0DAT;
  61   1      }
  62          
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 119 

  63          uint8_t USB_GetIndex(void)
  64          {
  65   1        USB_READ_BYTE(INDEX);
  66   1        return USB0DAT;
  67   1      }
  68          
  69          bool USB_IsSuspended(void)
  70          {
  71   1        USB_READ_BYTE(POWER);
  72   1        return USB0DAT & POWER_SUSMD__SUSPENDED;
  73   1      }
  74          
  75          bool USB_GetSetupEnd(void)
  76          {
  77   1        USB_READ_BYTE(E0CSR);
  78   1        return USB0DAT & E0CSR_SUEND__SET;
  79   1      }
  80          
  81          bool USB_Ep0SentStall(void)
  82          {
  83   1        USB_READ_BYTE(E0CSR);
  84   1        return USB0DAT & E0CSR_STSTL__SET;
  85   1      }
  86          
  87          bool USB_Ep0OutPacketReady(void)
  88          {
  89   1        USB_READ_BYTE(E0CSR);
  90   1        return USB0DAT & E0CSR_OPRDY__SET;
  91   1      }
  92          
  93          bool USB_Ep0InPacketReady(void)
  94          {
  95   1        USB_READ_BYTE(E0CSR);
  96   1        return USB0DAT & E0CSR_INPRDY__SET;
  97   1      }
  98          
  99          uint8_t USB_Ep0GetCount(void)
 100          {
 101   1        USB_READ_BYTE(E0CNT);
 102   1        return USB0DAT;
 103   1      }
 104          
 105          bool USB_EpnInGetSentStall(void)
 106          {
 107   1        USB_READ_BYTE(EINCSRL);
 108   1        return (bool)(USB0DAT & EINCSRL_STSTL__SET);
 109   1      }
 110          
 111          void USB_AbortInEp(uint8_t fifoNum)
 112          {
 113   1        USB_SetIndex(fifoNum);
 114   1        USB_EpnInFlush();
 115   1        USB_EpnInFlush();
 116   1      }
 117          
 118          bool USB_EpnOutGetSentStall(void)
 119          {
 120   1        USB_READ_BYTE(EOUTCSRL);
 121   1        return (bool)(USB0DAT & EOUTCSRL_STSTL__SET);
 122   1      }
 123          
 124          bool USB_EpnGetOutPacketReady(void)
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 120 

 125          {
 126   1        USB_READ_BYTE(EOUTCSRL);
 127   1        return (bool)(USB0DAT & EOUTCSRL_OPRDY__SET);
 128   1      }
 129          
 130          uint16_t USB_EpOutGetCount(void)
 131          {
 132   1        return USB_GetShortRegister(EOUTCNTH);
 133   1      }
 134          
 135          void USB_AbortOutEp(uint8_t fifoNum)
 136          {
 137   1        USB_SetIndex(fifoNum);
 138   1        USB_EpnOutFlush();
 139   1        USB_EpnOutFlush();
 140   1      }
 141          
 142          void USB_ActivateEp(uint8_t ep,
 143                              uint16_t packetSize,
 144                              bool inDir,
 145                              bool splitMode,
 146                              bool isoMode)
 147          {
 148   1        uint8_t CSRH_mask = 0;
 149   1        uint16_t fifoSize;
 150   1      
 151   1        USB_SetIndex(ep);
 152   1      
 153   1        // Determine the available fifoSize for a given endpoint based on the
 154   1        // splitMode setting
 155   1        fifoSize = (splitMode == true) ? (16 << ep) : (32 << ep);
 156   1      
 157   1        if (packetSize <= fifoSize)
 158   1        {
 159   2          CSRH_mask |= EINCSRH_DBIEN__ENABLED;
 160   2        }
 161   1      
 162   1        if (isoMode == true)
 163   1        {
 164   2          CSRH_mask |= EINCSRH_ISO__ENABLED;
 165   2        }
 166   1      
 167   1        if (inDir == true)
 168   1        {
 169   2          CSRH_mask |= EINCSRH_DIRSEL__IN;
 170   2      
 171   2          if (splitMode == true)
 172   2          {
 173   3            CSRH_mask |= EINCSRH_SPLIT__ENABLED;
 174   3          }
 175   2          USB_WRITE_BYTE(EINCSRL, EINCSRL_CLRDT__BMASK);
 176   2          USB_WRITE_BYTE(EINCSRH, CSRH_mask);
 177   2        }
 178   1        else // OUT
 179   1        {
 180   2          USB_WRITE_BYTE(EOUTCSRL, EOUTCSRL_CLRDT__BMASK);
 181   2          USB_WRITE_BYTE(EOUTCSRH, CSRH_mask);
 182   2      
 183   2          if (splitMode == false)
 184   2          {
 185   3            USB_WRITE_BYTE(EINCSRH, 0);
 186   3          }
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 121 

 187   2        }
 188   1      }
 189          
 190          uint16_t USB_GetSofNumber(void)
 191          {
 192   1        return USB_GetShortRegister(FRAMEH);
 193   1      }
 194          
 195          /**  @} (end addtogroup usb_0_runtime USB0 Runtime API) */
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 122 

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _USB_GetShortRegister (BEGIN)
                                           ; SOURCE LINE # 25
0000 900000      R     MOV     DPTR,#regAddr
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 26
0005         ?C0003:
                                           ; SOURCE LINE # 29
0005 900000      R     MOV     DPTR,#regAddr
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 4480              ORL     A,#080H
000D F596              MOV     USB0ADR,A
000F         ?C0004:
000F E596              MOV     A,USB0ADR
0011 20E7FB            JB      ACC.7,?C0004
0014         ?C0005:
0014         ?C0001:
0014         ?C0002:
                                           ; SOURCE LINE # 30
0014 AF97              MOV     R7,USB0DAT
0016 7E00              MOV     R6,#00H
0018 EF                MOV     A,R7
0019 7F00              MOV     R7,#00H
001B FE                MOV     R6,A
001C 900000      R     MOV     DPTR,#retVal
001F EE                MOV     A,R6
0020 F0                MOVX    @DPTR,A
0021 A3                INC     DPTR
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
0024         ?C0008:
                                           ; SOURCE LINE # 31
0024 900000      R     MOV     DPTR,#regAddr
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 EF                MOV     A,R7
002A 14                DEC     A
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 4480              ORL     A,#080H
002F F596              MOV     USB0ADR,A
0031         ?C0009:
0031 E596              MOV     A,USB0ADR
0033 20E7FB            JB      ACC.7,?C0009
0036         ?C0010:
0036         ?C0006:
0036         ?C0007:
                                           ; SOURCE LINE # 32
0036 900000      R     MOV     DPTR,#retVal
0039 E0                MOVX    A,@DPTR
003A FE                MOV     R6,A
003B A3                INC     DPTR
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E AD97              MOV     R5,USB0DAT
0040 7C00              MOV     R4,#00H
0042 EE                MOV     A,R6
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 123 

0043 4C                ORL     A,R4
0044 FE                MOV     R6,A
0045 EF                MOV     A,R7
0046 4D                ORL     A,R5
0047 FF                MOV     R7,A
0048 900000      R     MOV     DPTR,#retVal
004B EE                MOV     A,R6
004C F0                MOVX    @DPTR,A
004D A3                INC     DPTR
004E EF                MOV     A,R7
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 34
0050 900000      R     MOV     DPTR,#retVal
0053 E0                MOVX    A,@DPTR
0054 FE                MOV     R6,A
0055 A3                INC     DPTR
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
                                           ; SOURCE LINE # 35
0058         ?C0011:
0058 22                RET     
             ; FUNCTION _USB_GetShortRegister (END)

             ; FUNCTION _USB_SetIndex (BEGIN)
                                           ; SOURCE LINE # 40
0000 900000      R     MOV     DPTR,#epsel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 41
0005         ?C0014:
                                           ; SOURCE LINE # 42
0005 75960E            MOV     USB0ADR,#0EH
0008 900000      R     MOV     DPTR,#epsel
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D 8F97              MOV     USB0DAT,R7
000F         ?C0015:
000F E596              MOV     A,USB0ADR
0011 20E7FB            JB      ACC.7,?C0015
0014         ?C0016:
0014         ?C0012:
0014         ?C0013:
                                           ; SOURCE LINE # 43
0014         ?C0017:
0014 22                RET     
             ; FUNCTION _USB_SetIndex (END)

             ; FUNCTION USB_GetCommonInts (BEGIN)
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 46
0000         ?C0020:
                                           ; SOURCE LINE # 47
0000 759686            MOV     USB0ADR,#086H
0003         ?C0021:
0003 E596              MOV     A,USB0ADR
0005 20E7FB            JB      ACC.7,?C0021
0008         ?C0022:
0008         ?C0018:
0008         ?C0019:
                                           ; SOURCE LINE # 48
0008 AF97              MOV     R7,USB0DAT
                                           ; SOURCE LINE # 49
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 124 

000A         ?C0023:
000A 22                RET     
             ; FUNCTION USB_GetCommonInts (END)

             ; FUNCTION USB_GetInInts (BEGIN)
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 52
0000         ?C0026:
                                           ; SOURCE LINE # 53
0000 759682            MOV     USB0ADR,#082H
0003         ?C0027:
0003 E596              MOV     A,USB0ADR
0005 20E7FB            JB      ACC.7,?C0027
0008         ?C0028:
0008         ?C0024:
0008         ?C0025:
                                           ; SOURCE LINE # 54
0008 AF97              MOV     R7,USB0DAT
                                           ; SOURCE LINE # 55
000A         ?C0029:
000A 22                RET     
             ; FUNCTION USB_GetInInts (END)

             ; FUNCTION USB_GetOutInts (BEGIN)
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 58
0000         ?C0032:
                                           ; SOURCE LINE # 59
0000 759684            MOV     USB0ADR,#084H
0003         ?C0033:
0003 E596              MOV     A,USB0ADR
0005 20E7FB            JB      ACC.7,?C0033
0008         ?C0034:
0008         ?C0030:
0008         ?C0031:
                                           ; SOURCE LINE # 60
0008 AF97              MOV     R7,USB0DAT
                                           ; SOURCE LINE # 61
000A         ?C0035:
000A 22                RET     
             ; FUNCTION USB_GetOutInts (END)

             ; FUNCTION USB_GetIndex (BEGIN)
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 64
0000         ?C0038:
                                           ; SOURCE LINE # 65
0000 75968E            MOV     USB0ADR,#08EH
0003         ?C0039:
0003 E596              MOV     A,USB0ADR
0005 20E7FB            JB      ACC.7,?C0039
0008         ?C0040:
0008         ?C0036:
0008         ?C0037:
                                           ; SOURCE LINE # 66
0008 AF97              MOV     R7,USB0DAT
                                           ; SOURCE LINE # 67
000A         ?C0041:
000A 22                RET     
             ; FUNCTION USB_GetIndex (END)

             ; FUNCTION USB_IsSuspended (BEGIN)
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 125 

                                           ; SOURCE LINE # 69
                                           ; SOURCE LINE # 70
0000         ?C0044:
                                           ; SOURCE LINE # 71
0000 759681            MOV     USB0ADR,#081H
0003         ?C0045:
0003 E596              MOV     A,USB0ADR
0005 20E7FB            JB      ACC.7,?C0045
0008         ?C0046:
0008         ?C0042:
0008         ?C0043:
                                           ; SOURCE LINE # 72
0008 E597              MOV     A,USB0DAT
000A A2E1              MOV     C,ACC.1
                                           ; SOURCE LINE # 73
000C         ?C0047:
000C 22                RET     
             ; FUNCTION USB_IsSuspended (END)

             ; FUNCTION USB_GetSetupEnd (BEGIN)
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 76
0000         ?C0050:
                                           ; SOURCE LINE # 77
0000 759691            MOV     USB0ADR,#091H
0003         ?C0051:
0003 E596              MOV     A,USB0ADR
0005 20E7FB            JB      ACC.7,?C0051
0008         ?C0052:
0008         ?C0048:
0008         ?C0049:
                                           ; SOURCE LINE # 78
0008 E597              MOV     A,USB0DAT
000A A2E4              MOV     C,ACC.4
                                           ; SOURCE LINE # 79
000C         ?C0053:
000C 22                RET     
             ; FUNCTION USB_GetSetupEnd (END)

             ; FUNCTION USB_Ep0SentStall (BEGIN)
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 82
0000         ?C0056:
                                           ; SOURCE LINE # 83
0000 759691            MOV     USB0ADR,#091H
0003         ?C0057:
0003 E596              MOV     A,USB0ADR
0005 20E7FB            JB      ACC.7,?C0057
0008         ?C0058:
0008         ?C0054:
0008         ?C0055:
                                           ; SOURCE LINE # 84
0008 E597              MOV     A,USB0DAT
000A A2E2              MOV     C,ACC.2
                                           ; SOURCE LINE # 85
000C         ?C0059:
000C 22                RET     
             ; FUNCTION USB_Ep0SentStall (END)

             ; FUNCTION USB_Ep0OutPacketReady (BEGIN)
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 126 

0000         ?C0062:
                                           ; SOURCE LINE # 89
0000 759691            MOV     USB0ADR,#091H
0003         ?C0063:
0003 E596              MOV     A,USB0ADR
0005 20E7FB            JB      ACC.7,?C0063
0008         ?C0064:
0008         ?C0060:
0008         ?C0061:
                                           ; SOURCE LINE # 90
0008 E597              MOV     A,USB0DAT
000A 13                RRC     A
                                           ; SOURCE LINE # 91
000B         ?C0065:
000B 22                RET     
             ; FUNCTION USB_Ep0OutPacketReady (END)

             ; FUNCTION USB_Ep0InPacketReady (BEGIN)
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 94
0000         ?C0068:
                                           ; SOURCE LINE # 95
0000 759691            MOV     USB0ADR,#091H
0003         ?C0069:
0003 E596              MOV     A,USB0ADR
0005 20E7FB            JB      ACC.7,?C0069
0008         ?C0070:
0008         ?C0066:
0008         ?C0067:
                                           ; SOURCE LINE # 96
0008 E597              MOV     A,USB0DAT
000A A2E1              MOV     C,ACC.1
                                           ; SOURCE LINE # 97
000C         ?C0071:
000C 22                RET     
             ; FUNCTION USB_Ep0InPacketReady (END)

             ; FUNCTION USB_Ep0GetCount (BEGIN)
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 100
0000         ?C0074:
                                           ; SOURCE LINE # 101
0000 759696            MOV     USB0ADR,#096H
0003         ?C0075:
0003 E596              MOV     A,USB0ADR
0005 20E7FB            JB      ACC.7,?C0075
0008         ?C0076:
0008         ?C0072:
0008         ?C0073:
                                           ; SOURCE LINE # 102
0008 AF97              MOV     R7,USB0DAT
                                           ; SOURCE LINE # 103
000A         ?C0077:
000A 22                RET     
             ; FUNCTION USB_Ep0GetCount (END)

             ; FUNCTION USB_EpnInGetSentStall (BEGIN)
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
0000         ?C0080:
                                           ; SOURCE LINE # 107
0000 759691            MOV     USB0ADR,#091H
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 127 

0003         ?C0081:
0003 E596              MOV     A,USB0ADR
0005 20E7FB            JB      ACC.7,?C0081
0008         ?C0082:
0008         ?C0078:
0008         ?C0079:
                                           ; SOURCE LINE # 108
0008 E597              MOV     A,USB0DAT
000A A2E5              MOV     C,ACC.5
                                           ; SOURCE LINE # 109
000C         ?C0083:
000C 22                RET     
             ; FUNCTION USB_EpnInGetSentStall (END)

             ; FUNCTION _USB_AbortInEp (BEGIN)
                                           ; SOURCE LINE # 111
0000 900000      R     MOV     DPTR,#fifoNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
                                           ; SOURCE LINE # 113
0005 900000      R     MOV     DPTR,#fifoNum
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 120000      R     LCALL   _USB_SetIndex
000D         ?C0086:
                                           ; SOURCE LINE # 114
000D         ?C0089:
000D 759611            MOV     USB0ADR,#011H
0010 759708            MOV     USB0DAT,#08H
0013         ?C0090:
0013 E596              MOV     A,USB0ADR
0015 20E7FB            JB      ACC.7,?C0090
0018         ?C0091:
0018         ?C0087:
0018         ?C0088:
0018         ?C0094:
0018         ?C0097:
0018 759691            MOV     USB0ADR,#091H
001B         ?C0098:
001B E596              MOV     A,USB0ADR
001D 20E7FB            JB      ACC.7,?C0098
0020         ?C0099:
0020         ?C0095:
0020         ?C0096:
0020         ?C0092:
0020 E597              MOV     A,USB0DAT
0022 20E3F3            JB      ACC.3,?C0097
0025         ?C0093:
0025         ?C0084:
0025         ?C0085:
0025         ?C0102:
                                           ; SOURCE LINE # 115
0025         ?C0105:
0025 759611            MOV     USB0ADR,#011H
0028 759708            MOV     USB0DAT,#08H
002B         ?C0106:
002B E596              MOV     A,USB0ADR
002D 20E7FB            JB      ACC.7,?C0106
0030         ?C0107:
0030         ?C0103:
0030         ?C0104:
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 128 

0030         ?C0110:
0030         ?C0113:
0030 759691            MOV     USB0ADR,#091H
0033         ?C0114:
0033 E596              MOV     A,USB0ADR
0035 20E7FB            JB      ACC.7,?C0114
0038         ?C0115:
0038         ?C0111:
0038         ?C0112:
0038         ?C0108:
0038 E597              MOV     A,USB0DAT
003A 20E3F3            JB      ACC.3,?C0113
003D         ?C0109:
003D         ?C0100:
003D         ?C0101:
                                           ; SOURCE LINE # 116
003D         ?C0116:
003D 22                RET     
             ; FUNCTION _USB_AbortInEp (END)

             ; FUNCTION USB_EpnOutGetSentStall (BEGIN)
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
0000         ?C0119:
                                           ; SOURCE LINE # 120
0000 759694            MOV     USB0ADR,#094H
0003         ?C0120:
0003 E596              MOV     A,USB0ADR
0005 20E7FB            JB      ACC.7,?C0120
0008         ?C0121:
0008         ?C0117:
0008         ?C0118:
                                           ; SOURCE LINE # 121
0008 E597              MOV     A,USB0DAT
000A A2E6              MOV     C,ACC.6
                                           ; SOURCE LINE # 122
000C         ?C0122:
000C 22                RET     
             ; FUNCTION USB_EpnOutGetSentStall (END)

             ; FUNCTION USB_EpnGetOutPacketReady (BEGIN)
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
0000         ?C0125:
                                           ; SOURCE LINE # 126
0000 759694            MOV     USB0ADR,#094H
0003         ?C0126:
0003 E596              MOV     A,USB0ADR
0005 20E7FB            JB      ACC.7,?C0126
0008         ?C0127:
0008         ?C0123:
0008         ?C0124:
                                           ; SOURCE LINE # 127
0008 E597              MOV     A,USB0DAT
000A 13                RRC     A
                                           ; SOURCE LINE # 128
000B         ?C0128:
000B 22                RET     
             ; FUNCTION USB_EpnGetOutPacketReady (END)

             ; FUNCTION USB_EpOutGetCount (BEGIN)
                                           ; SOURCE LINE # 130
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 129 

                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
0000 7F17              MOV     R7,#017H
0002 120000      R     LCALL   _USB_GetShortRegister
                                           ; SOURCE LINE # 133
0005         ?C0129:
0005 22                RET     
             ; FUNCTION USB_EpOutGetCount (END)

             ; FUNCTION _USB_AbortOutEp (BEGIN)
                                           ; SOURCE LINE # 135
0000 900000      R     MOV     DPTR,#fifoNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
0005 900000      R     MOV     DPTR,#fifoNum
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 120000      R     LCALL   _USB_SetIndex
000D         ?C0132:
                                           ; SOURCE LINE # 138
000D         ?C0135:
000D 759614            MOV     USB0ADR,#014H
0010 759710            MOV     USB0DAT,#010H
0013         ?C0136:
0013 E596              MOV     A,USB0ADR
0015 20E7FB            JB      ACC.7,?C0136
0018         ?C0137:
0018         ?C0133:
0018         ?C0134:
0018         ?C0140:
0018         ?C0143:
0018 759694            MOV     USB0ADR,#094H
001B         ?C0144:
001B E596              MOV     A,USB0ADR
001D 20E7FB            JB      ACC.7,?C0144
0020         ?C0145:
0020         ?C0141:
0020         ?C0142:
0020         ?C0138:
0020 E597              MOV     A,USB0DAT
0022 20E4F3            JB      ACC.4,?C0143
0025         ?C0139:
0025         ?C0130:
0025         ?C0131:
0025         ?C0148:
                                           ; SOURCE LINE # 139
0025         ?C0151:
0025 759614            MOV     USB0ADR,#014H
0028 759710            MOV     USB0DAT,#010H
002B         ?C0152:
002B E596              MOV     A,USB0ADR
002D 20E7FB            JB      ACC.7,?C0152
0030         ?C0153:
0030         ?C0149:
0030         ?C0150:
0030         ?C0156:
0030         ?C0159:
0030 759694            MOV     USB0ADR,#094H
0033         ?C0160:
0033 E596              MOV     A,USB0ADR
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 130 

0035 20E7FB            JB      ACC.7,?C0160
0038         ?C0161:
0038         ?C0157:
0038         ?C0158:
0038         ?C0154:
0038 E597              MOV     A,USB0DAT
003A 20E4F3            JB      ACC.4,?C0159
003D         ?C0155:
003D         ?C0146:
003D         ?C0147:
                                           ; SOURCE LINE # 140
003D         ?C0162:
003D 22                RET     
             ; FUNCTION _USB_AbortOutEp (END)

             ; FUNCTION _USB_ActivateEp (BEGIN)
                                           ; SOURCE LINE # 142
0000 900000      R     MOV     DPTR,#ep
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#packetSize
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 148
000D 900000      R     MOV     DPTR,#CSRH_mask
0010 E4                CLR     A
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 151
0012 900000      R     MOV     DPTR,#ep
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 120000      R     LCALL   _USB_SetIndex
                                           ; SOURCE LINE # 155
001A 300018            JNB     splitMode,?C0163
001D 900000      R     MOV     DPTR,#ep
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 7410              MOV     A,#010H
0024 7E00              MOV     R6,#00H
0026 A807              MOV     R0,AR7
0028 08                INC     R0
0029 8005              SJMP    ?C0199
002B         ?C0198:
002B C3                CLR     C
002C 33                RLC     A
002D CE                XCH     A,R6
002E 33                RLC     A
002F CE                XCH     A,R6
0030         ?C0199:
0030 D8F9              DJNZ    R0,?C0198
0032 FF                MOV     R7,A
0033 8016              SJMP    ?C0164
0035         ?C0163:
0035 900000      R     MOV     DPTR,#ep
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 7420              MOV     A,#020H
003C 7E00              MOV     R6,#00H
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 131 

003E A807              MOV     R0,AR7
0040 08                INC     R0
0041 8005              SJMP    ?C0201
0043         ?C0200:
0043 C3                CLR     C
0044 33                RLC     A
0045 CE                XCH     A,R6
0046 33                RLC     A
0047 CE                XCH     A,R6
0048         ?C0201:
0048 D8F9              DJNZ    R0,?C0200
004A FF                MOV     R7,A
004B         ?C0164:
004B 900000      R     MOV     DPTR,#fifoSize
004E EE                MOV     A,R6
004F F0                MOVX    @DPTR,A
0050 A3                INC     DPTR
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 157
0053 900000      R     MOV     DPTR,#fifoSize
0056 E0                MOVX    A,@DPTR
0057 FE                MOV     R6,A
0058 A3                INC     DPTR
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B 900000      R     MOV     DPTR,#packetSize
005E E0                MOVX    A,@DPTR
005F FC                MOV     R4,A
0060 A3                INC     DPTR
0061 E0                MOVX    A,@DPTR
0062 FD                MOV     R5,A
0063 D3                SETB    C
0064 ED                MOV     A,R5
0065 9F                SUBB    A,R7
0066 EC                MOV     A,R4
0067 9E                SUBB    A,R6
0068 500E              JNC     ?C0165
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 159
006A 900000      R     MOV     DPTR,#CSRH_mask
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F EF                MOV     A,R7
0070 4480              ORL     A,#080H
0072 FF                MOV     R7,A
0073 900000      R     MOV     DPTR,#CSRH_mask
0076 EF                MOV     A,R7
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
0078         ?C0165:
                                           ; SOURCE LINE # 162
0078 30000E            JNB     isoMode,?C0166
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 164
007B 900000      R     MOV     DPTR,#CSRH_mask
007E E0                MOVX    A,@DPTR
007F FF                MOV     R7,A
0080 EF                MOV     A,R7
0081 4440              ORL     A,#040H
0083 FF                MOV     R7,A
0084 900000      R     MOV     DPTR,#CSRH_mask
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 132 

0087 EF                MOV     A,R7
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
0089         ?C0166:
                                           ; SOURCE LINE # 167
0089 30003C            JNB     inDir,?C0182
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 169
008C 900000      R     MOV     DPTR,#CSRH_mask
008F E0                MOVX    A,@DPTR
0090 FF                MOV     R7,A
0091 EF                MOV     A,R7
0092 4420              ORL     A,#020H
0094 FF                MOV     R7,A
0095 900000      R     MOV     DPTR,#CSRH_mask
0098 EF                MOV     A,R7
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
009A 30000E            JNB     splitMode,?C0171
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 173
009D 900000      R     MOV     DPTR,#CSRH_mask
00A0 E0                MOVX    A,@DPTR
00A1 FF                MOV     R7,A
00A2 EF                MOV     A,R7
00A3 4404              ORL     A,#04H
00A5 FF                MOV     R7,A
00A6 900000      R     MOV     DPTR,#CSRH_mask
00A9 EF                MOV     A,R7
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 174
00AB         ?C0168:
00AB         ?C0171:
                                           ; SOURCE LINE # 175
00AB 759611            MOV     USB0ADR,#011H
00AE 759740            MOV     USB0DAT,#040H
00B1         ?C0172:
00B1 E596              MOV     A,USB0ADR
00B3 20E7FB            JB      ACC.7,?C0172
00B6         ?C0173:
00B6         ?C0169:
00B6         ?C0170:
00B6         ?C0176:
                                           ; SOURCE LINE # 176
00B6 759612            MOV     USB0ADR,#012H
00B9 900000      R     MOV     DPTR,#CSRH_mask
00BC E0                MOVX    A,@DPTR
00BD FF                MOV     R7,A
00BE 8F97              MOV     USB0DAT,R7
00C0         ?C0177:
00C0 E596              MOV     A,USB0ADR
00C2 30E72B            JNB     ACC.7,?C0196
00C5 80F9              SJMP    ?C0177
00C7         ?C0178:
00C7         ?C0174:
00C7         ?C0175:
                                           ; SOURCE LINE # 177
00C7 22                RET     
00C8         ?C0167:
                                           ; SOURCE LINE # 179
00C8         ?C0182:
                                           ; SOURCE LINE # 180
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 133 

00C8 759614            MOV     USB0ADR,#014H
00CB 759780            MOV     USB0DAT,#080H
00CE         ?C0183:
00CE E596              MOV     A,USB0ADR
00D0 20E7FB            JB      ACC.7,?C0183
00D3         ?C0184:
00D3         ?C0180:
00D3         ?C0181:
00D3         ?C0187:
                                           ; SOURCE LINE # 181
00D3 759615            MOV     USB0ADR,#015H
00D6 900000      R     MOV     DPTR,#CSRH_mask
00D9 E0                MOVX    A,@DPTR
00DA FF                MOV     R7,A
00DB 8F97              MOV     USB0DAT,R7
00DD         ?C0188:
00DD E596              MOV     A,USB0ADR
00DF 20E7FB            JB      ACC.7,?C0188
00E2         ?C0189:
00E2         ?C0185:
00E2         ?C0186:
                                           ; SOURCE LINE # 183
00E2 20000B            JB      splitMode,?C0196
                                           ; SOURCE LINE # 184
00E5         ?C0193:
                                           ; SOURCE LINE # 185
00E5 759612            MOV     USB0ADR,#012H
00E8 759700            MOV     USB0DAT,#00H
00EB         ?C0194:
00EB E596              MOV     A,USB0ADR
00ED 20E7FB            JB      ACC.7,?C0194
00F0         ?C0195:
00F0         ?C0191:
00F0         ?C0192:
                                           ; SOURCE LINE # 186
00F0         ?C0190:
                                           ; SOURCE LINE # 187
00F0         ?C0179:
                                           ; SOURCE LINE # 188
00F0         ?C0196:
00F0 22                RET     
             ; FUNCTION _USB_ActivateEp (END)

             ; FUNCTION USB_GetSofNumber (BEGIN)
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
                                           ; SOURCE LINE # 192
0000 7F0D              MOV     R7,#0DH
0002 120000      R     LCALL   _USB_GetShortRegister
                                           ; SOURCE LINE # 193
0005         ?C0197:
0005 22                RET     
             ; FUNCTION USB_GetSofNumber (END)

C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 134 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SPI0CKR. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A2H  1
uint16_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
PSW_OV . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D2H  1
XOSC0CN. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B1H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
uint64_t . . . . . . . . . . . . . . .  TYPEDEF  -----  ARRAY    -----  8
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
ADC0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
TMR2CN0_T2XCLK . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
P4 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C7H  1
SI_GEN_PTR_t . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  3
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  gptr . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
USB_GetSofNumber . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SMB0CN0_MASTER . . . . . . . . . . . .  ABSBIT   -----  BIT      00C7H  1
PCA0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00F9H  2
EIE1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E6H  1
SMB1CN0_MASTER . . . . . . . . . . . .  ABSBIT   -----  BIT      00C7H  1
SMB0CN0_ACK. . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C1H  1
USB0XCN. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D7H  1
EIE2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E7H  1
SMB1CN0_ACK. . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C1H  1
int32_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
PSCTL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008FH  1
IT01CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E4H  1
int16_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
TMR5CN0_T5XCLK . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
SMB0CN0_TXMODE . . . . . . . . . . . .  ABSBIT   -----  BIT      00C6H  1
SMB1CN0_TXMODE . . . . . . . . . . . .  ABSBIT   -----  BIT      00C6H  1
SFRPAGE. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BFH  1
P0MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A4H  1
int64_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  ARRAY    -----  8
P1MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A5H  1
SI_UU32. . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  4
  u32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  s32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  uu16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
ADC0CN0_ADINT. . . . . . . . . . . . .  ABSBIT   -----  BIT      00EDH  1
TMR2RLH. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CBH  1
P2MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A6H  1
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
false. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TMR3RLH. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0093H  1
P3MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A7H  1
SI_UU16. . . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  2
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
TMR4RLH. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0093H  1
P4MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AEH  1
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 135 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


EIP1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F6H  1
TMR5RLH. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CBH  1
EIP2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F7H  1
SCON0_RB8. . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
TMR2RLL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CAH  1
PCA0CPH0 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FCH  1
TMR3RLL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0092H  1
PCA0CPH1 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EAH  1
GPTR_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  3
  memtype. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  address. . . . . . . . . . . . . . .  MEMBER   -----  UNION    0001H  2
SCON0_TB8. . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
B_B0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F0H  1
DP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    0082H  2
TMR4RLL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0092H  1
PCA0CPH2 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ECH  1
B_B1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F1H  1
ADC0GT . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00C3H  2
TMR5RLL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CAH  1
PCA0CPH3 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EEH  1
B_B2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F2H  1
PCA0CPL0 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FBH  1
PCA0CPH4 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FEH  1
EMI0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0085H  1
B_B3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F3H  1
PCA0MD . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D9H  1
PCA0CPM0 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DAH  1
PCA0CPL1 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E9H  1
B_B4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F4H  1
PCA0CPM1 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DBH  1
PCA0CPL2 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EBH  1
B_B5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F5H  1
PCA0CPM2 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DCH  1
PCA0CPL3 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EDH  1
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
B_B6 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F6H  1
ADC0LT . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00C5H  2
PCA0CPM3 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DDH  1
PCA0CPL4 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FDH  1
USB_GetSetupEnd. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SCON0_MCE. . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
B_B7 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F7H  1
PCA0CPM4 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DEH  1
XBR0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E1H  1
SMB0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C1H  1
XBR1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E2H  1
SMB1CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C1H  1
PFE0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AFH  1
EMI0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AAH  1
SMB0CN0_STA. . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C5H  1
XBR2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E3H  1
SMB1CN0_STA. . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C5H  1
ACC_ACC0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E0H  1
REF0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D1H  1
HFO0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B2H  1
CKCON0 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
ACC_ACC1 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E1H  1
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 136 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


CKCON1 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E4H  1
USB_EpnGetOutPacketReady . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TMR2CN0_TR2. . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
ACC_ACC2 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E2H  1
ACC_ACC3 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E3H  1
SP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0081H  1
CMP0MD . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009DH  1
ACC_ACC4 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E4H  1
LFO0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0086H  1
EMI0TC . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0084H  1
CMP1MD . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009CH  1
PCA0CN0_CCF0 . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D8H  1
ACC_ACC5 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E5H  1
PCA0CN0_CCF1 . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D9H  1
ACC_ACC6 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E6H  1
TMR2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00CCH  2
PCA0CN0_CCF2 . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DAH  1
ACC_ACC7 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E7H  1
TMR3 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    0094H  2
TMR5CN0_TR5. . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
PCA0CN0_CCF3 . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DBH  1
TMR4 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    0094H  2
SBCON1 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ACH  1
PCA0CN0_CCF4 . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DCH  1
TMR5 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00CCH  2
SMB0CN0_ACKRQ. . . . . . . . . . . . .  ABSBIT   -----  BIT      00C3H  1
VDM0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FFH  1
P0MDIN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F1H  1
SMB1CN0_ACKRQ. . . . . . . . . . . . .  ABSBIT   -----  BIT      00C3H  1
SCON0_REN. . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
P1MDIN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F2H  1
P2MDIN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F3H  1
SMB0CN0_STO. . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C4H  1
P3MDIN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F4H  1
SMB1CN0_STO. . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C4H  1
SBRLH1 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B5H  1
P4MDIN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F5H  1
bool . . . . . . . . . . . . . . . . .  TYPEDEF  DATA   BIT      -----  1
SI_GEN_PTR . . . . . . . . . . . . . .  * TAG *  -----  UNION    -----  3
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3
  gptr . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  3
PSW_RS0. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D3H  1
PCA0CN0_CF . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DFH  1
SPI0CN0_RXOVRN . . . . . . . . . . . .  ABSBIT   -----  BIT      00FCH  1
PSW_RS1. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D4H  1
SBRLL1 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B4H  1
_USB_AbortInEp . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fifoNum. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
ADC0CN0_ADEN . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EFH  1
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
_USB_AbortOutEp. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  fifoNum. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
PSW_PARITY . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
IE_ES0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
CMP0MX . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009FH  1
_USB_ActivateEp. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 137 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  ep . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  packetSize . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0001H  2
  inDir. . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
  splitMode. . . . . . . . . . . . . .  AUTO     DATA   BIT      0001H  1
  isoMode. . . . . . . . . . . . . . .  AUTO     DATA   BIT      0002H  1
  CSRH_mask. . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  fifoSize . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0004H  2
IE_ET0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
CMP1MX . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009EH  1
IE_ET1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
P0SKIP . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D4H  1
USB_IsSuspended. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TMR2CN0_T2CSS. . . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
IE_ET2 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
P1SKIP . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D5H  1
P2SKIP . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D6H  1
ADC0CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
IE_EX0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
P3SKIP . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DFH  1
PCA0CN0_CR . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DEH  1
IE_EX1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
USB_Ep0InPacketReady . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SCON0_SMODE. . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
CLKSEL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A9H  1
USB_Ep0OutPacketReady. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SPI0CN0_SPIEN. . . . . . . . . . . . .  ABSBIT   -----  BIT      00F8H  1
B. . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F0H  1
ADC0H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BEH  1
true . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ADC0CN0_ADTM . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EEH  1
TMR2RL . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00CAH  2
ADC0L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BDH  1
USB_GetInInts. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TMR3RL . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    0092H  2
TMR4RL . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    0092H  2
PCA0CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
ACC. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E0H  1
USB_GetOutInts . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TMR5RL . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00CAH  2
PCA0CP0. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00FBH  2
PCA0CP1. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00E9H  2
PCA0CP2. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00EBH  2
_USB_GetShortRegister. . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  regAddr. . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  retVal . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0001H  2
PCA0CP3. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00EDH  2
TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
IP_PS0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
PCA0CP4. . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00FDH  2
TH1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
PCA0H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FAH  1
IP_PT0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B9H  1
IP_PT1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BBH  1
uint8_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
SMB0CN0_ARBLOST. . . . . . . . . . . .  ABSBIT   -----  BIT      00C2H  1
IP_PT2 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BDH  1
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 138 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SPI0CN0_TXBMT. . . . . . . . . . . . .  ABSBIT   -----  BIT      00F9H  1
SMB1CN0_ARBLOST. . . . . . . . . . . .  ABSBIT   -----  BIT      00C2H  1
PSW_F0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D5H  1
IE_ESPI0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AEH  1
TL1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008BH  1
PCA0L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F9H  1
USB_Ep0SentStall . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SMB0CN0_SI . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C0H  1
PSW_F1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D1H  1
P0_B0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0080H  1
IP_PX0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B8H  1
REG01CN. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C9H  1
SMB1CN0_SI . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C0H  1
P1_B0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
P0_B1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0081H  1
IP_PX1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BAH  1
CMP0CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009BH  1
TCON_IE0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
P2_B0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A0H  1
P1_B1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
P0_B2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0082H  1
CMP1CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009AH  1
TCON_IE1 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
P3_B0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
P2_B1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A1H  1
P1_B2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
P0_B3. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0083H  1
SMB0CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
P3_B1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
P2_B2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
P1_B3. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
P0_B4. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0084H  1
SMB1CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
P3_B2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B2H  1
P2_B3. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
P1_B4. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
P0_B5. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0085H  1
P3_B3. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
P2_B4. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
P1_B5. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
P0_B6. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0086H  1
P3_B4. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
P2_B5. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A5H  1
P1_B6. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
P0_B7. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0087H  1
int8_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
P3_B5. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
P2_B6. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A6H  1
P1_B7. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
P3_B6. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
P2_B7. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
P3_B7. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
DPH. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0083H  1
ADC0GTH. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C4H  1
TMR2CN0_TF2H . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
TMR2CN0_T2SPLIT. . . . . . . . . . . .  ABSBIT   -----  BIT      00CBH  1
PSW_AC . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D6H  1
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 139 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SPI0CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
HFO0CAL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B3H  1
USB_Ep0GetCount. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TCON_TF0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
SCON0_RI . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
DPL. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0082H  1
TCON_TF1 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008FH  1
SBUF0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
PCON0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0087H  1
ADC0GTL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C3H  1
SI_UU32_t. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  4
  u32. . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0000H  4
  s32. . . . . . . . . . . . . . . . .  MEMBER   -----  LONG     0000H  4
  uu16 . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  4
TMR2CN0_TF2L . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CEH  1
SCON0_TI . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
ADC0CN0_ADCM0. . . . . . . . . . . . .  ABSBIT   -----  BIT      00E8H  1
SBUF1. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D3H  1
ADC0LTH. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C6H  1
TCON_IT0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
ADC0CN0_ADCM1. . . . . . . . . . . . .  ABSBIT   -----  BIT      00E9H  1
RSTSRC . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EFH  1
SI_UU16_t. . . . . . . . . . . . . . .  TYPEDEF  -----  UNION    -----  2
  u16. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  s16. . . . . . . . . . . . . . . . .  MEMBER   -----  INT      0000H  2
  u8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
  s8 . . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  2
TMR5CN0_TF5H . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
TMR5CN0_T5SPLIT. . . . . . . . . . . .  ABSBIT   -----  BIT      00CBH  1
TCON_IT1 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
ADC0CN0_ADCM2. . . . . . . . . . . . .  ABSBIT   -----  BIT      00EAH  1
SCON0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
ADC0CN0_ADWINT . . . . . . . . . . . .  ABSBIT   -----  BIT      00EBH  1
SBRL1. . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00B4H  2
SMOD1. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E5H  1
SCON1. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D2H  1
AMX0N. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BAH  1
ADC0CN0_ADBUSY . . . . . . . . . . . .  ABSBIT   -----  BIT      00ECH  1
SMB0ADM. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CEH  1
ADC0LTL. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C5H  1
SPI0CN0_MODF . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FDH  1
IP_PSPI0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BEH  1
SMB1ADM. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CEH  1
AMX0P. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BBH  1
USB_GetIndex . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TMR5CN0_TF5L . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CEH  1
TMR2CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
TMR3CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0091H  1
USB_EpOutGetCount. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TMR4CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0091H  1
USB_EpnInGetSentStall. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TMR5CN0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
SMB0ADR. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CFH  1
C51 COMPILER V9.56.0.0   USB_0                                                             10/28/2016 17:37:02 PAGE 140 

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


TCON_TR0 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
SMB1ADR. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CFH  1
USB_EpnOutGetSentStall . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TMR2CN0_TF2CEN . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
TCON_TR1 . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
SMB0DAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C2H  1
TMR2H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CDH  1
SPI0CFG. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A1H  1
SMB1DAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C2H  1
TMR3H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0095H  1
TMR4H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0095H  1
TMR5H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CDH  1
TMR2L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CCH  1
SPI0CN0_SPIF . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FFH  1
USB0ADR. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0096H  1
TMR3L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0094H  1
_USB_SetIndex. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  epsel. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
IE_EA. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
TMR4L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0094H  1
USB0DAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0097H  1
TMR5L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CCH  1
FLSCL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B6H  1
TMR2CN0_TF2LEN . . . . . . . . . . . .  ABSBIT   -----  BIT      00CDH  1
SPI0CN0_WCOL . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FEH  1
SPI0CN0_NSSMD0 . . . . . . . . . . . .  ABSBIT   -----  BIT      00FAH  1
PSW_CY . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D7H  1
SPI0DAT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A3H  1
SPI0CN0_NSSMD1 . . . . . . . . . . . .  ABSBIT   -----  BIT      00FBH  1
ADC0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00BDH  2
SMBTC. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B9H  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
USB_GetCommonInts. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
TMR5CN0_TF5LEN . . . . . . . . . . . .  ABSBIT   -----  BIT      00CDH  1
FLKEY. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B7H  1
uint32_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    644    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     12    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
