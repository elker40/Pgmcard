C51 COMPILER V9.56.0.0   PAGEMENU                                                          10/25/2016 09:41:34 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE PAGEMENU
OBJECT MODULE PLACED IN .\Objects\PageMenu.obj
COMPILER INVOKED BY: D:\MyProKits\MucKits\Keil\C51\BIN\C51.EXE ..\..\SrcCode\Middle\Gui\Page\PageMenu.c LARGE OPTIMIZE(8
                    -,SPEED) BROWSE INCDIR(..\..\SrcCode\Bsp\Inc;..\..\SrcCode\Logic\Inc;..\..\SrcCode\Middle\Gui\Inc;..\..\SrcCode\Middle\In
                    -put\Inc;..\..\SdkTool\Si8051Base;..\..\SdkTool\EFM8UB2\Inc;..\..\SdkTool\EFM8UB2\Perip\Inc;..\..\SdkTool\EFM8UB2\Xpress\
                    -Inc) DEBUG OBJECTEXTEND SYMBOLS PRINT(.\Listings\PageMenu.lst) TABS(2) OBJECT(.\Objects\PageMenu.obj)

line level    source

   1          
   2          //#include "PageMenu.h"
   3          //#include "TypeDef.h"
   4          //#include "Page.h"
   5          //#include "InputBtn.h"
   6          //#include "PageRes.h"
   7          
   8          ////CSTR xdata PageOptionDirectionDef[4];
   9          ////CSTR xdata PageOptionModelTypeDef[3];
  10          ////CSTR xdata PageOptionFlyModeDef[4];
  11          ////CSTR xdata PageOptionSwitchDef[4];
  12          
  13          //////Switch select
  14          ////CCHAR code SwitchA[] = {0xbf,0xaa,0xb9,0xd8,0x41,0x00,0};
  15          ////CCHAR code SwitchB[] = {0xbf,0xaa,0xb9,0xd8,0x42,0x00,0};
  16          ////CCHAR code SwitchD[] = {0xbf,0xaa,0xb9,0xd8,0x44,0x00,0};
  17          ////CCHAR code SwitchE[] = {0xbf,0xaa,0xb9,0xd8,0x45,0x00,0};
  18          ////CSTR code PageOptionSwitchEn[4] = {"SA","SB","SD","SE"}; 
  19          ////CSTR code PageOptionSwitchCn[4] = {SwitchA,SwitchB,SwitchD,SwitchE}; 
  20          
  21          //////mounting direction
  22          ////CCHAR code FaceUp[5] = {0xd5,0xfd,0xcf,0xf2,0}; 
  23          ////CCHAR code FaceDw[5] = {0xb7,0xb4,0xcf,0xf2,0} ;
  24          ////CCHAR code FaceLf[7] = {0xd7,0xf3,0xb2,0xe0,0xcf,0xf2,0};
  25          ////CCHAR code FaceLRi[7] = {0xd3,0xd2,0xb2,0xe0,0xcf,0xf2,0};
  26          ////CSTR code PageOptionDirectionCn[4] = {FaceUp,FaceDw,FaceLf,FaceLRi};
  27          ////CSTR code PageOptionDirectionEn[] = {"FU","FD","FR","FL"};
  28          
  29          ////CCHAR code NormalWings[7] = {0xb3,0xa3,0xb9,0xe6,0xd2,0xed,0} ;
  30          ////CCHAR code TriangleWings[7] = {0xc8,0xfd,0xbd,0xc7,0xd2,0xed,0};
  31          ////CCHAR code VWings[9] = {0x01,0x01,0xd0,0xcd,0xce,0xb2,0xd2,0xed,0};
  32          ////CSTR code PageOptionModelTypeCn[] = {NormalWings,TriangleWings,VWings}; 
  33          ////CSTR code PageOptionModelTypeEn[] = {"Normal","Delta Wing","V-tail"};
  34          
  35          ////CCHAR code GyroOff[9] = {0xb9,0xd8,0xb1,0xd5,0xc4,0xa3,0xca,0xbd,0};
  36          ////CCHAR code Normal[9] = {0xc6,0xd5,0xcd,0xa8,0xc4,0xa3,0xca,0xbd,0};
  37          ////CCHAR code Safe[9] = {0xb0,0xb2,0xc8,0xab,0xc4,0xa3,0xca,0xbd,0};
  38          ////CCHAR code Aerobitic[9] = {0xcb,0xf8,0xb6,0xa8,0xc4,0xa3,0xca,0xbd,0};
  39          ////CSTR code PageOptionFlyModeCn[4] = {GyroOff,Normal,Safe,Aerobitic};
  40          ////CSTR code PageOptionFlyModeEn[] = {"Gyro Off","Normal","safe","Aerobatic"};
  41          ////CSTR code PageOptionGainDirCn[] = {FaceUp,FaceDw};
  42          ////CSTR code PageOptionGainDirEn[] = {"Normal","Reverse"};
  43          
  44          ////CSTR xdata PageOptionGainDirDef[2];
  45          
  46          ////int16_t xdata AirParameter[14];
  47          
  48          //////chinese display
  49          
  50          ////CCHAR code AirZWCn[] = {0xb9,0xcc,0xb6,0xa8,0xd2,0xed,0xd4,0xf6,0xce,0xc8,0xd2,0xc7,0};
  51          ////CCHAR code RollGainCn[] = {0xba,0xe1,0xb9,0xf6,0xb8,0xd0,0xb6,0xc8,0};
  52          ////CCHAR code PitchGainCn[] = {0xb8,0xa9,0xd1,0xf6,0xb8,0xd0,0xb6,0xc8,0};
C51 COMPILER V9.56.0.0   PAGEMENU                                                          10/25/2016 09:41:34 PAGE 2   

  53          ////CCHAR code YawGainCn[] = {0xc6,0xab,0xba,0xbd,0xb8,0xd0,0xb6,0xc8,0};
  54          ////CCHAR code MountDirCn[] = {0xb0,0xb2,0xd7,0xb0,0xb7,0xbd,0xcf,0xf2,0};
  55          ////CCHAR code WingTypeCn[] = {0xd2,0xed,0xd0,0xcd,0xd1,0xa1,0xd4,0xf1,0};
  56          ////CCHAR code Position1Cn[] = {0xce,0xbb,0xd6,0xc3,0x30,0x00,0};
  57          ////CCHAR code Position2Cn[] = {0xce,0xbb,0xd6,0xc3,0x31,0x00,0};
  58          ////CCHAR code Position3Cn[] = {0xce,0xbb,0xd6,0xc3,0x32,0x00,0};
  59          
  60          ////CCHAR code RollOffetCn[] = {0xba,0xe1,0xb9,0xf6,0xb2,0xb9,0xb3,0xa5,0};
  61          ////CCHAR code PitchOffetCn[] = {0xba,0xe1,0xb9,0xf6,0xb2,0xb9,0xb3,0xa5,0};
  62          ////CCHAR code AngleCn[] = {0xbd,0xc7,0xb6,0xc8,0};
  63          ////CCHAR code AngularVelocityCn[] = {0xbd,0xc7,0xcb,0xd9,0xb6,0xc8,0};
  64          ////CCHAR code GainDirCn[] = {0xb7,0xbd,0xcf,0xf2,0};
  65          ////CCHAR code Switch[] = {0xbf,0xaa,0xb9,0xd8,0};
  66          ////CCHAR code FlyMode[] = {0xb7,0xc9,0xd0,0xd0,0xc4,0xa3,0xca,0xbd,0};
  67          
  68          ////CCHAR code ChineseCn[] = {0xd6,0xd0,0xce,0xc4,0};
  69          ////CCHAR code EnglishCn[] = {0xd3,0xa2,0xce,0xc4,0};
  70          ////CCHAR code LanguageCn[] = {0xd3,0xef,0xd1,0xd4,0};
  71          
  72          ////CSTR code PageOptionLanguageEn[] = {"Chinese","English"};
  73          ////CSTR code PageOptionLanguageCn[] = {ChineseCn,EnglishCn};
  74          ////CSTR xdata PageOptionLanguageDef[2];
  75          
  76          ////MENUITEM xdata MenuAirplaneStatility[] = {
  77          ////  {AirZWCn,0,0,0,9,0,0,0,"Flight Controller"},
  78          ////  {FlyMode,PageMenuFlyMode,0,0,0,0,0,0,"Fly Mode"},
  79          ////  {RollGainCn,PageMenuRollGain,0,0,0,0,0,0,"Roll Gain"},
  80          ////  {PitchGainCn,PageMenuPitchGain,0,0,0,0,0,0,"Pitch Gain"},
  81          ////  {YawGainCn,PageMenuYawGain,0,0,0,0,0,0,"Yaw Gain"},
  82          ////  {RollOffetCn,0,0,-20,+20,  &AirParameter[7],0,0,"Roll offet"},
  83          ////  {PitchOffetCn,0,0,-20,+20, &AirParameter[8],0,0,"Pitch offet"},
  84          ////  {MountDirCn,0,PageOptionDirectionDef,0,3,&AirParameter[0], 0,0,"Mounting"},
  85          ////  {WingTypeCn,0,PageOptionModelTypeDef,0,2,&AirParameter[12],0,0,"Wing"},
  86          ////  {LanguageCn,PageMenuLanguage,0,0,0,0,0,0,"Language:"},
  87          ////};
  88          
  89          ////int16_t xdata roll_dir;
  90          ////int16_t xdata pitch_dir;
  91          ////int16_t xdata yaw_dir;
  92          
  93          ////MENUITEM xdata MenuRoll[] = {
  94          ////  {RollGainCn,0,0,0,3,0,0,0,"Roll Gain"},
  95          ////  {GainDirCn,0,PageOptionGainDirDef,0,1,&roll_dir,0,0,"Direction"},
  96          ////  { AngleCn,0,0,0,100,&AirParameter[1],0,0,"Angle Gain"},
  97          ////  { AngularVelocityCn,0,0,0,100,&AirParameter[4],0,0,"Rate Gain"},
  98          ////};
  99          
 100          ////MENUITEM xdata MenuPitch[] = {
 101          ////  {PitchGainCn,0,0,0,3,0,0,0,"Pitch Gain"},
 102          ////  {GainDirCn,0,PageOptionGainDirDef,0,1,&pitch_dir,0,0,"Direction"},
 103          ////  {AngleCn,0,0,0,+100,&AirParameter[2],0,0,"Angle Gain"},
 104          ////  {AngularVelocityCn,0,0,0,+100,&AirParameter[5],0,0,"Rate Gain"},
 105          ////};
 106          
 107          ////MENUITEM xdata MenuYaw[] = {
 108          ////  {YawGainCn,0,0,0,3,0,0,0,"Pitch Gain"},
 109          ////  {GainDirCn,0,PageOptionGainDirDef,0,1,&yaw_dir,0,0,"Direction"},
 110          ////  {AngleCn,0,0,0,+100,&AirParameter[3],0,0,"Angle Gain"},
 111          ////  {AngularVelocityCn,0,0,0,+100,&AirParameter[6],0,0,"Rate Gain"},
 112          ////};
 113          
 114          ////MENUITEM xdata MenuFlyMode[] = {
C51 COMPILER V9.56.0.0   PAGEMENU                                                          10/25/2016 09:41:34 PAGE 3   

 115          ////    {FlyMode,0,0,0,4,0,0,0,"Fly Mode"},
 116          ////    {Switch,0,PageOptionSwitchDef,0,3,&AirParameter[13],0,0,"Sw Select"},
 117          ////    {Position1Cn,0,PageOptionFlyModeDef, 0, 3,&AirParameter[9] , 0,0,"SW-P1" },
 118          ////    {Position2Cn,0,PageOptionFlyModeDef, 0, 3,&AirParameter[10] , 0,0,"SW-P2" },
 119          ////    {Position3Cn,0,PageOptionFlyModeDef, 0, 3,&AirParameter[11] , 0,0,"SW-P3" },
 120          ////};
 121          
 122          ////MENUITEM  MenuLanguage[3] = { 
 123          ////  {"Language",0,0,0,2,0,0,0,"Language"},
 124          ////  {"Language",0,0,0,0,0,0,0,"Chinese"},
 125          ////  { "Language",0,0,0,0,0,0,0,"English"},
 126          ////};
 127          
 128          ////static int16_t xdata sum_pre;
 129          ////static int16_t xdata sum;
 130          ////static void detect_value_change(int16_t *p_data,uint8_t size)
 131          ////{
 132          
 133          ////  uint8_t i  ;
 134          ////  for( i = 0 ; i<size ; i++)
 135          ////  {
 136          ////    sum+= p_data[i] ;
 137          ////  }
 138          ////  sum=sum + roll_dir + pitch_dir + yaw_dir ;
 139          //////  if(!UART_TX_flag){
 140          //////    if(sum != sum_pre){
 141          //////      sum_pre = sum ;
 142          //////      UART_TX_flag |= WRITE_COMMAND ;
 143          //////    }
 144          //////  }
 145          ////  sum = 0 ;
 146          ////}
 147          
 148          ////SI_SEGMENT_VARIABLE( flash_value ,uint8_t,SI_SEG_IDATA) ;
 149          ////SI_SEGMENT_VARIABLE( UART_TX_flag ,uint8_t,SI_SEG_IDATA) ;
 150          
 151          ////uint32_t PageMenuAirStable(uint8_t event)
 152          ////{
 153          ////  static MENUSTAT ms;
 154          
 155          ////  if(event==PV_INIT){
 156          //////    UART_TX_flag |= READ_COMMAND ;
 157          //////    flash_value = 0 ;
 158          ////    LcdDrawClr(0);
 159          ////    if(!ms.Init)
 160          ////    {
 161          ////      ms.iFocus=ms.iStart=0;
 162          ////      ms.Init=1;
 163          ////    }
 164          ////    ms.Total=MenuAirplaneStatility[0].Max;
 165          ////    ms.DrawMask=PD_ALL;
 166          ////    
 167          
 168          ////    return 1;
 169          ////  }
 170          
 171          //////  if((!UART_TX_flag)&&flash_value){
 172          //////    flash_value = 0 ;
 173          //////    ms.DrawMask |= PD_VALUE|PD_LIST ;
 174          //////  }
 175          
 176          
C51 COMPILER V9.56.0.0   PAGEMENU                                                          10/25/2016 09:41:34 PAGE 4   

 177          ////  detect_value_change(AirParameter, sizeof(AirParameter)/sizeof(AirParameter[0]));
 178          
 179          ////  PageMenuProc(MenuAirplaneStatility,&ms);
 180          
 181          ////  if(BtnTstDown(BTN_ENT))
 182          ////  {
 183          //////    UART_TX_flag |= READ_COMMAND ;
 184          //////    if(MenuAirplaneStatility[ms.iFocus+1].SubItem)
 185          //////    {
 186          //////      PageEnter((PAGEPROC)MenuAirplaneStatility[ms.iFocus+1].SubItem,PV_INIT);
 187          //////    }else{
 188          //////      Ent_flag = 1 ;
 189          //////      ms.DrawMask |= PD_VALUE ;
 190          //////    }
 191          ////  }
 192          
 193          ////  if(BtnTstDown(BTN_EXT))
 194          ////  {
 195          //////    Ent_flag = 0 ;
 196          //////    UART_TX_flag = 0 ;
 197          //////    PageReturn(PV_INIT);
 198          ////  }
 199          
 200          ////  return 0;
 201          ////}
 202          
 203          ////uint32_t PageMenuRollGain(uint8_t event)
 204          ////{
 205          ////  static MENUSTAT ms;
 206          ////  
 207          ////  if(event==PV_INIT)
 208          ////  {
 209          ////    LcdDrawClr(0);;
 210          ////    if(!ms.Init)
 211          ////    {
 212          ////      ms.iFocus=ms.iStart=0;
 213          ////      ms.Init=1;
 214          ////    }
 215          ////    ms.Total=MenuRoll[0].Max;
 216          ////    ms.DrawMask=PD_ALL;
 217          
 218          ////    return 1;
 219          ////  }
 220          
 221          ////  detect_value_change(AirParameter, sizeof(AirParameter)/sizeof(AirParameter[0]));
 222          
 223          ////  PageMenuProc(MenuRoll, &ms);
 224          
 225          //////  if(KeyTstDown(KEY_EXT))
 226          //////  {
 227          //////    if(!Ent_flag){
 228          //////        PageReturn(PV_INIT);
 229          //////    }
 230          //////    Ent_flag = 0 ;
 231          //////    ms.DrawMask |= PD_VALUE;
 232          //////  }
 233          
 234          //////  if(KeyTstDown(KEY_ENT)){
 235          //////    Ent_flag = 1 ;
 236          //////    ms.DrawMask |= PD_VALUE ;
 237          //////  }
 238          
C51 COMPILER V9.56.0.0   PAGEMENU                                                          10/25/2016 09:41:34 PAGE 5   

 239          
 240          ////  return 0;
 241          
 242          ////}
 243          
 244          ////uint32_t PageMenuPitchGain(uint8_t event)
 245          ////{
 246          ////  static MENUSTAT ms;
 247          
 248          ////  if(event==PV_INIT)
 249          ////  {
 250          ////    LcdDrawClr(0);
 251          ////    if(!ms.Init)
 252          ////    {
 253          ////      ms.iFocus=ms.iStart=0;
 254          ////      ms.Init=1;
 255          ////    }
 256          ////    ms.Total=MenuPitch[0].Max;
 257          ////    ms.DrawMask=PD_ALL;
 258          ////    return 1;
 259          ////  }
 260          
 261          
 262          //////  detect_value_change(AirParameter, sizeof(AirParameter)/sizeof(AirParameter[0]));
 263          
 264          ////  PageMenuProc(MenuPitch,&ms);
 265          
 266          //////  if(KeyTstDown(KEY_EXT))
 267          //////  {
 268          //////    if(!Ent_flag){
 269          //////      PageReturn(PV_INIT);
 270          //////    }
 271          //////    Ent_flag = 0 ;
 272          //////    ms.DrawMask |= PD_VALUE ;
 273          //////  }
 274          
 275          //////  if(KeyTstDown(KEY_ENT)){
 276          //////    Ent_flag = 1 ;
 277          //////    ms.DrawMask |= PD_VALUE ;
 278          //////  }
 279          ////  return 0;
 280          
 281          ////}
 282          
 283          ////uint32_t PageMenuYawGain(uint8_t event)
 284          ////{
 285          ////  static MENUSTAT ms;
 286          ////  
 287          ////  if(event==PV_INIT)
 288          ////  {
 289          ////    LcdDrawClr(0);
 290          ////    if(!ms.Init)
 291          ////    {
 292          ////      ms.iFocus=ms.iStart=0;
 293          ////      ms.Init=1;
 294          ////    }
 295          ////    ms.Total=MenuYaw[0].Max;
 296          ////    ms.DrawMask=PD_ALL;
 297          ////    return 1;
 298          ////  }
 299          
 300          ////  detect_value_change(AirParameter, sizeof(AirParameter)/sizeof(AirParameter[0]));
C51 COMPILER V9.56.0.0   PAGEMENU                                                          10/25/2016 09:41:34 PAGE 6   

 301          
 302          ////  PageMenuProc(MenuYaw,&ms);
 303          
 304          ////  if(BtnTstDown(BTN_EXT)){
 305          //////    if(!Ent_flag){
 306          //////      PageReturn(PV_INIT);//Exit Page;
 307          //////    }
 308          //////    Ent_flag = 0 ;// Exit  Edit
 309          //////    ms.DrawMask |= PD_VALUE ;
 310          ////  }
 311          
 312          ////  if(BtnTstDown(BTN_ENT)){
 313          //////    Ent_flag = 1 ;  //Enter Edit
 314          //////    ms.DrawMask |= PD_VALUE;
 315          ////  }
 316          
 317          ////  return 0;
 318          
 319          ////}
 320          
 321          ////uint32_t PageMenuFlyMode(uint8_t event)
 322          ////{
 323          ////  static MENUSTAT ms;
 324          ////  if(event==PV_INIT)
 325          ////  {
 326          ////    LcdDrawClr(0);
 327          ////    if(!ms.Init)
 328          ////    {
 329          ////      ms.iFocus=ms.iStart=0;
 330          ////      ms.Init=1;
 331          ////    }
 332          ////    ms.Total=MenuFlyMode[0].Max;
 333          ////    ms.DrawMask=PD_ALL;
 334          ////    return 1;
 335          ////  }
 336          
 337          ////  detect_value_change(AirParameter, sizeof(AirParameter)/sizeof(AirParameter[0]));
 338          
 339          ////  PageMenuProc(MenuFlyMode,&ms);
 340          
 341          ////  if(BtnTstDown(BTN_EXT)){
 342          //////    if(!Ent_flag){
 343          //////      PageReturn(PV_INIT);
 344          //////    }
 345          //////    Ent_flag = 0 ;
 346          //////    ms.DrawMask |= PD_VALUE;
 347          ////  }
 348          
 349          ////  if(BtnTstDown(BTN_ENT)){
 350          //////    Ent_flag = 1 ;
 351          //////    ms.DrawMask |= PD_VALUE ;
 352          ////  }
 353          
 354          ////  return 0;
 355          ////}
 356          
 357          //uint32_t PageMenuLanguage(uint8_t event)
 358          //{
 359          ////  static MENUSTAT ms;
 360          
 361          ////  if(event == PV_INIT)
 362          ////  {
C51 COMPILER V9.56.0.0   PAGEMENU                                                          10/25/2016 09:41:34 PAGE 7   

 363          ////    LcdDrawClr(0);
 364          ////    if(!ms.Init){
 365          ////      ms.iFocus=ms.iStart=0;
 366          ////      ms.Init=1;
 367          ////    }
 368          ////    ms.Total=MenuLanguage[0].Max;
 369          ////    ms.DrawMask=PD_ALL;
 370          ////  }
 371          
 372          ////  PageMenuProc(MenuLanguage,&ms);
 373          
 374          ////  if(BtnTstDown(BTN_ENT))
 375          ////  {
 376          //////    language = ms.iFocus  ;
 377          //////    PageReturn(PV_INIT);
 378          ////  }
 379          
 380          ////  if(BtnTstDown(BTN_EXT)){
 381          //////    PageReturn(PV_INIT) ;
 382          ////  }
 383          
 384          //  LcdDrawBmpToArray(0, 0, PageMainBmp);
 385          //  LcdDrawBufferRefresh();
 386          
 387          //  return 0 ;
 388          //}
 389          
C51 COMPILER V9.56.0.0   PAGEMENU                                                          10/25/2016 09:41:34 PAGE 8   

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
