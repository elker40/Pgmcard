C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE ESCCTRL
OBJECT MODULE PLACED IN .\Objects\EscCtrl.obj
COMPILER INVOKED BY: D:\MyProKits\MucKits\Keil_C51_Rev956\C51\BIN\C51.EXE ..\..\SrcCode\Logic\Core\EscCtrl.c LARGE OMF2 
                    -OPTIMIZE(0,SPEED) BROWSE INCDIR(..\..\SrcCode\Bsp\Inc;..\..\SrcCode\Logic\Inc;..\..\SrcCode\Middle\Gui\Inc;..\..\SrcCode
                    -\Middle\Input\Inc;..\..\SdkTool\Si8051Base;..\..\SdkTool\EFM8UB2\Inc;..\..\SdkTool\EFM8UB2\Perip\Inc;..\..\SdkTool\EFM8U
                    -B2\Xpress\Inc) DEBUG CODE LISTINCLUDE SYMBOLS PRINT(.\Listings\EscCtrl.lst) TABS(2) PREPRINT(.\Listings\EscCtrl.i) OBJEC
                    -T(.\Objects\EscCtrl.obj)

line level    source

   1          //////-----------------------------------------------------------------------------
   2          ////// ESC_LCD_PGM_BOX.c
   3          //////-----------------------------------------------------------------------------
   4          ////// Copyright (C) 2016 Detrum Intelligence.
   5          //////
   6          //////
   7          ////// Author:Liuyuhang
   8          //////
   9          ////// Rev 0.1
  10          ////// 2016.09.13 ÊµÏÖÁËÒº¾§±à³ÌºÐ×÷Îªµçµ÷»ù±¾±à³Ì¹¦ÄÜµÄ¿ò¼Ü
  11          ////// 2016.09.14 »ù±¾ÊµÏÖÁË±à³ÌºÐ¶ÔSkylord Adv 120Aµçµ÷ËùÓÐ²ÎÊýµ÷²ÎµÄ¹¦ÄÜ
  12          ////// 2016.09.18 »ù±¾ÊµÏÖµç³ØµçÑ¹¼ì²â¹¦ÄÜ
  13          ////// 2016.09.19 ¶ÔÏÔÊ¾ÄÚÈÝµÈÓÅ»¯
  14          ////// 2016.09.21 Íê³Éµçµ÷ÔËÐÐ²ÎÊýÏÔÊ¾
  15          ////// 2016.09.26 ÓÅ»¯´úÂë
  16          ////// 2016.09.28 ½«½ø½ÇÊýÔö¼Óµ½5¸ö
  17          ////// 2016.09.30 Ôö¼Ó°æ±¾Çø·Ö
  18          ////// 2016.10.10 ÐÞ¸ÄµÍÑ¹±£»¤²¿·Ö´úÂë£¬µÚÒ»ÏîÎª²»Ê¹ÄÜ±£»¤
  19          //////-----------------------------------------------------------------------------
  20          ////// Includes
  21          //////-----------------------------------------------------------------------------
  22          
  23          ////#include <SI_EFM8UB2_Register_Enums.h>
  24          ////#include "InitDevice.h"
  25          ////#include "stdio.h"
  26          ////#include "ziku.h"
  27          
  28          ////#define uchar unsigned char 
  29          ////#define uint unsigned int
  30          ////#define ulong unsigned long
  31          //////-----------------------------------------------------------------------------
  32          ////// Pin Definitions
  33          //////-----------------------------------------------------------------------------
  34          
  35          ////SI_SBIT (SW4,          SFR_P0, 0);          // ¡°OK¡±°´¼ü
  36          ////SI_SBIT (SW3,          SFR_P0, 1);          // ¡°R/P¡±°´¼ü
  37          ////SI_SBIT (LCD_RS,       SFR_P0, 2);
  38          ////SI_SBIT (LCD_SCK,      SFR_P0, 3);
  39          
  40          ////SI_SBIT (LCD_SDA,      SFR_P0, 5);
  41          ////SI_SBIT (LCD_CS,       SFR_P0, 6);
  42          ////SI_SBIT (ADC_VERF,     SFR_P0, 7);
  43          
  44          ////SI_SBIT (BAT_AD9,      SFR_P1, 2);
  45          ////SI_SBIT (LCD_RST,      SFR_P1, 3);
  46          ////SI_SBIT (SW2,          SFR_P1, 4);          // ¡°Value¡±°´¼ü
  47          ////SI_SBIT (SW1,          SFR_P1, 5);          // ¡°ITEM¡±°´¼ü
  48          
  49          ////SI_SBIT (RC_OUT,       SFR_P2, 0);          // µçµ÷±à³Ì½Ó¿Ú
  50          ////SI_SBIT (BAT_AD8,      SFR_P2, 1);
  51          ////SI_SBIT (BAT_AD7,      SFR_P2, 2);
C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 2   

  52          ////SI_SBIT (BAT_AD6,      SFR_P2, 3);
  53          ////SI_SBIT (BAT_AD5,      SFR_P2, 4);
  54          ////SI_SBIT (BAT_AD4,      SFR_P2, 5);
  55          ////SI_SBIT (BAT_AD3,      SFR_P2, 6);
  56          ////SI_SBIT (BAT_AD2,      SFR_P2, 7);
  57          
  58          //extern char code ziku1[95][16];
  59          
  60          //void Timer_Init (void);
  61          //void pgm_para_display (void);
  62          
  63          //bit pgmcard_initiate_flag = 1;
  64          //bit pgmcard_state_flag = 0;
  65          //bit pwm_on_flag = 0;
  66          //bit p00_receive_enable = 0;
  67          //bit pulse_cnt_start_flag=0;
  68          
  69          //bit pca0_button_lock_flag=0;
  70          //bit pca1_button_lock_flag=0;
  71          //bit pca0_t1_run_flag=0;
  72          //bit pca1_t1_run_flag=0;
  73          
  74          
  75          //char pulse_num = 0;
  76          //char pluse_cnt = 1;
  77          //char pgm_card_num=1;
  78          //char initiate_cnt =0;
  79          //char pgmcard_row_num=1;              
  80          //      
  81          //char channel=1;
  82          //unsigned char esc_pulse_cnt=0;
  83          //char para_num=1;
  84          //char t1_cnt=0;
  85          
  86          //static float c[9];
  87          //unsigned char pgmcard_line_num[26];
  88          
  89          ///*ÑÓÊ±*/
  90          //void delay(int i)               
  91          //{
  92          // int j,k;
  93          // for(j=0;j<i;j++)
  94          //// for(k=0;k<110;k++);
  95          //  for(k=0;k<55;k++);
  96          //}
  97          
  98          ///*ÑÓÊ±*/
  99          //void delay_us(int i)               
 100          //{
 101          // int j,k;
 102          // for(j=0;j<i;j++)
 103          // //for(k=0;k<10;k++);
 104          //  for(k=0;k<1;k++);
 105          //}
 106          
 107          
 108          ////void Delay_ms(uint8_t m)  
 109          ////{
 110          ////    uint8_t a1,b1,c1;
 111          
 112          ////    for(a1=0;a1<m;a1++)
 113          ////    {
C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 3   

 114          ////        for(b1=0;b1<16;b1++)
 115          ////        {
 116          ////            for(c1=0;c1<100;c1++)
 117          ////            {
 118          ////                ;
 119          ////            }
 120          ////        }
 121          ////    }
 122          ////}
 123          
 124          
 125          //////****************************************************************************
 126          ////void main (void)
 127          ////{ 
 128          ////    int b1,b2=0;
 129          ////    uchar s[20];
 130          ////    
 131          ////    enter_DefaultMode_from_RESET();
 132          ////  
 133          ////  
 134          ////    TCON = 0x00;                        // Íâ²¿ÖÐ¶Ï0¡¢1µçÆ½´¥·¢
 135          ////    IT01CF = 0x01;                      // INT0 active low; INT0 on P0.1   SW3
 136          ////                                        // INT1 active low; INT1 on P0.0   SW4
 137          
 138          ////    XBR1    = 0x42;                     // ·Ö±ðÁ¬½ÓCEX0¡¢CEX1µ½P1.4¡¢P1.5
 139          ////                                        // ²ÎÊý£¨×óÓÒ£©Ñ¡Ôñ¼üÁ¬½Óµ½P1.5,ÏîÄ¿£¨ÉÏÏÂ£©Ñ¡Ôñ¼üÁ¬½Óµ½P1.4
 140          ////                                        // Enable crossbar and enable
 141          
 142          //////    PCA0CPM0 = 0x11;                    // PCA Module 0 ²¶×½ÏÂ½µÑØ,Ê¹ÄÜÖÐ¶Ï
 143          //////    PCA0CPM1 = 0x11;                    // PCA Module 1 ²¶×½ÏÂ½µÑØ,Ê¹ÄÜÖÐ¶Ï
 144          ////  
 145          ////    Timer_Init ();                      
 146          
 147          //////    IE_EX0 = 1;                         // Enable INT0 interrupts
 148          //////    IE_EX1 = 1;                         // Enable INT1 interrupts
 149          ////    IE_ET0 = 1;                        
 150          ////    IE_ET1 =1;                             
 151          ////    IE_ET2 = 1;                         
 152          ////    EIE1 |= 0x10;                       // Enable PCA interrupts
 153          ////    
 154          ////    IP_PT1=1;                              // ??T1??????
 155          ////    IE_EA = 1;                          // ?????? 
 156          ////  
 157          ////    // ³õÊ¼»¯Òº¾§ÏÔÊ¾
 158          ////    initial_lcd();
 159          ////    clear_screen();                 //clear all dots
 160          ////    display_string(2,20,"Detrum Tech");
 161          ////    display_string(5,20,"ESC-PGM-BOX");
 162          
 163          ////    RC_OUT=0;                      
 164          ////    Delay_ms(150);                        // µÈ´ý150msÖ®ºó£¬Æô¶¯T0Êä³öÁ½¸ö³õÊ¼»¯Âö³åÐòÁÐ£¬Ã¿¸öÀïÃæ5¸öÂö³
             -å
 165          
 166          ////    
 167          ////    
 168          ////    TCON_TR0=1;                         // Æô¶¯¶¨Ê±Æ÷0
 169          ////    while(initiate_cnt<2) ;             // T2·¢³öÊ¹µçµ÷½øÈë±à³ÌÄ£Ê½µÄ³õÊ¼»¯Âö³å£¬¹²Á½×é£¬Ã¿×éÎå¸öÂö³å£
             -¬Ö®ºóÌø³ö³õÊ¼»¯Ä£Ê½¡£
 170          ////    TCON_TR0=0;                         // ¹Ø±Õ¶¨Ê±Æ÷0
 171          ////    pgmcard_initiate_flag=0;
 172          
 173          ////    
C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 4   

 174          ////    IE_EA=0;
 175          ////     
 176          ////// 2.½ÓÊÕµçµ÷ÄÚ²¿´æ´¢²ÎÊý
 177          ////  
 178          ////    P2SKIP = 0xFE;                      // Crossbar²»Ìø¹ýP2.0
 179          ////    XBR1    = 0x43;                     // ·Ö±ðÁ¬½ÓCEX0¡¢CEX1¡¢CEX2µ½P1.4¡¢P1.5¡¢P2.0
 180          
 181          //// 
 182          ////    PCA0CPM2 |= 0x21;                   // PCA Module 2 ²¶×½µçµ÷·¢³öµÄÉÏÉýÑØ£¬Ê¹ÄÜÖÐ¶Ï
 183          ////    PCA0CN0_CCF2=0;
 184          
 185          ////    p00_receive_enable = 1;
 186          
 187          ////    TH0 = 128;
 188          ////    TL0 = 0;
 189          ////    
 190          ////    IE_EA=1;
 191          ////    Delay_ms(200);
 192          ////    Delay_ms(200);
 193          ////    Delay_ms(200);
 194          ////    Delay_ms(200);
 195          ////    Delay_ms(200);
 196          ////    Delay_ms(200);                       // µÈ´ýµçµ÷·¢³ö±à³ÌÂö³å    
 197          ////    IE_EA=0;
 198          
 199          ////    
 200          ////// 3.½øÐÐ±à³ÌÄ£Ê½
 201          //// 
 202          ////    P2SKIP = 0xFF;                      // CrossbarÌø¹ýP2.0
 203          ////    PCA0CPM2 = 0x00;                    // ½ûÖ¹PCA2ÖÐ¶Ï
 204          ////    XBR1    = 0x42;                     // ·Ö±ðÁ¬½ÓCEX0 ¡¢CEX1µ½P1.4¡¢P1.5
 205          
 206          ////   
 207          ////    IE_EA = 1;                          // Ê¹ÄÜÈ«¾ÖÖÐ¶Ï
 208          ////   
 209          ////    EIE1 |= 0x08;                       // Ê¹ÄÜADC×ª»»½áÊøÖÐ¶Ï
 210          ////    ADC0CN0_ADBUSY=1;      //Æô¶¯ADC
 211          ////      
 212          ////    Delay_ms(200);
 213          ////    Delay_ms(200);
 214          ////    Delay_ms(200);
 215          ////    Delay_ms(200);
 216          ////    Delay_ms(200);    
 217          ////    Delay_ms(200);
 218          ////    
 219          
 220          ////    if(c[1]>0.5)
 221          ////    {
 222          
 223          ////            while(1)
 224          ////            {       
 225          ////            IE_EA = 0;        // ÔÚµç³ØµçÑ¹ÏÔÊ¾Á÷³ÌÖÐ½ûÖ¹ÆäËûÖÐ¶Ï      
 226          ////              
 227          ////            clear_screen(); 
 228          ////            sprintf(s,"1:%02.2fV,2:%02.2fV", c[0],c[1]);       
 229          ////            display_string(1,1,s);
 230          ////            sprintf(s,"3:%02.2fV,4:%02.2fV", c[2],c[3]);
 231          ////            display_string(3,1,s);
 232          ////            sprintf(s,"5:%02.2fV,6:%02.2fV", c[4],c[5]);
 233          ////            display_string(5,1,s);  
 234          ////            sprintf(s,"7:%02.2fV,8:%02.2fV", c[6],c[7]);
 235          ////            display_string(7,1,s);         
C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 5   

 236          ////            Delay_ms(250);
 237          ////            Delay_ms(250);
 238          ////            Delay_ms(250);
 239          ////            Delay_ms(250);
 240          ////            Delay_ms(250);
 241          ////            clear_screen(); 
 242          ////            Delay_ms(100);
 243          ////            sprintf(s,"%02.2fV", c[8]);
 244          ////            display_string(2,1,"Total Volt:");  
 245          ////            display_string(4,1,s);
 246          ////            Delay_ms(250);
 247          ////            Delay_ms(250);
 248          ////            Delay_ms(250);
 249          ////            Delay_ms(250);
 250          ////            Delay_ms(250);
 251          ////            }
 252          ////    }
 253          ////    
 254          ////    else
 255          ////    {
 256          ////        b1=(int)pgmcard_line_num[22];
 257          ////        b2=(int)pgmcard_line_num[23];     
 258          ////  
 259          ////        clear_screen();                 //clear all dots  
 260          ////        if(b2==1)
 261          ////        {
 262          ////        display_string(2,20,"Skylord Adv");   
 263          ////        sprintf(s,"FW Version:1.%d",b1);
 264          ////        }
 265          ////        if(b2==2)
 266          ////        { 
 267          ////        display_string(2,40,"Car Go");    
 268          ////        sprintf(s,"FW Version:1.%d",b1);  
 269          ////        }
 270          ////        display_string(4,8,s);  
 271          ////    } 
 272          ////    
 273          ////    Delay_ms(200);
 274          ////    Delay_ms(200);
 275          ////    Delay_ms(200);    
 276          ////    Delay_ms(200);
 277          ////    Delay_ms(200);
 278          ////    Delay_ms(200);
 279          ////    
 280          ////    pgm_para_display();
 281          
 282          ////    PCA0CPM0 = 0x11;                    // PCA Module 0 ²¶×½ÏÂ½µÑØ,Ê¹ÄÜÖÐ¶Ï
 283          ////    PCA0CPM1 = 0x11;                    // PCA Module 1 ²¶×½ÏÂ½µÑØ,Ê¹ÄÜÖÐ¶Ï
 284          ////  
 285          ////    IE_EX0 = 1;                         // Enable INT0 interrupts
 286          ////    IE_EX1 = 1;                         // Enable INT1 interrupts
 287          ////    
 288          ////    while (1)
 289          ////    {
 290          
 291          ////    }                                   // end of while(1)
 292          ////  
 293          ////}                                      // end of main()
 294          
 295          
 296          
 297          ////void Timer_Init (void)
C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 6   

 298          ////{
 299          ////   // ÏµÍ³Ê±ÖÓ48MHZ£¬4·ÖÆµºó³ÉÎª12MHz¸ø¸÷Ê±ÖÓ                        
 300          ////   TH0 = 225;                           // Timer0 8msÖÐ¶ÏÖÜÆÚ
 301          ////   TL0 = 0;
 302          ////  
 303          ////   TH1 = 200; 
 304          ////   TL1 = 0;
 305          
 306          ////   CKCON0  = 0x00;                      // Timer2 clocked based on T2XCLK;
 307          ////                                        // Timer0 set for clk/12  T0Ê±ÖÓÎª12MHzÔÙ·ÖÆµ12
 308          ////   TMOD = 0x11;                         // Timer0?1 16bit
 309          
 310          
 311          ////   TMR2RLH=255;
 312          ////   TMR2RLL=236;
 313          ////  
 314          ////   //Timer2: clk/12 for 128us and 32ms interrupts T2Ê±ÖÓÎª12MHzÔÙ·ÖÆµ12
 315          ////   TMR2CN0=0x00;    //Timer2 low counter interrups disabled
 316          ////}
 317          
 318          ////void pgm_line_num_judge(void)
 319          ////{
 320          ////    pgmcard_line_num[pgmcard_row_num]++;
 321          ////    
 322          ////    if(pgmcard_line_num[23]==1)        // ÈôÎªSkylord Adv¿ÕÄ£µçµ÷
 323          ////    {     
 324          ////    if(pgmcard_row_num==1||pgmcard_row_num==11)
 325          ////    {
 326          ////        if(pgmcard_line_num[pgmcard_row_num]==5)
 327          ////        pgmcard_line_num[pgmcard_row_num]=1;
 328          ////    }
 329          ////    if(pgmcard_row_num==3||pgmcard_row_num==14||pgmcard_row_num==15)
 330          ////    {
 331          ////        if(pgmcard_line_num[pgmcard_row_num]==3)
 332          ////        pgmcard_line_num[pgmcard_row_num]=1;
 333          ////    }
 334          ////    if(pgmcard_row_num==7||pgmcard_row_num==8)
 335          ////    {
 336          ////        if(pgmcard_line_num[pgmcard_row_num]==10)
 337          ////        pgmcard_line_num[pgmcard_row_num]=1;
 338          ////    }
 339          ////    if(pgmcard_row_num==2)
 340          ////    {
 341          ////        if(pgmcard_line_num[pgmcard_row_num]==7)
 342          ////        pgmcard_line_num[pgmcard_row_num]=1;
 343          ////    } 
 344          ////    if(pgmcard_row_num==4)
 345          ////    {
 346          ////        if(pgmcard_line_num[pgmcard_row_num]==13)
 347          ////        pgmcard_line_num[pgmcard_row_num]=1;
 348          ////    } 
 349          ////    if(pgmcard_row_num==5)
 350          ////    {
 351          ////        if(pgmcard_line_num[pgmcard_row_num]==32)
 352          ////        pgmcard_line_num[pgmcard_row_num]=1;
 353          ////    }   
 354          ////    if(pgmcard_row_num==6)
 355          ////    {
 356          ////        if(pgmcard_line_num[pgmcard_row_num]==23)
 357          ////        pgmcard_line_num[pgmcard_row_num]=1;
 358          ////    }
 359          ////    if(pgmcard_row_num==9)
C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 7   

 360          ////    {
 361          ////        if(pgmcard_line_num[pgmcard_row_num]==91)
 362          ////        pgmcard_line_num[pgmcard_row_num]=1;
 363          ////    }
 364          ////    if(pgmcard_row_num==10||pgmcard_row_num==13)
 365          ////    {
 366          ////        if(pgmcard_line_num[pgmcard_row_num]==6)
 367          ////        pgmcard_line_num[pgmcard_row_num]=1;
 368          ////    }
 369          ////    if(pgmcard_row_num==12)
 370          ////    {
 371          ////        if(pgmcard_line_num[pgmcard_row_num]==101)
 372          ////        pgmcard_line_num[pgmcard_row_num]=1;
 373          ////    }
 374          ////    }
 375          
 376          ////    if(pgmcard_line_num[23]==2)                 // ÈôÎª³µÄ£µçµ÷
 377          ////    {
 378          ////    if(pgmcard_row_num==1||pgmcard_row_num==4||pgmcard_row_num==5||pgmcard_row_num==7)
 379          ////    {
 380          ////        if(pgmcard_line_num[pgmcard_row_num]==3)
 381          ////        pgmcard_line_num[pgmcard_row_num]=1;
 382          ////    }
 383          ////    if(pgmcard_row_num==2)
 384          ////    {
 385          ////        if(pgmcard_line_num[pgmcard_row_num]==5)
 386          ////        pgmcard_line_num[pgmcard_row_num]=1;
 387          ////    }
 388          ////    if(pgmcard_row_num==3)
 389          ////    {
 390          ////        if(pgmcard_line_num[pgmcard_row_num]==13)
 391          ////        pgmcard_line_num[pgmcard_row_num]=1;
 392          ////    }
 393          ////    if(pgmcard_row_num==6||pgmcard_row_num==8)
 394          ////    {
 395          ////        if(pgmcard_line_num[pgmcard_row_num]==6)
 396          ////        pgmcard_line_num[pgmcard_row_num]=1;
 397          ////    } 
 398          ////    if(pgmcard_row_num==9)
 399          ////    {
 400          ////        if(pgmcard_line_num[pgmcard_row_num]==9)
 401          ////        pgmcard_line_num[pgmcard_row_num]=1;
 402          ////    }     
 403          ////    }
 404          ////    
 405          ////}
 406          
 407          ////void pgm_para_display(void)
 408          ////{
 409          ////    uchar *s;
 410          ////    int i1,i2;
 411          ////    float k1;
 412          ////  
 413          ////  
 414          ////    if(pgmcard_line_num[23]==1)     // ÈôÎªSkylord Adv¿ÕÄ£µçµ÷
 415          ////    { 
 416          ////    switch(pgmcard_row_num)
 417          ////    {
 418          ////        case 1:
 419          ////                clear_screen();                 //clear all dots
 420          ////                display_string(2,1,"1: Flight Mode");
 421          ////                if(pgmcard_line_num[1]==1)
C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 8   

 422          ////                display_string(5,1,"1: Fixed-Wing");
 423          ////                if(pgmcard_line_num[1]==2)
 424          ////                display_string(5,1,"2: Heli-LineTH");
 425          ////                if(pgmcard_line_num[1]==3)
 426          ////                display_string(5,1,"*3: Heli-ElfGov");
 427          ////                if(pgmcard_line_num[1]==4)
 428          ////                display_string(5,1,"4: Heli-StoGov");
 429          ////            break;
 430          
 431          ////        case 2:
 432          ////                clear_screen();                 //clear all dots
 433          ////                display_string(2,1,"2: Lipo Cells");              
 434          ////                if(pgmcard_line_num[2]==1)
 435          ////                display_string(5,1,"*1: Auto-Calc");      
 436          ////                else
 437          ////                { 
 438          ////                i1=i2=(int)(pgmcard_line_num[2]);
 439          ////                sprintf(s,"%d: %dS",i1,i2);
 440          ////                display_string(5,1,s);
 441          ////                }
 442          ////            break;
 443          
 444          ////        case 3:
 445          ////                clear_screen();                 //clear all dots
 446          ////                display_string(2,1,"3: Cutoff Type");
 447          ////                if(pgmcard_line_num[3]==1)
 448          ////                display_string(5,1,"*1: Soft Cutoff");
 449          ////                if(pgmcard_line_num[3]==2)
 450          ////                display_string(5,1,"2: Hard Cutoff");
 451          ////            break;
 452          
 453          ////        case 4:
 454          ////                clear_screen();                 //clear all dots
 455          ////                display_string(2,1,"4: Cutoff Volt");
 456          ////                if(pgmcard_line_num[4]==1)
 457          ////                display_string(5,1,"1: Disabled");
 458          ////                else
 459          ////                { 
 460          ////                i1=(int)(pgmcard_line_num[4]);
 461          ////                k1=(27+pgmcard_line_num[4]-1)/10;   
 462          ////                if(pgmcard_line_num[4]==4)
 463          ////                sprintf(s,"*%d: %02.1fV",i1,k1);  
 464          ////                else  
 465          ////                sprintf(s,"%d: %02.1fV",i1,k1);
 466          ////                display_string(5,1,s);
 467          ////                }               
 468          ////            break;
 469          
 470          ////        case 5:        
 471          ////                clear_screen();                 //clear all dots
 472          ////                display_string(2,1,"5: BEC Volt");        
 473          ////                i1=(int)(pgmcard_line_num[5]);
 474          ////                k1=(49+pgmcard_line_num[5])/10; 
 475          ////                if(pgmcard_line_num[5]==11)
 476          ////                sprintf(s,"*%d: %02.1fV",i1,k1);  
 477          ////                else          
 478          ////                sprintf(s,"%d: %02.1fV",i1,k1);
 479          ////                display_string(5,1,s);          
 480          ////            break;
 481          
 482          ////        case 6:      
 483          ////                clear_screen();                 //clear all dots
C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 9   

 484          ////                display_string(2,1,"6: Start-up Time");
 485          ////                i1=(int)(pgmcard_line_num[6]);
 486          ////                i2=3+pgmcard_line_num[6]; 
 487          ////                if(pgmcard_line_num[6]==12)
 488          ////                sprintf(s,"*%d: %ds",i1,i2);  
 489          ////                else  
 490          ////                sprintf(s,"%d: %ds",i1,i2);
 491          ////                display_string(5,1,s);              
 492          ////            break;
 493          ////        
 494          ////        case 7:
 495          ////                clear_screen();                 //clear all dots
 496          ////                display_string(2,1,"7: Gov Param P");
 497          ////                i1=i2=(int)(pgmcard_line_num[7]); 
 498          ////                if(pgmcard_line_num[7]==4)
 499          ////                sprintf(s,"*%d: %d",i1,i2); 
 500          ////                else        
 501          ////                sprintf(s,"%d: %d",i1,i2);
 502          ////                display_string(5,1,s); 
 503          ////            break;
 504          ////        
 505          ////        case 8:
 506          ////                clear_screen();                 //clear all dots
 507          ////                display_string(2,1,"8: Gov Param I");
 508          ////                i1=i2=(int)(pgmcard_line_num[8]); 
 509          ////                if(pgmcard_line_num[8]==4)
 510          ////                sprintf(s,"*%d: %d",i1,i2); 
 511          ////                else    
 512          ////                sprintf(s,"%d: %d",i1,i2);
 513          ////                display_string(5,1,s);                
 514          ////            break;
 515          ////          
 516          ////        case 9:
 517          ////                clear_screen();                 //clear all dots
 518          ////                display_string(2,1,"9: AR Time");
 519          ////                i1=(int)(pgmcard_line_num[9]);
 520          ////                i2=(int)(pgmcard_line_num[9])-1;
 521          ////                if(pgmcard_line_num[9]==26)       
 522          ////                sprintf(s,"*%d: %ds",i1,i2);  
 523          ////                else        
 524          ////                sprintf(s,"%d: %ds",i1,i2);
 525          ////                display_string(5,1,s);
 526          ////            break;            
 527          ////            
 528          ////        case 10:
 529          ////                clear_screen();                 //clear all dots
 530          ////                display_string(2,1,"10: AR Restart Time");              
 531          ////                i1=(int)(pgmcard_line_num[10]);
 532          ////                k1=0.5+(float)((pgmcard_line_num[10])*0.5); 
 533          ////                if(pgmcard_line_num[10]==2)
 534          ////                sprintf(s,"*%d: %02.1fs",i1,k1);
 535          ////                else
 536          ////                sprintf(s,"%d: %02.1fs",i1,k1);
 537          ////                display_string(5,1,s);                      
 538          ////            break;            
 539          ////        
 540          ////        case 11:
 541          ////                clear_screen();                 //clear all dots
 542          ////                display_string(2,1,"11: Brake Type");
 543          ////                if(pgmcard_line_num[11]==1)
 544          ////                display_string(5,1,"*1: Disabled");
 545          ////                if(pgmcard_line_num[11]==2)
C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 10  

 546          ////                display_string(5,1,"*2: Normal");
 547          ////                if(pgmcard_line_num[11]==3)
 548          ////                display_string(5,1,"3: Proportion");
 549          ////                if(pgmcard_line_num[11]==4)
 550          ////                display_string(5,1,"4: Reverse");
 551          ////            break;  
 552          ////            
 553          ////        case 12:
 554          ////                clear_screen();                 //clear all dots
 555          ////                display_string(2,1,"12: Brake Force");
 556          ////                i1=i2=(int)(pgmcard_line_num[12]);
 557          ////                if(pgmcard_line_num[12]==90)
 558          ////                sprintf(s,"*%d: %d%%",i1,i2); 
 559          ////                else
 560          ////                sprintf(s,"%d: %d%%",i1,i2);
 561          ////                display_string(5,1,s);            
 562          ////            break;  
 563          ////            
 564          ////        case 13:
 565          ////                clear_screen();                 //clear all dots
 566          ////                display_string(2,1,"13: Timing");
 567          ////                if(pgmcard_line_num[13]==1)
 568          ////                display_string(5,1,"1: 0deg");
 569          ////                if(pgmcard_line_num[13]==2)
 570          ////                display_string(5,1,"2: 7.5deg");
 571          ////                if(pgmcard_line_num[13]==3)
 572          ////                display_string(5,1,"*3: 15deg");
 573          ////                if(pgmcard_line_num[13]==4)
 574          ////                display_string(5,1,"4: 22.5deg");
 575          ////                if(pgmcard_line_num[13]==5)
 576          ////                display_string(5,1,"5: 30deg");
 577          ////            break;
 578          ////            
 579          ////        case 14:
 580          ////                clear_screen();                 //clear all dots
 581          ////                display_string(2,1,"14: Rotate Direction");
 582          ////                if(pgmcard_line_num[14]==1)
 583          ////                display_string(5,1,"*1: CW");
 584          ////                if(pgmcard_line_num[14]==2)
 585          ////                display_string(5,1,"2: CCW");
 586          ////            break;  
 587          ////            
 588          ////        case 15:
 589          ////                clear_screen();                 //clear all dots
 590          ////                display_string(2,1,"15: Active FW");
 591          ////                if(pgmcard_line_num[15]==1)
 592          ////                display_string(5,1,"1: Enabled");
 593          ////                if(pgmcard_line_num[15]==2)
 594          ////                display_string(5,1,"*2: Disabled");
 595          ////            break;  
 596          ////                
 597          ////        case 16:
 598          ////                clear_screen();                 //clear all dots
 599          ////                display_string(2,1,"Load Default Set");       
 600          ////            break;
 601          ////        
 602          ////    }
 603          ////    }
 604          ////    
 605          ////    
 606          ////    if(pgmcard_line_num[23]==2)              // ÈôÎª³µÄ£µçµ÷
 607          ////    {
C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 11  

 608          ////    switch(pgmcard_row_num)
 609          ////    {
 610          ////        case 1:
 611          ////                clear_screen();                 //clear all dots
 612          ////                display_string(2,1,"1: Run Mode");
 613          ////                if(pgmcard_line_num[1]==1)
 614          ////                display_string(5,1,"1: For/Brake");
 615          ////                if(pgmcard_line_num[1]==2)
 616          ////                display_string(5,1,"*2: For/Rev/Brake");
 617          ////            break;
 618          
 619          ////        case 2:
 620          ////                clear_screen();                 //clear all dots
 621          ////                display_string(2,1,"2: Lipo Cells");              
 622          ////                if(pgmcard_line_num[2]==1)
 623          ////                display_string(5,1,"*1: Auto-Calc");      
 624          ////                else
 625          ////                { 
 626          ////                i1=i2=(int)(pgmcard_line_num[2]);
 627          ////                sprintf(s,"%d: %dS",i1,i2);
 628          ////                display_string(5,1,s);
 629          ////                }
 630          ////            break;
 631          
 632          ////        case 3:
 633          ////                clear_screen();                 //clear all dots
 634          ////                display_string(2,1,"3: Cutoff Volt");
 635          ////                if(pgmcard_line_num[3]==1)
 636          ////                display_string(5,1,"1: Disabled");
 637          ////                else
 638          ////                { 
 639          ////                i1=(int)(pgmcard_line_num[3]);
 640          ////                k1=(27+pgmcard_line_num[3]-1)/10;   
 641          ////                if(pgmcard_line_num[3]==4)
 642          ////                sprintf(s,"*%d: %02.1fV",i1,k1);  
 643          ////                else  
 644          ////                sprintf(s,"%d: %02.1fV",i1,k1);
 645          ////                display_string(5,1,s);
 646          ////                }               
 647          ////            break;
 648          
 649          ////        case 4:        
 650          ////                clear_screen();                 //clear all dots
 651          ////                display_string(2,1,"4: ESC Thermal");       
 652          ////                if(pgmcard_line_num[4]==1)
 653          ////                display_string(5,1,"*1: 105C/221F");
 654          ////                if(pgmcard_line_num[4]==2)
 655          ////                display_string(5,1,"2: 125C/257F");         
 656          ////            break;
 657          
 658          ////        case 5:
 659          ////                clear_screen();                 //clear all dots
 660          ////                display_string(2,1,"5: BEC Volt");        
 661          ////                if(pgmcard_line_num[5]==1)
 662          ////                display_string(5,1,"*1: 6.0V");
 663          ////                if(pgmcard_line_num[5]==2)
 664          ////                display_string(5,1,"2: 7.4V"); 
 665          ////            break;
 666          ////        
 667          ////        case 6:
 668          ////                clear_screen();                 //clear all dots
 669          ////                display_string(2,1,"6: Max Brake");
C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 12  

 670          ////                if(pgmcard_line_num[6]==5)
 671          ////                display_string(5,1,"5: Disabled");
 672          ////                else
 673          ////                {
 674          ////                i1=(int)(pgmcard_line_num[6]);
 675          ////                k1=(float)((pgmcard_line_num[6])*25); 
 676          ////                if(pgmcard_line_num[6]==2)
 677          ////                {sprintf(s,"*%d: %02.0f%%",i1,k1);
 678          ////                display_string(5,1,s);}   
 679          ////                else    
 680          ////                {sprintf(s,"%d: %02.0f%%",i1,k1);
 681          ////                display_string(5,1,s);} 
 682          ////                }               
 683          ////            break;
 684          ////          
 685          ////        case 7:
 686          ////                clear_screen();                 //clear all dots
 687          ////                display_string(2,1,"7: Max Reverse");
 688          ////                if(pgmcard_line_num[7]==1)
 689          ////                display_string(5,1,"1: 25%");
 690          ////                if(pgmcard_line_num[7]==2)
 691          ////                display_string(5,1,"*2: 50%");
 692          ////            break;            
 693          ////            
 694          ////        case 8:
 695          ////                clear_screen();                 //clear all dots
 696          ////                display_string(2,1,"8: Punch");             
 697          ////                i1=i2=(int)(pgmcard_line_num[8]);
 698          ////                if(pgmcard_line_num[8]==3)
 699          ////                sprintf(s,"*%d: Level %d",i1,i2);
 700          ////                else
 701          ////                sprintf(s,"%d: Level %d",i1,i2);
 702          ////                display_string(5,1,s);                      
 703          ////            break;            
 704          ////        
 705          ////        case 9:
 706          ////                clear_screen();                 //clear all dots
 707          ////                display_string(2,1,"9: Drag Brake");
 708          ////                i1=(int)(pgmcard_line_num[9]);
 709          ////                i2=(int)(pgmcard_line_num[9])*25;
 710          ////                if(pgmcard_line_num[9]==1)
 711          ////                sprintf(s,"*%d: %d%",i1,i2);
 712          ////                else
 713          ////                sprintf(s,"%d: %d%",i1,i2);
 714          ////                display_string(5,1,s);
 715          ////            break;  
 716          
 717          ////        case 10:
 718          ////                clear_screen();                 //clear all dots
 719          ////                display_string(2,1,"10: <null>");             
 720          ////            break;  
 721          ////        
 722          ////        case 11:
 723          ////                clear_screen();                 //clear all dots
 724          ////                display_string(2,1,"11: <null>");             
 725          ////            break;  
 726          ////            
 727          ////        case 12:
 728          ////                clear_screen();                 //clear all dots
 729          ////                display_string(2,1,"12: <null>");             
 730          ////            break;  
 731          ////            
C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 13  

 732          ////        case 13:
 733          ////                clear_screen();                 //clear all dots
 734          ////                display_string(2,1,"13: <null>");             
 735          ////            break;    
 736          ////            
 737          ////        case 14:
 738          ////                clear_screen();                 //clear all dots
 739          ////                display_string(2,1,"14: <null>");             
 740          ////            break;  
 741          ////        
 742          ////        case 15:
 743          ////                clear_screen();                 //clear all dots
 744          ////                display_string(2,1,"15: <null>");             
 745          ////            break;    
 746          ////        
 747          ////        case 16:
 748          ////                clear_screen();                 //clear all dots
 749          ////                display_string(2,1,"Load Default Set");       
 750          ////            break;
 751          ////        
 752          ////    }       
 753          ////    } 
 754          ////    
 755          ////    
 756          ////}
 757          
 758          
 759          //////******************************************************************
 760          //////ÖÐ¶Ï·þÎñ³ÌÐò
 761          //////******************************************************************
 762          ////SI_INTERRUPT(ADC0EOC_ISR, ADC0EOC_IRQn)
 763          ////{
 764          //////  uchar s[20];
 765          //////  float c[9];
 766          ////    uint32_t result=0;
 767          ////    uint32_t mV[8];          // ¸÷½Úï®µç³ØµçÐ¾µçÑ¹£¨ºÁ·ü±íÊ¾£©  
 768          ////    char i;
 769          ////  
 770          ////    ADC0CN0_ADINT = 0;                               // Clear ADC0 conv. complete flag
 771          
 772          ////    result= ADC0;
 773          
 774          ////    switch(channel)
 775          ////    {
 776          ////        case 1:
 777          ////        case 2:
 778          ////        case 3:
 779          ////        case 4:
 780          ////        case 5:
 781          ////        case 6:
 782          ////        case 7:
 783          ////        case 8:
 784          ////            {   
 785          ////            mV[channel-1] =  result * 2500 / 1023*11;             
 786          ////            for(i=channel-2;i>=0;i--)
 787          ////            mV[channel-1]-=mV[i];
 788          ////            if(mV[channel-1]>4400)      
 789          ////            mV[channel-1]=0;              
 790          ////            c[channel-1]=(float)(mV[channel-1])/1000;   
 791          
 792          ////            
 793          ////            
C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 14  

 794          ////            if(channel==1)
 795          ////            AMX0P = AMX0P_AMX0P__ADC0P14;
 796          ////            if(channel==2)
 797          ////            AMX0P = AMX0P_AMX0P__ADC0P13;
 798          ////            if(channel==3)
 799          ////            AMX0P = AMX0P_AMX0P__ADC0P12;           
 800          ////            if(channel==4)
 801          ////            AMX0P = AMX0P_AMX0P__ADC0P11;
 802          ////            if(channel==5)
 803          ////            AMX0P = AMX0P_AMX0P__ADC0P10;
 804          ////            if(channel==6)
 805          ////            AMX0P = AMX0P_AMX0P__ADC0P9;            
 806          ////            if(channel==7)
 807          ////            AMX0P = AMX0P_AMX0P__ADC0P2;  
 808          ////            if(channel==8)
 809          ////            AMX0P = AMX0P_AMX0P__ADC0P15; 
 810          ////            }
 811          ////            
 812          ////            if(channel<8)
 813          ////            {
 814          ////              channel++;    
 815          ////              ADC0CN0_ADBUSY=1;
 816          ////            }
 817          ////            else
 818          ////            {
 819          ////              for(i=0;i<8;i++)
 820          ////              c[8]+=c[i];
 821          ////              
 822          ////              channel=1;                          
 823          ////            }           
 824          ////            break;  
 825          ////    }
 826          ////}
 827          
 828          
 829          ////SI_INTERRUPT (TIMER0_ISR, TIMER0_IRQn)
 830          ////{
 831          ////    IE_EA=0;
 832          ////    //High byte interrupt (happens every 32ms)
 833          ////    TCON_TF0=0;      //Clear T0 interrupt flag
 834          
 835          //// //   TH0 = 237;                            // Timer0 5msÖÐ¶ÏÖÜÆÚ
 836          ////    TH0 = 128;                 // Timer0 16msÖÐ¶ÏÖÜÆÚ
 837          ////    TL0 = 0;
 838          
 839          
 840          ////    //ÈôÎª½ÓÊÕµçµ÷ÐÅºÅ½×¶Î£¬Ã¿´ÎT0ÖÐ¶Ï±£´æP2.0½ÅPCAÖÐ¶ÏµÄ¼ÆÊý
 841          ////    if(p00_receive_enable)   
 842          ////    {
 843          ////        
 844          ////        switch(para_num)
 845          ////        {
 846          ////            case 3:
 847          ////            case 4:
 848          ////            case 5:
 849          ////            case 6:
 850          ////            case 7:
 851          ////            case 8:
 852          ////            case 9: 
 853          ////            case 10:
 854          ////            case 11:
 855          ////            case 12:
C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 15  

 856          ////            case 13:  
 857          ////            case 14:
 858          ////            case 15:
 859          ////            case 16:            
 860          ////            case 17:              
 861          ////            case 18:  
 862          ////            case 19:          
 863          ////            case 20:
 864          ////            case 21:
 865          ////            case 22:  
 866          ////            case 23:
 867          ////            case 24:
 868          ////            case 25:
 869          ////            case 26:        
 870          ////                pgmcard_line_num[para_num-3]=esc_pulse_cnt;
 871          ////                esc_pulse_cnt=0;
 872          ////              //  if(para_num==16)
 873          ////                if(para_num==26)
 874          ////                {
 875          ////                    p00_receive_enable = 0;
 876          ////                    TCON_TR0=0; 
 877          ////                } 
 878          ////                break;
 879          ////        }
 880          
 881          ////        para_num++;
 882          ////    //    TCON_TR0=0;
 883          //////        pulse_cnt_start_flag=0;
 884          ////    }
 885          
 886          ////    // ÈôÎª±à³Ì½×¶Î£¬·¢ËÍ±à³ÌÂö³å
 887          ////    else
 888          ////    {
 889          ////        pwm_on_flag = 0;
 890          ////        pluse_cnt = 1;
 891          
 892          ////        if(!pgmcard_initiate_flag)    //Èô·Ç³õÊ¼»¯½×¶Î
 893          ////        {
 894          ////           if(!pgmcard_state_flag)    //Èô·Ç±à³Ì½×¶Î
 895          ////           {
 896          ////               pulse_num=0;           //Êä³öÂö³åÐòÁÐÊýÎª0
 897          ////               pgmcard_state_flag=0;
 898          ////           }
 899          ////           else                       //ÈôÊÇ±à³Ì½×¶Î£¬ÓÃÓÚ·¢ËÍ±à³ÌÂö³å
 900          ////           {
 901          ////               pulse_num=pgmcard_line_num[pgm_card_num];
 902          ////               pgm_card_num++;
 903          ////               if(pgm_card_num>16)
 904          ////               {
 905          ////               TCON_TR0=0;
 906          ////               pulse_num=0;
 907          ////               pgm_card_num=1;
 908          ////               pgmcard_state_flag=0;    //·¢ËÍÍê±Ï£¬½«¸Ã±êÖ¾ÇåÁã£¬ÖØÐÂ»Øµ½·Ç±à³Ì½×¶Î
 909          ////               }
 910          ////           }
 911          ////        }
 912          ////        
 913          ////        else pulse_num = 5;           //³õÊ¼»¯½×¶Î£¬Âö³åÊýÎª5£¬Êä³öÁ½×é£¬ÓÃÓÚÓëµçµ÷½¨Á¢Á¬½Ó
 914          
 915          ////        TMR2CN0_TR2 = 1;    //Æô¶¯T2£¬ÔÚÆäÖÐ¶ÏÖÐ·¢ËÍÂö³å
 916          ////    }
 917          ////    IE_EA = 1;
C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 16  

 918          ////}
 919          
 920          ////SI_INTERRUPT (TIMER1_ISR, TIMER1_IRQn)
 921          ////{
 922          ////    TCON_TF1 = 0;        //Clear T1 interrupt flag
 923          
 924          ////    if(pca0_t1_run_flag)
 925          ////    {
 926          ////        TH1 = 215;   // ²ÎÊý¼ü³¤°´ÏÔÊ¾±ä»»Ïà¶Ô¿ìÒ»Ð©
 927          ////        TL1 = 0;
 928          ////    }
 929          ////    if(pca1_t1_run_flag)
 930          ////    {
 931          ////        TH1 = 200;                            
 932          ////        TL1 = 0;
 933          ////    }
 934          ////    t1_cnt++;
 935          ////  
 936          ////    if(t1_cnt>31)                         // ¶¨Ê±1s½âËø
 937          ////    {
 938          ////      
 939          ////        if(pca0_t1_run_flag)
 940          ////        {
 941          ////            PCA0CPM0 |= 0x01;               // PCA Module 0 ¿ªÖÐ¶Ï
 942          ////            pca0_button_lock_flag=0;        // °´¼ü½âËø
 943          ////            t1_cnt=0;                       // ¼ÆÊýÇåÁã
 944          ////            TCON_TR1=0;                          // ÖÐ¶Ï¹Ø±ÕT1
 945          ////            pca0_t1_run_flag=0;
 946          
 947          ////            if(!SW2)                        // Èô°´¼ü°´ÏÂ£¬ÔòÖØÐÂÆô¶¯T1
 948          ////            {
 949          ////                pca0_t1_run_flag=1;
 950          ////                TCON_TR1=1;
 951          
 952          ////                pgm_line_num_judge(); 
 953          ////                pgm_para_display();                   
 954          ////            }
 955          ////        }
 956          ////        
 957          ////        if(pca1_t1_run_flag)
 958          ////        {
 959          ////            PCA0CPM1 |= 0x01;               // PCA Module 1 ???
 960          ////            pca1_button_lock_flag=0;          // ????
 961          ////            t1_cnt=0;                       // ????
 962          ////            TCON_TR1=0;                          // ????T1
 963          ////            pca1_t1_run_flag=0;
 964          ////            if(!SW1)                        // ?????,?????T1
 965          ////            {
 966          ////                pca1_t1_run_flag=1;
 967          ////                TCON_TR1=1;
 968          ////                pgmcard_row_num++;
 969          ////              
 970          ////          //      if(pgmcard_row_num>15)
 971          ////                if(pgmcard_row_num>16)
 972          ////                pgmcard_row_num=1;
 973          ////                
 974          ////                pgm_para_display();
 975          ////            }
 976          ////        }
 977          ////    }
 978          
 979          ////}
C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 17  

 980          
 981          ////SI_INTERRUPT (TIMER2_ISR, TIMER2_IRQn)
 982          ////{
 983          ////    IE_EA = 0;      //Disable all interrupts
 984          ////    TMR2CN0_TF2H = 0;       //Clear T2 interrupt flag
 985          
 986          ////    if(pluse_cnt<=pulse_num)
 987          ////    {
 988          ////        if(!pwm_on_flag)
 989          ////        {
 990          ////            TMR2RLH=255;
 991          ////            TMR2RLL=236;
 992          ////            
 993          ////            RC_OUT=1;
 994          ////            pwm_on_flag=1;
 995          ////        }
 996          ////        else
 997          ////        {
 998          ////            TMR2RLH=255;
 999          ////            TMR2RLL=236;        
1000          ////                
1001          ////            RC_OUT=0;
1002          ////            pwm_on_flag=0;
1003          ////            pluse_cnt++;
1004          ////        }
1005          ////    }
1006          ////    else
1007          ////    {
1008          ////        if(!pgmcard_initiate_flag)  //ÈôÎªÕý³£±à³Ì½×¶Î£¬Êä³ö¶ÔÓ¦±à³ÌÏîÊýÄ¿µÄÂö³åÐòÁÐºó£¬Í£Ö¹T2£¬µÈ´ýÏÂ
             -Ò»´ÎT0ÖÐ¶ÏÆô¶¯T2
1009          ////        {
1010          ////          TMR2CN0_TR2=0;
1011          ////        }
1012          ////        else             //ÈôÎª³õÊ¼»¯½×¶Î
1013          ////        {
1014          ////            initiate_cnt++;    //³õÊ¼»¯Âö³åÐòÁÐ¼ÆÊý¼Ó1
1015          ////            TMR2CN0_TR2=0;
1016          ////        }
1017          ////    }
1018          ////    IE_EA=1;
1019          ////}
1020          
1021          ////SI_INTERRUPT (INT0_ISR, INT0_IRQn)
1022          ////{
1023          ////    char i1=0;
1024          ////  
1025          ////    Delay_ms(50); 
1026          ////    
1027          ////    if(!SW3)
1028          ////    {
1029          ////        pgmcard_state_flag=1;            // ??????????
1030          
1031          ////        IE_EX0 = 0;                             // ¹Ø±ÕÍâ²¿ÖÐ¶Ï0
1032          
1033          ////        if(pgmcard_row_num==16)          // Èô´ËÊ±Í£ÁôÔÚÄ¬ÈÏÖµÉèÖÃÒ³Ãæ£¬Ôò¸÷²ÎÊý»Ö¸´Ä¬ÈÏÖµ
1034          ////        {       
1035          ////                if(pgmcard_line_num[23]==1)       // ÈôÎªSkylord Adv¿ÕÄ£µçµ÷
1036          ////                { 
1037          ////                pgmcard_line_num[1]=3;
1038          ////                pgmcard_line_num[2]=1;
1039          ////                pgmcard_line_num[3]=1;
1040          ////                pgmcard_line_num[4]=4;
C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 18  

1041          ////                pgmcard_line_num[5]=11;
1042          ////                pgmcard_line_num[6]=12;
1043          ////                pgmcard_line_num[7]=2;
1044          ////                pgmcard_line_num[8]=2;
1045          ////                pgmcard_line_num[9]=26;
1046          ////                pgmcard_line_num[10]=2;
1047          ////                pgmcard_line_num[11]=1;
1048          ////                pgmcard_line_num[12]=90;
1049          ////                pgmcard_line_num[13]=3;
1050          ////                pgmcard_line_num[14]=1;
1051          ////                pgmcard_line_num[15]=2;
1052          ////                }
1053          ////                if(pgmcard_line_num[23]==2)      // ÈôÎª³µÄ£µçµ÷
1054          ////                { 
1055          ////                pgmcard_line_num[1]=2;
1056          ////                pgmcard_line_num[2]=1;
1057          ////                pgmcard_line_num[3]=4;
1058          ////                pgmcard_line_num[4]=1;
1059          ////                pgmcard_line_num[5]=1;
1060          ////                pgmcard_line_num[6]=2;
1061          ////                pgmcard_line_num[7]=2;
1062          ////                pgmcard_line_num[8]=3;
1063          ////                pgmcard_line_num[9]=4;
1064          ////                pgmcard_line_num[10]=0;
1065          ////                pgmcard_line_num[11]=0;
1066          ////                pgmcard_line_num[12]=0;
1067          ////                pgmcard_line_num[13]=0;
1068          ////                pgmcard_line_num[14]=0;
1069          ////                pgmcard_line_num[15]=0;
1070          ////                }   
1071          ////        }
1072          ////    
1073          ////        TCON_TR0=1;                           // Æô¶¯T0
1074          ////                         
1075          ////        clear_screen();                 //clear all dots
1076          ////        display_string(2,1,"Saving...");
1077          ////        /*
1078          ////        display_string(2,1,"Saving...");
1079          ////        Delay_ms(10);
1080          ////        display_string(4,1,"Please Wait...");
1081          ////        */
1082          ////        Delay_ms(200);
1083          ////        Delay_ms(200);  
1084          ////        pgm_para_display(); 
1085          ////        IE_EX0 = 1;                 
1086          ////    }
1087          ////}
1088          
1089          ////SI_INTERRUPT (INT1_ISR, INT1_IRQn)
1090          ////{
1091          ////    uchar s[20];
1092          ////    float a16,a17,a18,a19,a20,a21;
1093          //////    float f1,f2,f3;
1094          ////    
1095          ////    Delay_ms(40); 
1096          ////    if(!SW4)
1097          ////    { 
1098          ////      clear_screen();  
1099          //////      Delay_ms(10); 
1100          ////      a16=(float)pgmcard_line_num[16];    
1101          ////      a17=(float)pgmcard_line_num[17];
1102          ////      a18=(float)pgmcard_line_num[18];
C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 19  

1103          ////      a19=(float)pgmcard_line_num[19];
1104          ////      a20=(float)pgmcard_line_num[20];
1105          ////      a21=(float)pgmcard_line_num[21];      
1106          ////  
1107          ////       
1108          ////      a16=(a17*256+a16)/1024*3.3*11;     
1109          ////      a18=((a19*256+a18)*3.3/1024-0.776)*1000/2.86; 
1110          ////      a20=(a21*256+a20)*3.3/1024/10/0.0005/2;   //·¢ÏÖ¸ÃÖµ³ý2ºóÊ®·Ö½Ó½üÊµ¼ÊµçÁ÷Öµ   
1111          ////      sprintf(s,"Min Volt:%02.2fV",a16);
1112          ////      display_string(1,1,s);
1113          ////      sprintf(s,"Max Tem:%02.1fC",a18);
1114          ////      display_string(3,1,s);  
1115          ////      sprintf(s,"Max Cur:%02.2fA",a20);
1116          ////      display_string(5,1,s);      
1117          
1118          ////    }
1119          ////}
1120          
1121          ////SI_INTERRUPT (PCA0_ISR, PCA0_IRQn)
1122          ////{
1123          ////    if (PCA0CN0_CCF0)        // "Value"¼ü°´ÏÂ
1124          ////    {
1125          ////        PCA0CN0_CCF0 = 0;    // Clear module 0 interrupt flag.
1126          ////      
1127          ////        Delay_ms(40); 
1128          ////        if(!SW2)       //???????
1129          ////        {
1130          ////            TH1=200;
1131          ////            TL1=0;
1132          ////            t1_cnt=0;                            // ????
1133          ////            TCON_TR1=1;                               // ??T1????
1134          ////            pca0_t1_run_flag=1;
1135          ////            PCA0CPM0 &= 0xFE;                    // PCA Module 0 ???
1136          ////            pca0_button_lock_flag=1;               // ????
1137          ////            while(pca0_button_lock_flag)
1138          ////            {
1139          ////                    Delay_ms(200);        
1140          ////                    Delay_ms(200);
1141          ////                    Delay_ms(200);
1142          ////                    if(SW2)              // ÉèÖÃµÄÑÓÊ±Ê±¼äµ½£¬ÅÐ¶Ï°´¼üÊÇ·ñÌ§Æð
1143          ////                    {
1144          ////                        pca0_button_lock_flag=0;       //ÈôÌ§ÆðÔò½âËø£¬¼ÆÊý¼Ó1
1145          ////                      
1146          ////                        pgm_line_num_judge();
1147          ////                        pgm_para_display();
1148          ////                    }
1149          ////            }
1150          ////        }
1151          ////    }
1152          ////    
1153          ////    if (PCA0CN0_CCF1)           // "Item"¼ü°´ÏÂ
1154          ////    {
1155          ////        PCA0CN0_CCF1=0;         // Clear module 1 interrupt flag.
1156          
1157          ////        Delay_ms(40); 
1158          ////        if(!SW1)                // È·ÈÏ°´¼ü°´ÏÂ
1159          ////        {
1160          ////            TH1=200;
1161          ////            TL1=0;
1162          ////            t1_cnt=0;                            // T1¼ÆÊ±ÊýÇåÁã
1163          ////            TCON_TR1=1;                          // Æô¶¯T1
1164          ////            pca1_t1_run_flag=1;
C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 20  

1165          ////            PCA0CPM1 &= 0xFE;                    // PCA Module 1 ¹ØÖÐ¶Ï
1166          ////            pca1_button_lock_flag=1;             // °´¼ü¼ÓËø
1167          ////            while(pca1_button_lock_flag)
1168          ////            {
1169          ////                    Delay_ms(200);
1170          ////                    Delay_ms(200);
1171          ////                    Delay_ms(200);                  
1172          ////                    if(SW1)              // ÉèÖÃµÄÑÓÊ±Ê±¼äµ½£¬ÅÐ¶Ï°´¼üÊÇ·ñÌ§Æð
1173          ////                    {
1174          ////                        pca1_button_lock_flag=0;   //ÈôÌ§ÆðÔò½âËø£¬¼ÆÊý¼Ó1
1175          ////                        pgmcard_row_num++;
1176          ////                              
1177          ////                  //      if(pgmcard_row_num>15)
1178          ////                        if(pgmcard_row_num>16)
1179          ////                        pgmcard_row_num=1;
1180          ////                        
1181          ////                        pgm_para_display();
1182          ////                    }
1183          ////            }
1184          ////        }
1185          ////    }
1186          ////    
1187          
1188          ////    if (PCA0CN0_CCF2)             //ÈôÎª½ÓÊÕµçµ÷ÐÅºÅ½×¶Î£¬ÎªP2.0½ÅµÄPCAÖÐ¶Ï  
1189          ////    {   
1190          ////        PCA0CN0_CCF2=0;                    
1191          ////        if(!pulse_cnt_start_flag)
1192          ////        {
1193          
1194          ////            TCON_TR0=1;            //Æô¶¯T0
1195          ////  //        esc_pulse_cnt=1;
1196          ////            pulse_cnt_start_flag=1;
1197          ////        }
1198          ////        else esc_pulse_cnt++;
1199          ////    }
1200          ////}
C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 21  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


C51 COMPILER V9.56.0.0   ESCCTRL                                                           10/31/2016 08:45:36 PAGE 22  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
